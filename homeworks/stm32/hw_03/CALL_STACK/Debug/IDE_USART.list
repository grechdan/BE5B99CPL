
IDE_USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bd0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002d94  08002d94  00012d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dac  08002dac  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08002dac  08002dac  00012dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002db4  08002db4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002db4  08002db4  00012db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002db8  08002db8  00012db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002dbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  2000001c  08002dd8  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08002dd8  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      000000a7  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000be6f  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c95  00000000  00000000  0002bf62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007c0  00000000  00000000  0002dbf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000760  00000000  00000000  0002e3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020e58  00000000  00000000  0002eb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008386  00000000  00000000  0004f970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca4f3  00000000  00000000  00057cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c34  00000000  00000000  001221ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000128d  00000000  00000000  00123e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <deregister_tm_clones>:
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <deregister_tm_clones+0x10>)
 80001c6:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <deregister_tm_clones+0x14>)
 80001c8:	4283      	cmp	r3, r0
 80001ca:	d002      	beq.n	80001d2 <deregister_tm_clones+0xe>
 80001cc:	4b03      	ldr	r3, [pc, #12]	; (80001dc <deregister_tm_clones+0x18>)
 80001ce:	b103      	cbz	r3, 80001d2 <deregister_tm_clones+0xe>
 80001d0:	4718      	bx	r3
 80001d2:	4770      	bx	lr
 80001d4:	2000001c 	.word	0x2000001c
 80001d8:	2000001c 	.word	0x2000001c
 80001dc:	00000000 	.word	0x00000000

080001e0 <register_tm_clones>:
 80001e0:	4805      	ldr	r0, [pc, #20]	; (80001f8 <register_tm_clones+0x18>)
 80001e2:	4906      	ldr	r1, [pc, #24]	; (80001fc <register_tm_clones+0x1c>)
 80001e4:	1a0b      	subs	r3, r1, r0
 80001e6:	0fd9      	lsrs	r1, r3, #31
 80001e8:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001ec:	1049      	asrs	r1, r1, #1
 80001ee:	d002      	beq.n	80001f6 <register_tm_clones+0x16>
 80001f0:	4b03      	ldr	r3, [pc, #12]	; (8000200 <register_tm_clones+0x20>)
 80001f2:	b103      	cbz	r3, 80001f6 <register_tm_clones+0x16>
 80001f4:	4718      	bx	r3
 80001f6:	4770      	bx	lr
 80001f8:	2000001c 	.word	0x2000001c
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	00000000 	.word	0x00000000

08000204 <__do_global_dtors_aux>:
 8000204:	b510      	push	{r4, lr}
 8000206:	4c06      	ldr	r4, [pc, #24]	; (8000220 <__do_global_dtors_aux+0x1c>)
 8000208:	7823      	ldrb	r3, [r4, #0]
 800020a:	b943      	cbnz	r3, 800021e <__do_global_dtors_aux+0x1a>
 800020c:	f7ff ffda 	bl	80001c4 <deregister_tm_clones>
 8000210:	4b04      	ldr	r3, [pc, #16]	; (8000224 <__do_global_dtors_aux+0x20>)
 8000212:	b113      	cbz	r3, 800021a <__do_global_dtors_aux+0x16>
 8000214:	4804      	ldr	r0, [pc, #16]	; (8000228 <__do_global_dtors_aux+0x24>)
 8000216:	f3af 8000 	nop.w
 800021a:	2301      	movs	r3, #1
 800021c:	7023      	strb	r3, [r4, #0]
 800021e:	bd10      	pop	{r4, pc}
 8000220:	2000001c 	.word	0x2000001c
 8000224:	00000000 	.word	0x00000000
 8000228:	08002d7c 	.word	0x08002d7c

0800022c <frame_dummy>:
 800022c:	b508      	push	{r3, lr}
 800022e:	4b04      	ldr	r3, [pc, #16]	; (8000240 <frame_dummy+0x14>)
 8000230:	b11b      	cbz	r3, 800023a <frame_dummy+0xe>
 8000232:	4904      	ldr	r1, [pc, #16]	; (8000244 <frame_dummy+0x18>)
 8000234:	4804      	ldr	r0, [pc, #16]	; (8000248 <frame_dummy+0x1c>)
 8000236:	f3af 8000 	nop.w
 800023a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800023e:	e7cf      	b.n	80001e0 <register_tm_clones>
 8000240:	00000000 	.word	0x00000000
 8000244:	20000020 	.word	0x20000020
 8000248:	08002d7c 	.word	0x08002d7c

0800024c <__libc_init_array>:
 800024c:	b570      	push	{r4, r5, r6, lr}
 800024e:	4e0d      	ldr	r6, [pc, #52]	; (8000284 <__libc_init_array+0x38>)
 8000250:	4d0d      	ldr	r5, [pc, #52]	; (8000288 <__libc_init_array+0x3c>)
 8000252:	1b76      	subs	r6, r6, r5
 8000254:	10b6      	asrs	r6, r6, #2
 8000256:	d006      	beq.n	8000266 <__libc_init_array+0x1a>
 8000258:	2400      	movs	r4, #0
 800025a:	3401      	adds	r4, #1
 800025c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000260:	4798      	blx	r3
 8000262:	42a6      	cmp	r6, r4
 8000264:	d1f9      	bne.n	800025a <__libc_init_array+0xe>
 8000266:	4e09      	ldr	r6, [pc, #36]	; (800028c <__libc_init_array+0x40>)
 8000268:	4d09      	ldr	r5, [pc, #36]	; (8000290 <__libc_init_array+0x44>)
 800026a:	1b76      	subs	r6, r6, r5
 800026c:	f002 fd86 	bl	8002d7c <_init>
 8000270:	10b6      	asrs	r6, r6, #2
 8000272:	d006      	beq.n	8000282 <__libc_init_array+0x36>
 8000274:	2400      	movs	r4, #0
 8000276:	3401      	adds	r4, #1
 8000278:	f855 3b04 	ldr.w	r3, [r5], #4
 800027c:	4798      	blx	r3
 800027e:	42a6      	cmp	r6, r4
 8000280:	d1f9      	bne.n	8000276 <__libc_init_array+0x2a>
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	08002db4 	.word	0x08002db4
 8000288:	08002db4 	.word	0x08002db4
 800028c:	08002db8 	.word	0x08002db8
 8000290:	08002db4 	.word	0x08002db4

08000294 <memset>:
 8000294:	b4f0      	push	{r4, r5, r6, r7}
 8000296:	0786      	lsls	r6, r0, #30
 8000298:	d046      	beq.n	8000328 <memset+0x94>
 800029a:	1e54      	subs	r4, r2, #1
 800029c:	2a00      	cmp	r2, #0
 800029e:	d03c      	beq.n	800031a <memset+0x86>
 80002a0:	b2ca      	uxtb	r2, r1
 80002a2:	4603      	mov	r3, r0
 80002a4:	e002      	b.n	80002ac <memset+0x18>
 80002a6:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 80002aa:	d336      	bcc.n	800031a <memset+0x86>
 80002ac:	f803 2b01 	strb.w	r2, [r3], #1
 80002b0:	079d      	lsls	r5, r3, #30
 80002b2:	d1f8      	bne.n	80002a6 <memset+0x12>
 80002b4:	2c03      	cmp	r4, #3
 80002b6:	d929      	bls.n	800030c <memset+0x78>
 80002b8:	b2cd      	uxtb	r5, r1
 80002ba:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80002be:	2c0f      	cmp	r4, #15
 80002c0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80002c4:	d933      	bls.n	800032e <memset+0x9a>
 80002c6:	f1a4 0610 	sub.w	r6, r4, #16
 80002ca:	0936      	lsrs	r6, r6, #4
 80002cc:	f103 0720 	add.w	r7, r3, #32
 80002d0:	eb07 1706 	add.w	r7, r7, r6, lsl #4
 80002d4:	f103 0210 	add.w	r2, r3, #16
 80002d8:	e942 5504 	strd	r5, r5, [r2, #-16]
 80002dc:	e942 5502 	strd	r5, r5, [r2, #-8]
 80002e0:	3210      	adds	r2, #16
 80002e2:	42ba      	cmp	r2, r7
 80002e4:	d1f8      	bne.n	80002d8 <memset+0x44>
 80002e6:	1c72      	adds	r2, r6, #1
 80002e8:	f014 0f0c 	tst.w	r4, #12
 80002ec:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80002f0:	f004 060f 	and.w	r6, r4, #15
 80002f4:	d013      	beq.n	800031e <memset+0x8a>
 80002f6:	1f33      	subs	r3, r6, #4
 80002f8:	f023 0303 	bic.w	r3, r3, #3
 80002fc:	3304      	adds	r3, #4
 80002fe:	4413      	add	r3, r2
 8000300:	f842 5b04 	str.w	r5, [r2], #4
 8000304:	4293      	cmp	r3, r2
 8000306:	d1fb      	bne.n	8000300 <memset+0x6c>
 8000308:	f006 0403 	and.w	r4, r6, #3
 800030c:	b12c      	cbz	r4, 800031a <memset+0x86>
 800030e:	b2c9      	uxtb	r1, r1
 8000310:	441c      	add	r4, r3
 8000312:	f803 1b01 	strb.w	r1, [r3], #1
 8000316:	429c      	cmp	r4, r3
 8000318:	d1fb      	bne.n	8000312 <memset+0x7e>
 800031a:	bcf0      	pop	{r4, r5, r6, r7}
 800031c:	4770      	bx	lr
 800031e:	4634      	mov	r4, r6
 8000320:	4613      	mov	r3, r2
 8000322:	2c00      	cmp	r4, #0
 8000324:	d1f3      	bne.n	800030e <memset+0x7a>
 8000326:	e7f8      	b.n	800031a <memset+0x86>
 8000328:	4614      	mov	r4, r2
 800032a:	4603      	mov	r3, r0
 800032c:	e7c2      	b.n	80002b4 <memset+0x20>
 800032e:	461a      	mov	r2, r3
 8000330:	4626      	mov	r6, r4
 8000332:	e7e0      	b.n	80002f6 <memset+0x62>

08000334 <__aeabi_uldivmod>:
 8000334:	b953      	cbnz	r3, 800034c <__aeabi_uldivmod+0x18>
 8000336:	b94a      	cbnz	r2, 800034c <__aeabi_uldivmod+0x18>
 8000338:	2900      	cmp	r1, #0
 800033a:	bf08      	it	eq
 800033c:	2800      	cmpeq	r0, #0
 800033e:	bf1c      	itt	ne
 8000340:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000344:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000348:	f000 b96e 	b.w	8000628 <__aeabi_idiv0>
 800034c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000350:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000354:	f000 f806 	bl	8000364 <__udivmoddi4>
 8000358:	f8dd e004 	ldr.w	lr, [sp, #4]
 800035c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000360:	b004      	add	sp, #16
 8000362:	4770      	bx	lr

08000364 <__udivmoddi4>:
 8000364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000368:	9d08      	ldr	r5, [sp, #32]
 800036a:	4604      	mov	r4, r0
 800036c:	468c      	mov	ip, r1
 800036e:	2b00      	cmp	r3, #0
 8000370:	f040 8083 	bne.w	800047a <__udivmoddi4+0x116>
 8000374:	428a      	cmp	r2, r1
 8000376:	4617      	mov	r7, r2
 8000378:	d947      	bls.n	800040a <__udivmoddi4+0xa6>
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	b142      	cbz	r2, 8000392 <__udivmoddi4+0x2e>
 8000380:	f1c2 0020 	rsb	r0, r2, #32
 8000384:	fa24 f000 	lsr.w	r0, r4, r0
 8000388:	4091      	lsls	r1, r2
 800038a:	4097      	lsls	r7, r2
 800038c:	ea40 0c01 	orr.w	ip, r0, r1
 8000390:	4094      	lsls	r4, r2
 8000392:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000396:	0c23      	lsrs	r3, r4, #16
 8000398:	fbbc f6f8 	udiv	r6, ip, r8
 800039c:	fa1f fe87 	uxth.w	lr, r7
 80003a0:	fb08 c116 	mls	r1, r8, r6, ip
 80003a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a8:	fb06 f10e 	mul.w	r1, r6, lr
 80003ac:	4299      	cmp	r1, r3
 80003ae:	d909      	bls.n	80003c4 <__udivmoddi4+0x60>
 80003b0:	18fb      	adds	r3, r7, r3
 80003b2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003b6:	f080 8119 	bcs.w	80005ec <__udivmoddi4+0x288>
 80003ba:	4299      	cmp	r1, r3
 80003bc:	f240 8116 	bls.w	80005ec <__udivmoddi4+0x288>
 80003c0:	3e02      	subs	r6, #2
 80003c2:	443b      	add	r3, r7
 80003c4:	1a5b      	subs	r3, r3, r1
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003cc:	fb08 3310 	mls	r3, r8, r0, r3
 80003d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x8c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	f080 8105 	bcs.w	80005f0 <__udivmoddi4+0x28c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8102 	bls.w	80005f0 <__udivmoddi4+0x28c>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f4:	eba4 040e 	sub.w	r4, r4, lr
 80003f8:	2600      	movs	r6, #0
 80003fa:	b11d      	cbz	r5, 8000404 <__udivmoddi4+0xa0>
 80003fc:	40d4      	lsrs	r4, r2
 80003fe:	2300      	movs	r3, #0
 8000400:	e9c5 4300 	strd	r4, r3, [r5]
 8000404:	4631      	mov	r1, r6
 8000406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040a:	b902      	cbnz	r2, 800040e <__udivmoddi4+0xaa>
 800040c:	deff      	udf	#255	; 0xff
 800040e:	fab2 f282 	clz	r2, r2
 8000412:	2a00      	cmp	r2, #0
 8000414:	d150      	bne.n	80004b8 <__udivmoddi4+0x154>
 8000416:	1bcb      	subs	r3, r1, r7
 8000418:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800041c:	fa1f f887 	uxth.w	r8, r7
 8000420:	2601      	movs	r6, #1
 8000422:	fbb3 fcfe 	udiv	ip, r3, lr
 8000426:	0c21      	lsrs	r1, r4, #16
 8000428:	fb0e 331c 	mls	r3, lr, ip, r3
 800042c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000430:	fb08 f30c 	mul.w	r3, r8, ip
 8000434:	428b      	cmp	r3, r1
 8000436:	d907      	bls.n	8000448 <__udivmoddi4+0xe4>
 8000438:	1879      	adds	r1, r7, r1
 800043a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0xe2>
 8000440:	428b      	cmp	r3, r1
 8000442:	f200 80e9 	bhi.w	8000618 <__udivmoddi4+0x2b4>
 8000446:	4684      	mov	ip, r0
 8000448:	1ac9      	subs	r1, r1, r3
 800044a:	b2a3      	uxth	r3, r4
 800044c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000450:	fb0e 1110 	mls	r1, lr, r0, r1
 8000454:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000458:	fb08 f800 	mul.w	r8, r8, r0
 800045c:	45a0      	cmp	r8, r4
 800045e:	d907      	bls.n	8000470 <__udivmoddi4+0x10c>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000466:	d202      	bcs.n	800046e <__udivmoddi4+0x10a>
 8000468:	45a0      	cmp	r8, r4
 800046a:	f200 80d9 	bhi.w	8000620 <__udivmoddi4+0x2bc>
 800046e:	4618      	mov	r0, r3
 8000470:	eba4 0408 	sub.w	r4, r4, r8
 8000474:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000478:	e7bf      	b.n	80003fa <__udivmoddi4+0x96>
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0x12e>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80b1 	beq.w	80005e6 <__udivmoddi4+0x282>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x1cc>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0x140>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80b8 	bhi.w	8000614 <__udivmoddi4+0x2b0>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0103 	sbc.w	r1, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	468c      	mov	ip, r1
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0a8      	beq.n	8000404 <__udivmoddi4+0xa0>
 80004b2:	e9c5 4c00 	strd	r4, ip, [r5]
 80004b6:	e7a5      	b.n	8000404 <__udivmoddi4+0xa0>
 80004b8:	f1c2 0320 	rsb	r3, r2, #32
 80004bc:	fa20 f603 	lsr.w	r6, r0, r3
 80004c0:	4097      	lsls	r7, r2
 80004c2:	fa01 f002 	lsl.w	r0, r1, r2
 80004c6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004ca:	40d9      	lsrs	r1, r3
 80004cc:	4330      	orrs	r0, r6
 80004ce:	0c03      	lsrs	r3, r0, #16
 80004d0:	fbb1 f6fe 	udiv	r6, r1, lr
 80004d4:	fa1f f887 	uxth.w	r8, r7
 80004d8:	fb0e 1116 	mls	r1, lr, r6, r1
 80004dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e0:	fb06 f108 	mul.w	r1, r6, r8
 80004e4:	4299      	cmp	r1, r3
 80004e6:	fa04 f402 	lsl.w	r4, r4, r2
 80004ea:	d909      	bls.n	8000500 <__udivmoddi4+0x19c>
 80004ec:	18fb      	adds	r3, r7, r3
 80004ee:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004f2:	f080 808d 	bcs.w	8000610 <__udivmoddi4+0x2ac>
 80004f6:	4299      	cmp	r1, r3
 80004f8:	f240 808a 	bls.w	8000610 <__udivmoddi4+0x2ac>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	443b      	add	r3, r7
 8000500:	1a5b      	subs	r3, r3, r1
 8000502:	b281      	uxth	r1, r0
 8000504:	fbb3 f0fe 	udiv	r0, r3, lr
 8000508:	fb0e 3310 	mls	r3, lr, r0, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb00 f308 	mul.w	r3, r0, r8
 8000514:	428b      	cmp	r3, r1
 8000516:	d907      	bls.n	8000528 <__udivmoddi4+0x1c4>
 8000518:	1879      	adds	r1, r7, r1
 800051a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800051e:	d273      	bcs.n	8000608 <__udivmoddi4+0x2a4>
 8000520:	428b      	cmp	r3, r1
 8000522:	d971      	bls.n	8000608 <__udivmoddi4+0x2a4>
 8000524:	3802      	subs	r0, #2
 8000526:	4439      	add	r1, r7
 8000528:	1acb      	subs	r3, r1, r3
 800052a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800052e:	e778      	b.n	8000422 <__udivmoddi4+0xbe>
 8000530:	f1c6 0c20 	rsb	ip, r6, #32
 8000534:	fa03 f406 	lsl.w	r4, r3, r6
 8000538:	fa22 f30c 	lsr.w	r3, r2, ip
 800053c:	431c      	orrs	r4, r3
 800053e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800054a:	fa21 f10c 	lsr.w	r1, r1, ip
 800054e:	431f      	orrs	r7, r3
 8000550:	0c3b      	lsrs	r3, r7, #16
 8000552:	fbb1 f9fe 	udiv	r9, r1, lr
 8000556:	fa1f f884 	uxth.w	r8, r4
 800055a:	fb0e 1119 	mls	r1, lr, r9, r1
 800055e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000562:	fb09 fa08 	mul.w	sl, r9, r8
 8000566:	458a      	cmp	sl, r1
 8000568:	fa02 f206 	lsl.w	r2, r2, r6
 800056c:	fa00 f306 	lsl.w	r3, r0, r6
 8000570:	d908      	bls.n	8000584 <__udivmoddi4+0x220>
 8000572:	1861      	adds	r1, r4, r1
 8000574:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000578:	d248      	bcs.n	800060c <__udivmoddi4+0x2a8>
 800057a:	458a      	cmp	sl, r1
 800057c:	d946      	bls.n	800060c <__udivmoddi4+0x2a8>
 800057e:	f1a9 0902 	sub.w	r9, r9, #2
 8000582:	4421      	add	r1, r4
 8000584:	eba1 010a 	sub.w	r1, r1, sl
 8000588:	b2bf      	uxth	r7, r7
 800058a:	fbb1 f0fe 	udiv	r0, r1, lr
 800058e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000592:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000596:	fb00 f808 	mul.w	r8, r0, r8
 800059a:	45b8      	cmp	r8, r7
 800059c:	d907      	bls.n	80005ae <__udivmoddi4+0x24a>
 800059e:	19e7      	adds	r7, r4, r7
 80005a0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80005a4:	d22e      	bcs.n	8000604 <__udivmoddi4+0x2a0>
 80005a6:	45b8      	cmp	r8, r7
 80005a8:	d92c      	bls.n	8000604 <__udivmoddi4+0x2a0>
 80005aa:	3802      	subs	r0, #2
 80005ac:	4427      	add	r7, r4
 80005ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005b2:	eba7 0708 	sub.w	r7, r7, r8
 80005b6:	fba0 8902 	umull	r8, r9, r0, r2
 80005ba:	454f      	cmp	r7, r9
 80005bc:	46c6      	mov	lr, r8
 80005be:	4649      	mov	r1, r9
 80005c0:	d31a      	bcc.n	80005f8 <__udivmoddi4+0x294>
 80005c2:	d017      	beq.n	80005f4 <__udivmoddi4+0x290>
 80005c4:	b15d      	cbz	r5, 80005de <__udivmoddi4+0x27a>
 80005c6:	ebb3 020e 	subs.w	r2, r3, lr
 80005ca:	eb67 0701 	sbc.w	r7, r7, r1
 80005ce:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005d2:	40f2      	lsrs	r2, r6
 80005d4:	ea4c 0202 	orr.w	r2, ip, r2
 80005d8:	40f7      	lsrs	r7, r6
 80005da:	e9c5 2700 	strd	r2, r7, [r5]
 80005de:	2600      	movs	r6, #0
 80005e0:	4631      	mov	r1, r6
 80005e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e6:	462e      	mov	r6, r5
 80005e8:	4628      	mov	r0, r5
 80005ea:	e70b      	b.n	8000404 <__udivmoddi4+0xa0>
 80005ec:	4606      	mov	r6, r0
 80005ee:	e6e9      	b.n	80003c4 <__udivmoddi4+0x60>
 80005f0:	4618      	mov	r0, r3
 80005f2:	e6fd      	b.n	80003f0 <__udivmoddi4+0x8c>
 80005f4:	4543      	cmp	r3, r8
 80005f6:	d2e5      	bcs.n	80005c4 <__udivmoddi4+0x260>
 80005f8:	ebb8 0e02 	subs.w	lr, r8, r2
 80005fc:	eb69 0104 	sbc.w	r1, r9, r4
 8000600:	3801      	subs	r0, #1
 8000602:	e7df      	b.n	80005c4 <__udivmoddi4+0x260>
 8000604:	4608      	mov	r0, r1
 8000606:	e7d2      	b.n	80005ae <__udivmoddi4+0x24a>
 8000608:	4660      	mov	r0, ip
 800060a:	e78d      	b.n	8000528 <__udivmoddi4+0x1c4>
 800060c:	4681      	mov	r9, r0
 800060e:	e7b9      	b.n	8000584 <__udivmoddi4+0x220>
 8000610:	4666      	mov	r6, ip
 8000612:	e775      	b.n	8000500 <__udivmoddi4+0x19c>
 8000614:	4630      	mov	r0, r6
 8000616:	e74a      	b.n	80004ae <__udivmoddi4+0x14a>
 8000618:	f1ac 0c02 	sub.w	ip, ip, #2
 800061c:	4439      	add	r1, r7
 800061e:	e713      	b.n	8000448 <__udivmoddi4+0xe4>
 8000620:	3802      	subs	r0, #2
 8000622:	443c      	add	r4, r7
 8000624:	e724      	b.n	8000470 <__udivmoddi4+0x10c>
 8000626:	bf00      	nop

08000628 <__aeabi_idiv0>:
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop

0800062c <HAL_UART_RxCpltCallback>:

uint8_t prev_Rx_char[1]={'a'};  


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
   if(Rx_char[0] >= 65 && Rx_char[0] <= 90 && prev_Rx_char[0] != 10 && oRecvBuff.iCnt != 0){
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <HAL_UART_RxCpltCallback+0x74>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b40      	cmp	r3, #64	; 0x40
 800063a:	d916      	bls.n	800066a <HAL_UART_RxCpltCallback+0x3e>
 800063c:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <HAL_UART_RxCpltCallback+0x74>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b5a      	cmp	r3, #90	; 0x5a
 8000642:	d812      	bhi.n	800066a <HAL_UART_RxCpltCallback+0x3e>
 8000644:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <HAL_UART_RxCpltCallback+0x78>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b0a      	cmp	r3, #10
 800064a:	d00e      	beq.n	800066a <HAL_UART_RxCpltCallback+0x3e>
 800064c:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <HAL_UART_RxCpltCallback+0x7c>)
 800064e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000652:	2b00      	cmp	r3, #0
 8000654:	d009      	beq.n	800066a <HAL_UART_RxCpltCallback+0x3e>

      oRecvBuff.chArrRecvBuff[oRecvBuff.iCnt] = Rx_char[0] + 32;
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <HAL_UART_RxCpltCallback+0x74>)
 8000658:	781a      	ldrb	r2, [r3, #0]
 800065a:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <HAL_UART_RxCpltCallback+0x7c>)
 800065c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000660:	3220      	adds	r2, #32
 8000662:	b2d1      	uxtb	r1, r2
 8000664:	4a10      	ldr	r2, [pc, #64]	; (80006a8 <HAL_UART_RxCpltCallback+0x7c>)
 8000666:	54d1      	strb	r1, [r2, r3]
 8000668:	e006      	b.n	8000678 <HAL_UART_RxCpltCallback+0x4c>
   
   } else {
   
      oRecvBuff.chArrRecvBuff[oRecvBuff.iCnt] = Rx_char[0];
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <HAL_UART_RxCpltCallback+0x7c>)
 800066c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000670:	4a0b      	ldr	r2, [pc, #44]	; (80006a0 <HAL_UART_RxCpltCallback+0x74>)
 8000672:	7811      	ldrb	r1, [r2, #0]
 8000674:	4a0c      	ldr	r2, [pc, #48]	; (80006a8 <HAL_UART_RxCpltCallback+0x7c>)
 8000676:	54d1      	strb	r1, [r2, r3]
   
   }

   prev_Rx_char[0] = Rx_char[0];
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <HAL_UART_RxCpltCallback+0x74>)
 800067a:	781a      	ldrb	r2, [r3, #0]
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <HAL_UART_RxCpltCallback+0x78>)
 800067e:	701a      	strb	r2, [r3, #0]
   oRecvBuff.iCnt++;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <HAL_UART_RxCpltCallback+0x7c>)
 8000682:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000686:	3301      	adds	r3, #1
 8000688:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <HAL_UART_RxCpltCallback+0x7c>)
 800068a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

   HAL_UART_Receive_IT(&huart2, Rx_char, 1);
 800068e:	2201      	movs	r2, #1
 8000690:	4903      	ldr	r1, [pc, #12]	; (80006a0 <HAL_UART_RxCpltCallback+0x74>)
 8000692:	4806      	ldr	r0, [pc, #24]	; (80006ac <HAL_UART_RxCpltCallback+0x80>)
 8000694:	f001 fc89 	bl	8001faa <HAL_UART_Receive_IT>

}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000038 	.word	0x20000038
 80006a4:	2000000c 	.word	0x2000000c
 80006a8:	2000003c 	.word	0x2000003c
 80006ac:	20000140 	.word	0x20000140

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006b6:	f000 fa6b 	bl	8000b90 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006ba:	f000 f875 	bl	80007a8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006be:	f000 f90b 	bl	80008d8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80006c2:	f000 f8df 	bl	8000884 <MX_USART2_UART_Init>
     HAL_UART_Receive_IT(&huart2, Rx_char, 1); 
 80006c6:	2201      	movs	r2, #1
 80006c8:	4933      	ldr	r1, [pc, #204]	; (8000798 <main+0xe8>)
 80006ca:	4834      	ldr	r0, [pc, #208]	; (800079c <main+0xec>)
 80006cc:	f001 fc6d 	bl	8001faa <HAL_UART_Receive_IT>
   /* USER CODE BEGIN 2 */

	HAL_UART_Transmit(&huart2, hello, sizeof(hello),10);
 80006d0:	230a      	movs	r3, #10
 80006d2:	220b      	movs	r2, #11
 80006d4:	4932      	ldr	r1, [pc, #200]	; (80007a0 <main+0xf0>)
 80006d6:	4831      	ldr	r0, [pc, #196]	; (800079c <main+0xec>)
 80006d8:	f001 fbd5 	bl	8001e86 <HAL_UART_Transmit>
	
	oRecvBuff.chArrRecvBuff[0] = 0;
 80006dc:	4b31      	ldr	r3, [pc, #196]	; (80007a4 <main+0xf4>)
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
	oRecvBuff.iCnt = 0; 
 80006e2:	4b30      	ldr	r3, [pc, #192]	; (80007a4 <main+0xf4>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100


	while (1)
	{
      
          if((oRecvBuff.chArrRecvBuff[oRecvBuff.iCnt - 1]==46) || (oRecvBuff.chArrRecvBuff[oRecvBuff.iCnt]==10)){
 80006ea:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <main+0xf4>)
 80006ec:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80006f0:	3b01      	subs	r3, #1
 80006f2:	4a2c      	ldr	r2, [pc, #176]	; (80007a4 <main+0xf4>)
 80006f4:	5cd3      	ldrb	r3, [r2, r3]
 80006f6:	2b2e      	cmp	r3, #46	; 0x2e
 80006f8:	d006      	beq.n	8000708 <main+0x58>
 80006fa:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <main+0xf4>)
 80006fc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000700:	4a28      	ldr	r2, [pc, #160]	; (80007a4 <main+0xf4>)
 8000702:	5cd3      	ldrb	r3, [r2, r3]
 8000704:	2b0a      	cmp	r3, #10
 8000706:	d120      	bne.n	800074a <main+0x9a>
               for (int i = 0; i <= oRecvBuff.iCnt; i++){
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	e00d      	b.n	800072a <main+0x7a>

                    *Sx_char = (char) oRecvBuff.chArrRecvBuff[i];
 800070e:	4a25      	ldr	r2, [pc, #148]	; (80007a4 <main+0xf4>)
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	4413      	add	r3, r2
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	713b      	strb	r3, [r7, #4]

                    HAL_UART_Transmit(&huart2, (uint8_t*) Sx_char, 1,10);
 8000718:	1d39      	adds	r1, r7, #4
 800071a:	230a      	movs	r3, #10
 800071c:	2201      	movs	r2, #1
 800071e:	481f      	ldr	r0, [pc, #124]	; (800079c <main+0xec>)
 8000720:	f001 fbb1 	bl	8001e86 <HAL_UART_Transmit>
               for (int i = 0; i <= oRecvBuff.iCnt; i++){
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	3301      	adds	r3, #1
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <main+0xf4>)
 800072c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000730:	68fa      	ldr	r2, [r7, #12]
 8000732:	429a      	cmp	r2, r3
 8000734:	ddeb      	ble.n	800070e <main+0x5e>


               }
               //HAL_UART_Transmit_IT(&huart2, oRecvBuff.chArrRecvBuff , oRecvBuff.iCnt);
               memset(oRecvBuff.chArrRecvBuff, 0, 255);
 8000736:	22ff      	movs	r2, #255	; 0xff
 8000738:	2100      	movs	r1, #0
 800073a:	481a      	ldr	r0, [pc, #104]	; (80007a4 <main+0xf4>)
 800073c:	f7ff fdaa 	bl	8000294 <memset>
               oRecvBuff.iCnt = 0 ;
 8000740:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <main+0xf4>)
 8000742:	2200      	movs	r2, #0
 8000744:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8000748:	e024      	b.n	8000794 <main+0xe4>
          } else if(oRecvBuff.iCnt == 255){
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <main+0xf4>)
 800074c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000750:	2bff      	cmp	r3, #255	; 0xff
 8000752:	d1ca      	bne.n	80006ea <main+0x3a>
               for (int i = 0; i <= oRecvBuff.iCnt; i++){
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	e00d      	b.n	8000776 <main+0xc6>

                    *Sx_char = (char) oRecvBuff.chArrRecvBuff[i];
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <main+0xf4>)
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	4413      	add	r3, r2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	713b      	strb	r3, [r7, #4]

                    HAL_UART_Transmit(&huart2, (uint8_t*) Sx_char, 1,10);
 8000764:	1d39      	adds	r1, r7, #4
 8000766:	230a      	movs	r3, #10
 8000768:	2201      	movs	r2, #1
 800076a:	480c      	ldr	r0, [pc, #48]	; (800079c <main+0xec>)
 800076c:	f001 fb8b 	bl	8001e86 <HAL_UART_Transmit>
               for (int i = 0; i <= oRecvBuff.iCnt; i++){
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	3301      	adds	r3, #1
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <main+0xf4>)
 8000778:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800077c:	68ba      	ldr	r2, [r7, #8]
 800077e:	429a      	cmp	r2, r3
 8000780:	ddeb      	ble.n	800075a <main+0xaa>


               }
               //HAL_UART_Transmit_IT(&huart2, oRecvBuff.chArrRecvBuff , oRecvBuff.iCnt);
               memset(oRecvBuff.chArrRecvBuff, 0, 255);
 8000782:	22ff      	movs	r2, #255	; 0xff
 8000784:	2100      	movs	r1, #0
 8000786:	4807      	ldr	r0, [pc, #28]	; (80007a4 <main+0xf4>)
 8000788:	f7ff fd84 	bl	8000294 <memset>
               oRecvBuff.iCnt = 0 ;
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <main+0xf4>)
 800078e:	2200      	movs	r2, #0
 8000790:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
          if((oRecvBuff.chArrRecvBuff[oRecvBuff.iCnt - 1]==46) || (oRecvBuff.chArrRecvBuff[oRecvBuff.iCnt]==10)){
 8000794:	e7a9      	b.n	80006ea <main+0x3a>
 8000796:	bf00      	nop
 8000798:	20000038 	.word	0x20000038
 800079c:	20000140 	.word	0x20000140
 80007a0:	20000000 	.word	0x20000000
 80007a4:	2000003c 	.word	0x2000003c

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b094      	sub	sp, #80	; 0x50
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	2234      	movs	r2, #52	; 0x34
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fd6c 	bl	8000294 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	4b2a      	ldr	r3, [pc, #168]	; (800087c <SystemClock_Config+0xd4>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d4:	4a29      	ldr	r2, [pc, #164]	; (800087c <SystemClock_Config+0xd4>)
 80007d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007da:	6413      	str	r3, [r2, #64]	; 0x40
 80007dc:	4b27      	ldr	r3, [pc, #156]	; (800087c <SystemClock_Config+0xd4>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007e8:	2300      	movs	r3, #0
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	4b24      	ldr	r3, [pc, #144]	; (8000880 <SystemClock_Config+0xd8>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007f4:	4a22      	ldr	r2, [pc, #136]	; (8000880 <SystemClock_Config+0xd8>)
 80007f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	4b20      	ldr	r3, [pc, #128]	; (8000880 <SystemClock_Config+0xd8>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000808:	2302      	movs	r3, #2
 800080a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080c:	2301      	movs	r3, #1
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000810:	2310      	movs	r3, #16
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000814:	2302      	movs	r3, #2
 8000816:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000818:	2300      	movs	r3, #0
 800081a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800081c:	2310      	movs	r3, #16
 800081e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000820:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000824:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000826:	2304      	movs	r3, #4
 8000828:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800082a:	2302      	movs	r3, #2
 800082c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800082e:	2302      	movs	r3, #2
 8000830:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4618      	mov	r0, r3
 8000838:	f001 f83a 	bl	80018b0 <HAL_RCC_OscConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000842:	f000 f8b7 	bl	80009b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000846:	230f      	movs	r3, #15
 8000848:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084a:	2302      	movs	r3, #2
 800084c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000856:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800085c:	f107 0308 	add.w	r3, r7, #8
 8000860:	2102      	movs	r1, #2
 8000862:	4618      	mov	r0, r3
 8000864:	f000 fd58 	bl	8001318 <HAL_RCC_ClockConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800086e:	f000 f8a1 	bl	80009b4 <Error_Handler>
  }
}
 8000872:	bf00      	nop
 8000874:	3750      	adds	r7, #80	; 0x50
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800
 8000880:	40007000 	.word	0x40007000

08000884 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 800088a:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <MX_USART2_UART_Init+0x50>)
 800088c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 80008bc:	f001 fa96 	bl	8001dec <HAL_UART_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008c6:	f000 f875 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000140 	.word	0x20000140
 80008d4:	40004400 	.word	0x40004400

080008d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	4b2d      	ldr	r3, [pc, #180]	; (80009a8 <MX_GPIO_Init+0xd0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a2c      	ldr	r2, [pc, #176]	; (80009a8 <MX_GPIO_Init+0xd0>)
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b2a      	ldr	r3, [pc, #168]	; (80009a8 <MX_GPIO_Init+0xd0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0304 	and.w	r3, r3, #4
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4b26      	ldr	r3, [pc, #152]	; (80009a8 <MX_GPIO_Init+0xd0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a25      	ldr	r2, [pc, #148]	; (80009a8 <MX_GPIO_Init+0xd0>)
 8000914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b23      	ldr	r3, [pc, #140]	; (80009a8 <MX_GPIO_Init+0xd0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <MX_GPIO_Init+0xd0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a1e      	ldr	r2, [pc, #120]	; (80009a8 <MX_GPIO_Init+0xd0>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <MX_GPIO_Init+0xd0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <MX_GPIO_Init+0xd0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a17      	ldr	r2, [pc, #92]	; (80009a8 <MX_GPIO_Init+0xd0>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <MX_GPIO_Init+0xd0>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	2120      	movs	r1, #32
 8000962:	4812      	ldr	r0, [pc, #72]	; (80009ac <MX_GPIO_Init+0xd4>)
 8000964:	f000 fcbe 	bl	80012e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800096c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800096e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000974:	2301      	movs	r3, #1
 8000976:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4619      	mov	r1, r3
 800097e:	480c      	ldr	r0, [pc, #48]	; (80009b0 <MX_GPIO_Init+0xd8>)
 8000980:	f000 fb1c 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000984:	2320      	movs	r3, #32
 8000986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000988:	2301      	movs	r3, #1
 800098a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4619      	mov	r1, r3
 800099a:	4804      	ldr	r0, [pc, #16]	; (80009ac <MX_GPIO_Init+0xd4>)
 800099c:	f000 fb0e 	bl	8000fbc <HAL_GPIO_Init>

}
 80009a0:	bf00      	nop
 80009a2:	3728      	adds	r7, #40	; 0x28
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020000 	.word	0x40020000
 80009b0:	40020800 	.word	0x40020800

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009bc:	e7fe      	b.n	80009bc <Error_Handler+0x8>
	...

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <HAL_MspInit+0x4c>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <HAL_MspInit+0x4c>)
 80009d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d4:	6453      	str	r3, [r2, #68]	; 0x44
 80009d6:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <HAL_MspInit+0x4c>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <HAL_MspInit+0x4c>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f0:	6413      	str	r3, [r2, #64]	; 0x40
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_MspInit+0x4c>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009fe:	2007      	movs	r0, #7
 8000a00:	f000 fa08 	bl	8000e14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40023800 	.word	0x40023800

08000a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a1d      	ldr	r2, [pc, #116]	; (8000aa4 <HAL_UART_MspInit+0x94>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d133      	bne.n	8000a9a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <HAL_UART_MspInit+0x98>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	4a1b      	ldr	r2, [pc, #108]	; (8000aa8 <HAL_UART_MspInit+0x98>)
 8000a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a40:	6413      	str	r3, [r2, #64]	; 0x40
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <HAL_UART_MspInit+0x98>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <HAL_UART_MspInit+0x98>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a14      	ldr	r2, [pc, #80]	; (8000aa8 <HAL_UART_MspInit+0x98>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_UART_MspInit+0x98>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a6a:	230c      	movs	r3, #12
 8000a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a76:	2303      	movs	r3, #3
 8000a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a7a:	2307      	movs	r3, #7
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4809      	ldr	r0, [pc, #36]	; (8000aac <HAL_UART_MspInit+0x9c>)
 8000a86:	f000 fa99 	bl	8000fbc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2026      	movs	r0, #38	; 0x26
 8000a90:	f000 f9cb 	bl	8000e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a94:	2026      	movs	r0, #38	; 0x26
 8000a96:	f000 f9e4 	bl	8000e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a9a:	bf00      	nop
 8000a9c:	3728      	adds	r7, #40	; 0x28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40004400 	.word	0x40004400
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020000 	.word	0x40020000

08000ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <NMI_Handler+0x4>

08000ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <HardFault_Handler+0x4>

08000abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <MemManage_Handler+0x4>

08000ac2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <BusFault_Handler+0x4>

08000ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <UsageFault_Handler+0x4>

08000ace <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afc:	f000 f89a 	bl	8000c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <USART2_IRQHandler+0x10>)
 8000b0a:	f001 fa7f 	bl	800200c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000140 	.word	0x20000140

08000b18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <SystemInit+0x20>)
 8000b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b22:	4a05      	ldr	r2, [pc, #20]	; (8000b38 <SystemInit+0x20>)
 8000b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b40:	480d      	ldr	r0, [pc, #52]	; (8000b78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b42:	490e      	ldr	r1, [pc, #56]	; (8000b7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b44:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b48:	e002      	b.n	8000b50 <LoopCopyDataInit>

08000b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4e:	3304      	adds	r3, #4

08000b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b54:	d3f9      	bcc.n	8000b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b56:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b58:	4c0b      	ldr	r4, [pc, #44]	; (8000b88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b5c:	e001      	b.n	8000b62 <LoopFillZerobss>

08000b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b60:	3204      	adds	r2, #4

08000b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b64:	d3fb      	bcc.n	8000b5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b66:	f7ff ffd7 	bl	8000b18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b6a:	f7ff fb6f 	bl	800024c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6e:	f7ff fd9f 	bl	80006b0 <main>
  bx  lr    
 8000b72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b7c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000b80:	08002dbc 	.word	0x08002dbc
  ldr r2, =_sbss
 8000b84:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000b88:	20000288 	.word	0x20000288

08000b8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b8c:	e7fe      	b.n	8000b8c <ADC_IRQHandler>
	...

08000b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b94:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <HAL_Init+0x40>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <HAL_Init+0x40>)
 8000b9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <HAL_Init+0x40>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <HAL_Init+0x40>)
 8000ba6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000baa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_Init+0x40>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <HAL_Init+0x40>)
 8000bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 f92b 	bl	8000e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f000 f808 	bl	8000bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc4:	f7ff fefc 	bl	80009c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40023c00 	.word	0x40023c00

08000bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_InitTick+0x54>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <HAL_InitTick+0x58>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f943 	bl	8000e7e <HAL_SYSTICK_Config>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00e      	b.n	8000c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d80a      	bhi.n	8000c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	f000 f90b 	bl	8000e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c14:	4a06      	ldr	r2, [pc, #24]	; (8000c30 <HAL_InitTick+0x5c>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e000      	b.n	8000c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000010 	.word	0x20000010
 8000c2c:	20000018 	.word	0x20000018
 8000c30:	20000014 	.word	0x20000014

08000c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_IncTick+0x20>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_IncTick+0x24>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <HAL_IncTick+0x24>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000018 	.word	0x20000018
 8000c58:	20000284 	.word	0x20000284

08000c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <HAL_GetTick+0x14>)
 8000c62:	681b      	ldr	r3, [r3, #0]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000284 	.word	0x20000284

08000c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c90:	4013      	ands	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca6:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	60d3      	str	r3, [r2, #12]
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	f003 0307 	and.w	r3, r3, #7
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db0b      	blt.n	8000d02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	f003 021f 	and.w	r2, r3, #31
 8000cf0:	4907      	ldr	r1, [pc, #28]	; (8000d10 <__NVIC_EnableIRQ+0x38>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	095b      	lsrs	r3, r3, #5
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000e100 	.word	0xe000e100

08000d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	6039      	str	r1, [r7, #0]
 8000d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	db0a      	blt.n	8000d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	490c      	ldr	r1, [pc, #48]	; (8000d60 <__NVIC_SetPriority+0x4c>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	0112      	lsls	r2, r2, #4
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	440b      	add	r3, r1
 8000d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d3c:	e00a      	b.n	8000d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4908      	ldr	r1, [pc, #32]	; (8000d64 <__NVIC_SetPriority+0x50>)
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	3b04      	subs	r3, #4
 8000d4c:	0112      	lsls	r2, r2, #4
 8000d4e:	b2d2      	uxtb	r2, r2
 8000d50:	440b      	add	r3, r1
 8000d52:	761a      	strb	r2, [r3, #24]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000e100 	.word	0xe000e100
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b089      	sub	sp, #36	; 0x24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f1c3 0307 	rsb	r3, r3, #7
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	bf28      	it	cs
 8000d86:	2304      	movcs	r3, #4
 8000d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	2b06      	cmp	r3, #6
 8000d90:	d902      	bls.n	8000d98 <NVIC_EncodePriority+0x30>
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3b03      	subs	r3, #3
 8000d96:	e000      	b.n	8000d9a <NVIC_EncodePriority+0x32>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43da      	mvns	r2, r3
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	401a      	ands	r2, r3
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	43d9      	mvns	r1, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	4313      	orrs	r3, r2
         );
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3724      	adds	r7, #36	; 0x24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
	...

08000dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de0:	d301      	bcc.n	8000de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de2:	2301      	movs	r3, #1
 8000de4:	e00f      	b.n	8000e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de6:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <SysTick_Config+0x40>)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dee:	210f      	movs	r1, #15
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000df4:	f7ff ff8e 	bl	8000d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <SysTick_Config+0x40>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfe:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <SysTick_Config+0x40>)
 8000e00:	2207      	movs	r2, #7
 8000e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	e000e010 	.word	0xe000e010

08000e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff ff29 	bl	8000c74 <__NVIC_SetPriorityGrouping>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b086      	sub	sp, #24
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
 8000e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e3c:	f7ff ff3e 	bl	8000cbc <__NVIC_GetPriorityGrouping>
 8000e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	68b9      	ldr	r1, [r7, #8]
 8000e46:	6978      	ldr	r0, [r7, #20]
 8000e48:	f7ff ff8e 	bl	8000d68 <NVIC_EncodePriority>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e52:	4611      	mov	r1, r2
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff5d 	bl	8000d14 <__NVIC_SetPriority>
}
 8000e5a:	bf00      	nop
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ff31 	bl	8000cd8 <__NVIC_EnableIRQ>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ffa2 	bl	8000dd0 <SysTick_Config>
 8000e8c:	4603      	mov	r3, r0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b084      	sub	sp, #16
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ea4:	f7ff feda 	bl	8000c5c <HAL_GetTick>
 8000ea8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d008      	beq.n	8000ec8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2280      	movs	r2, #128	; 0x80
 8000eba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e052      	b.n	8000f6e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f022 0216 	bic.w	r2, r2, #22
 8000ed6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	695a      	ldr	r2, [r3, #20]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ee6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d103      	bne.n	8000ef8 <HAL_DMA_Abort+0x62>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d007      	beq.n	8000f08 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f022 0208 	bic.w	r2, r2, #8
 8000f06:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f022 0201 	bic.w	r2, r2, #1
 8000f16:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f18:	e013      	b.n	8000f42 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f1a:	f7ff fe9f 	bl	8000c5c <HAL_GetTick>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	2b05      	cmp	r3, #5
 8000f26:	d90c      	bls.n	8000f42 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2220      	movs	r2, #32
 8000f2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2203      	movs	r2, #3
 8000f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e015      	b.n	8000f6e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1e4      	bne.n	8000f1a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f54:	223f      	movs	r2, #63	; 0x3f
 8000f56:	409a      	lsls	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d004      	beq.n	8000f94 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2280      	movs	r2, #128	; 0x80
 8000f8e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e00c      	b.n	8000fae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2205      	movs	r2, #5
 8000f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f022 0201 	bic.w	r2, r2, #1
 8000faa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	; 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
 8000fd6:	e165      	b.n	80012a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fd8:	2201      	movs	r2, #1
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	697a      	ldr	r2, [r7, #20]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	f040 8154 	bne.w	800129e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d005      	beq.n	800100e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800100a:	2b02      	cmp	r3, #2
 800100c:	d130      	bne.n	8001070 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	2203      	movs	r2, #3
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	68da      	ldr	r2, [r3, #12]
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001044:	2201      	movs	r2, #1
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	091b      	lsrs	r3, r3, #4
 800105a:	f003 0201 	and.w	r2, r3, #1
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	2b03      	cmp	r3, #3
 800107a:	d017      	beq.n	80010ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	2203      	movs	r2, #3
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	689a      	ldr	r2, [r3, #8]
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d123      	bne.n	8001100 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	08da      	lsrs	r2, r3, #3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3208      	adds	r2, #8
 80010c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	f003 0307 	and.w	r3, r3, #7
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	220f      	movs	r2, #15
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	691a      	ldr	r2, [r3, #16]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	08da      	lsrs	r2, r3, #3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3208      	adds	r2, #8
 80010fa:	69b9      	ldr	r1, [r7, #24]
 80010fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0203 	and.w	r2, r3, #3
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800113c:	2b00      	cmp	r3, #0
 800113e:	f000 80ae 	beq.w	800129e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b5d      	ldr	r3, [pc, #372]	; (80012bc <HAL_GPIO_Init+0x300>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	4a5c      	ldr	r2, [pc, #368]	; (80012bc <HAL_GPIO_Init+0x300>)
 800114c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001150:	6453      	str	r3, [r2, #68]	; 0x44
 8001152:	4b5a      	ldr	r3, [pc, #360]	; (80012bc <HAL_GPIO_Init+0x300>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800115e:	4a58      	ldr	r2, [pc, #352]	; (80012c0 <HAL_GPIO_Init+0x304>)
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	089b      	lsrs	r3, r3, #2
 8001164:	3302      	adds	r3, #2
 8001166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	220f      	movs	r2, #15
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a4f      	ldr	r2, [pc, #316]	; (80012c4 <HAL_GPIO_Init+0x308>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d025      	beq.n	80011d6 <HAL_GPIO_Init+0x21a>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4e      	ldr	r2, [pc, #312]	; (80012c8 <HAL_GPIO_Init+0x30c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d01f      	beq.n	80011d2 <HAL_GPIO_Init+0x216>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4d      	ldr	r2, [pc, #308]	; (80012cc <HAL_GPIO_Init+0x310>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d019      	beq.n	80011ce <HAL_GPIO_Init+0x212>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4c      	ldr	r2, [pc, #304]	; (80012d0 <HAL_GPIO_Init+0x314>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d013      	beq.n	80011ca <HAL_GPIO_Init+0x20e>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4b      	ldr	r2, [pc, #300]	; (80012d4 <HAL_GPIO_Init+0x318>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d00d      	beq.n	80011c6 <HAL_GPIO_Init+0x20a>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4a      	ldr	r2, [pc, #296]	; (80012d8 <HAL_GPIO_Init+0x31c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d007      	beq.n	80011c2 <HAL_GPIO_Init+0x206>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a49      	ldr	r2, [pc, #292]	; (80012dc <HAL_GPIO_Init+0x320>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d101      	bne.n	80011be <HAL_GPIO_Init+0x202>
 80011ba:	2306      	movs	r3, #6
 80011bc:	e00c      	b.n	80011d8 <HAL_GPIO_Init+0x21c>
 80011be:	2307      	movs	r3, #7
 80011c0:	e00a      	b.n	80011d8 <HAL_GPIO_Init+0x21c>
 80011c2:	2305      	movs	r3, #5
 80011c4:	e008      	b.n	80011d8 <HAL_GPIO_Init+0x21c>
 80011c6:	2304      	movs	r3, #4
 80011c8:	e006      	b.n	80011d8 <HAL_GPIO_Init+0x21c>
 80011ca:	2303      	movs	r3, #3
 80011cc:	e004      	b.n	80011d8 <HAL_GPIO_Init+0x21c>
 80011ce:	2302      	movs	r3, #2
 80011d0:	e002      	b.n	80011d8 <HAL_GPIO_Init+0x21c>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e000      	b.n	80011d8 <HAL_GPIO_Init+0x21c>
 80011d6:	2300      	movs	r3, #0
 80011d8:	69fa      	ldr	r2, [r7, #28]
 80011da:	f002 0203 	and.w	r2, r2, #3
 80011de:	0092      	lsls	r2, r2, #2
 80011e0:	4093      	lsls	r3, r2
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e8:	4935      	ldr	r1, [pc, #212]	; (80012c0 <HAL_GPIO_Init+0x304>)
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	089b      	lsrs	r3, r3, #2
 80011ee:	3302      	adds	r3, #2
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f6:	4b3a      	ldr	r3, [pc, #232]	; (80012e0 <HAL_GPIO_Init+0x324>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800121a:	4a31      	ldr	r2, [pc, #196]	; (80012e0 <HAL_GPIO_Init+0x324>)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001220:	4b2f      	ldr	r3, [pc, #188]	; (80012e0 <HAL_GPIO_Init+0x324>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001244:	4a26      	ldr	r2, [pc, #152]	; (80012e0 <HAL_GPIO_Init+0x324>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124a:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <HAL_GPIO_Init+0x324>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800126e:	4a1c      	ldr	r2, [pc, #112]	; (80012e0 <HAL_GPIO_Init+0x324>)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001274:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <HAL_GPIO_Init+0x324>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001298:	4a11      	ldr	r2, [pc, #68]	; (80012e0 <HAL_GPIO_Init+0x324>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3301      	adds	r3, #1
 80012a2:	61fb      	str	r3, [r7, #28]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	2b0f      	cmp	r3, #15
 80012a8:	f67f ae96 	bls.w	8000fd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3724      	adds	r7, #36	; 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40013800 	.word	0x40013800
 80012c4:	40020000 	.word	0x40020000
 80012c8:	40020400 	.word	0x40020400
 80012cc:	40020800 	.word	0x40020800
 80012d0:	40020c00 	.word	0x40020c00
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40021400 	.word	0x40021400
 80012dc:	40021800 	.word	0x40021800
 80012e0:	40013c00 	.word	0x40013c00

080012e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	807b      	strh	r3, [r7, #2]
 80012f0:	4613      	mov	r3, r2
 80012f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012f4:	787b      	ldrb	r3, [r7, #1]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012fa:	887a      	ldrh	r2, [r7, #2]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001300:	e003      	b.n	800130a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001302:	887b      	ldrh	r3, [r7, #2]
 8001304:	041a      	lsls	r2, r3, #16
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	619a      	str	r2, [r3, #24]
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d101      	bne.n	800132c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e0cc      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800132c:	4b68      	ldr	r3, [pc, #416]	; (80014d0 <HAL_RCC_ClockConfig+0x1b8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 030f 	and.w	r3, r3, #15
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	429a      	cmp	r2, r3
 8001338:	d90c      	bls.n	8001354 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800133a:	4b65      	ldr	r3, [pc, #404]	; (80014d0 <HAL_RCC_ClockConfig+0x1b8>)
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001342:	4b63      	ldr	r3, [pc, #396]	; (80014d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	d001      	beq.n	8001354 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e0b8      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d020      	beq.n	80013a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	2b00      	cmp	r3, #0
 800136a:	d005      	beq.n	8001378 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800136c:	4b59      	ldr	r3, [pc, #356]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	4a58      	ldr	r2, [pc, #352]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001372:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001376:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0308 	and.w	r3, r3, #8
 8001380:	2b00      	cmp	r3, #0
 8001382:	d005      	beq.n	8001390 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001384:	4b53      	ldr	r3, [pc, #332]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	4a52      	ldr	r2, [pc, #328]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 800138a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800138e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001390:	4b50      	ldr	r3, [pc, #320]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	494d      	ldr	r1, [pc, #308]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d044      	beq.n	8001438 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d107      	bne.n	80013c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b6:	4b47      	ldr	r3, [pc, #284]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d119      	bne.n	80013f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e07f      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d003      	beq.n	80013d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013d2:	2b03      	cmp	r3, #3
 80013d4:	d107      	bne.n	80013e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013d6:	4b3f      	ldr	r3, [pc, #252]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d109      	bne.n	80013f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e06f      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e6:	4b3b      	ldr	r3, [pc, #236]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e067      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013f6:	4b37      	ldr	r3, [pc, #220]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f023 0203 	bic.w	r2, r3, #3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	4934      	ldr	r1, [pc, #208]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001404:	4313      	orrs	r3, r2
 8001406:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001408:	f7ff fc28 	bl	8000c5c <HAL_GetTick>
 800140c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800140e:	e00a      	b.n	8001426 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001410:	f7ff fc24 	bl	8000c5c <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	f241 3288 	movw	r2, #5000	; 0x1388
 800141e:	4293      	cmp	r3, r2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e04f      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001426:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f003 020c 	and.w	r2, r3, #12
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	429a      	cmp	r2, r3
 8001436:	d1eb      	bne.n	8001410 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001438:	4b25      	ldr	r3, [pc, #148]	; (80014d0 <HAL_RCC_ClockConfig+0x1b8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 030f 	and.w	r3, r3, #15
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d20c      	bcs.n	8001460 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001446:	4b22      	ldr	r3, [pc, #136]	; (80014d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800144e:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	d001      	beq.n	8001460 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e032      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b00      	cmp	r3, #0
 800146a:	d008      	beq.n	800147e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800146c:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	4916      	ldr	r1, [pc, #88]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 800147a:	4313      	orrs	r3, r2
 800147c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	2b00      	cmp	r3, #0
 8001488:	d009      	beq.n	800149e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800148a:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	490e      	ldr	r1, [pc, #56]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 800149a:	4313      	orrs	r3, r2
 800149c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800149e:	f000 f855 	bl	800154c <HAL_RCC_GetSysClockFreq>
 80014a2:	4602      	mov	r2, r0
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	091b      	lsrs	r3, r3, #4
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	490a      	ldr	r1, [pc, #40]	; (80014d8 <HAL_RCC_ClockConfig+0x1c0>)
 80014b0:	5ccb      	ldrb	r3, [r1, r3]
 80014b2:	fa22 f303 	lsr.w	r3, r2, r3
 80014b6:	4a09      	ldr	r2, [pc, #36]	; (80014dc <HAL_RCC_ClockConfig+0x1c4>)
 80014b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <HAL_RCC_ClockConfig+0x1c8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fb88 	bl	8000bd4 <HAL_InitTick>

  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023c00 	.word	0x40023c00
 80014d4:	40023800 	.word	0x40023800
 80014d8:	08002d94 	.word	0x08002d94
 80014dc:	20000010 	.word	0x20000010
 80014e0:	20000014 	.word	0x20000014

080014e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000010 	.word	0x20000010

080014fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001500:	f7ff fff0 	bl	80014e4 <HAL_RCC_GetHCLKFreq>
 8001504:	4602      	mov	r2, r0
 8001506:	4b05      	ldr	r3, [pc, #20]	; (800151c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	0a9b      	lsrs	r3, r3, #10
 800150c:	f003 0307 	and.w	r3, r3, #7
 8001510:	4903      	ldr	r1, [pc, #12]	; (8001520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001512:	5ccb      	ldrb	r3, [r1, r3]
 8001514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001518:	4618      	mov	r0, r3
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40023800 	.word	0x40023800
 8001520:	08002da4 	.word	0x08002da4

08001524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001528:	f7ff ffdc 	bl	80014e4 <HAL_RCC_GetHCLKFreq>
 800152c:	4602      	mov	r2, r0
 800152e:	4b05      	ldr	r3, [pc, #20]	; (8001544 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	0b5b      	lsrs	r3, r3, #13
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	4903      	ldr	r1, [pc, #12]	; (8001548 <HAL_RCC_GetPCLK2Freq+0x24>)
 800153a:	5ccb      	ldrb	r3, [r1, r3]
 800153c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001540:	4618      	mov	r0, r3
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40023800 	.word	0x40023800
 8001548:	08002da4 	.word	0x08002da4

0800154c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800154c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001550:	b088      	sub	sp, #32
 8001552:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800155c:	2300      	movs	r3, #0
 800155e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001568:	4bce      	ldr	r3, [pc, #824]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x358>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 030c 	and.w	r3, r3, #12
 8001570:	2b0c      	cmp	r3, #12
 8001572:	f200 818d 	bhi.w	8001890 <HAL_RCC_GetSysClockFreq+0x344>
 8001576:	a201      	add	r2, pc, #4	; (adr r2, 800157c <HAL_RCC_GetSysClockFreq+0x30>)
 8001578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157c:	080015b1 	.word	0x080015b1
 8001580:	08001891 	.word	0x08001891
 8001584:	08001891 	.word	0x08001891
 8001588:	08001891 	.word	0x08001891
 800158c:	080015b7 	.word	0x080015b7
 8001590:	08001891 	.word	0x08001891
 8001594:	08001891 	.word	0x08001891
 8001598:	08001891 	.word	0x08001891
 800159c:	080015bd 	.word	0x080015bd
 80015a0:	08001891 	.word	0x08001891
 80015a4:	08001891 	.word	0x08001891
 80015a8:	08001891 	.word	0x08001891
 80015ac:	08001731 	.word	0x08001731
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015b0:	4bbd      	ldr	r3, [pc, #756]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80015b2:	61bb      	str	r3, [r7, #24]
       break;
 80015b4:	e16f      	b.n	8001896 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015b6:	4bbd      	ldr	r3, [pc, #756]	; (80018ac <HAL_RCC_GetSysClockFreq+0x360>)
 80015b8:	61bb      	str	r3, [r7, #24]
      break;
 80015ba:	e16c      	b.n	8001896 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015bc:	4bb9      	ldr	r3, [pc, #740]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x358>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015c4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015c6:	4bb7      	ldr	r3, [pc, #732]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x358>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d053      	beq.n	800167a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d2:	4bb4      	ldr	r3, [pc, #720]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x358>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	099b      	lsrs	r3, r3, #6
 80015d8:	461a      	mov	r2, r3
 80015da:	f04f 0300 	mov.w	r3, #0
 80015de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80015e2:	f04f 0100 	mov.w	r1, #0
 80015e6:	ea02 0400 	and.w	r4, r2, r0
 80015ea:	603c      	str	r4, [r7, #0]
 80015ec:	400b      	ands	r3, r1
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80015f4:	4620      	mov	r0, r4
 80015f6:	4629      	mov	r1, r5
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	f04f 0300 	mov.w	r3, #0
 8001600:	014b      	lsls	r3, r1, #5
 8001602:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001606:	0142      	lsls	r2, r0, #5
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	4623      	mov	r3, r4
 800160e:	1ac0      	subs	r0, r0, r3
 8001610:	462b      	mov	r3, r5
 8001612:	eb61 0103 	sbc.w	r1, r1, r3
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	f04f 0300 	mov.w	r3, #0
 800161e:	018b      	lsls	r3, r1, #6
 8001620:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001624:	0182      	lsls	r2, r0, #6
 8001626:	1a12      	subs	r2, r2, r0
 8001628:	eb63 0301 	sbc.w	r3, r3, r1
 800162c:	f04f 0000 	mov.w	r0, #0
 8001630:	f04f 0100 	mov.w	r1, #0
 8001634:	00d9      	lsls	r1, r3, #3
 8001636:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800163a:	00d0      	lsls	r0, r2, #3
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4621      	mov	r1, r4
 8001642:	1852      	adds	r2, r2, r1
 8001644:	4629      	mov	r1, r5
 8001646:	eb43 0101 	adc.w	r1, r3, r1
 800164a:	460b      	mov	r3, r1
 800164c:	f04f 0000 	mov.w	r0, #0
 8001650:	f04f 0100 	mov.w	r1, #0
 8001654:	0259      	lsls	r1, r3, #9
 8001656:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800165a:	0250      	lsls	r0, r2, #9
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4610      	mov	r0, r2
 8001662:	4619      	mov	r1, r3
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	461a      	mov	r2, r3
 8001668:	f04f 0300 	mov.w	r3, #0
 800166c:	f7fe fe62 	bl	8000334 <__aeabi_uldivmod>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4613      	mov	r3, r2
 8001676:	61fb      	str	r3, [r7, #28]
 8001678:	e04c      	b.n	8001714 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800167a:	4b8a      	ldr	r3, [pc, #552]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x358>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	099b      	lsrs	r3, r3, #6
 8001680:	461a      	mov	r2, r3
 8001682:	f04f 0300 	mov.w	r3, #0
 8001686:	f240 10ff 	movw	r0, #511	; 0x1ff
 800168a:	f04f 0100 	mov.w	r1, #0
 800168e:	ea02 0a00 	and.w	sl, r2, r0
 8001692:	ea03 0b01 	and.w	fp, r3, r1
 8001696:	4650      	mov	r0, sl
 8001698:	4659      	mov	r1, fp
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	014b      	lsls	r3, r1, #5
 80016a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80016a8:	0142      	lsls	r2, r0, #5
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	ebb0 000a 	subs.w	r0, r0, sl
 80016b2:	eb61 010b 	sbc.w	r1, r1, fp
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	f04f 0300 	mov.w	r3, #0
 80016be:	018b      	lsls	r3, r1, #6
 80016c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80016c4:	0182      	lsls	r2, r0, #6
 80016c6:	1a12      	subs	r2, r2, r0
 80016c8:	eb63 0301 	sbc.w	r3, r3, r1
 80016cc:	f04f 0000 	mov.w	r0, #0
 80016d0:	f04f 0100 	mov.w	r1, #0
 80016d4:	00d9      	lsls	r1, r3, #3
 80016d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80016da:	00d0      	lsls	r0, r2, #3
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	eb12 020a 	adds.w	r2, r2, sl
 80016e4:	eb43 030b 	adc.w	r3, r3, fp
 80016e8:	f04f 0000 	mov.w	r0, #0
 80016ec:	f04f 0100 	mov.w	r1, #0
 80016f0:	0299      	lsls	r1, r3, #10
 80016f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80016f6:	0290      	lsls	r0, r2, #10
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	461a      	mov	r2, r3
 8001704:	f04f 0300 	mov.w	r3, #0
 8001708:	f7fe fe14 	bl	8000334 <__aeabi_uldivmod>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4613      	mov	r3, r2
 8001712:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001714:	4b63      	ldr	r3, [pc, #396]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	0c1b      	lsrs	r3, r3, #16
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	3301      	adds	r3, #1
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001724:	69fa      	ldr	r2, [r7, #28]
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	fbb2 f3f3 	udiv	r3, r2, r3
 800172c:	61bb      	str	r3, [r7, #24]
      break;
 800172e:	e0b2      	b.n	8001896 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001730:	4b5c      	ldr	r3, [pc, #368]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001738:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800173a:	4b5a      	ldr	r3, [pc, #360]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x358>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d04d      	beq.n	80017e2 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001746:	4b57      	ldr	r3, [pc, #348]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	099b      	lsrs	r3, r3, #6
 800174c:	461a      	mov	r2, r3
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001756:	f04f 0100 	mov.w	r1, #0
 800175a:	ea02 0800 	and.w	r8, r2, r0
 800175e:	ea03 0901 	and.w	r9, r3, r1
 8001762:	4640      	mov	r0, r8
 8001764:	4649      	mov	r1, r9
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	014b      	lsls	r3, r1, #5
 8001770:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001774:	0142      	lsls	r2, r0, #5
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	ebb0 0008 	subs.w	r0, r0, r8
 800177e:	eb61 0109 	sbc.w	r1, r1, r9
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	018b      	lsls	r3, r1, #6
 800178c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001790:	0182      	lsls	r2, r0, #6
 8001792:	1a12      	subs	r2, r2, r0
 8001794:	eb63 0301 	sbc.w	r3, r3, r1
 8001798:	f04f 0000 	mov.w	r0, #0
 800179c:	f04f 0100 	mov.w	r1, #0
 80017a0:	00d9      	lsls	r1, r3, #3
 80017a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017a6:	00d0      	lsls	r0, r2, #3
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	eb12 0208 	adds.w	r2, r2, r8
 80017b0:	eb43 0309 	adc.w	r3, r3, r9
 80017b4:	f04f 0000 	mov.w	r0, #0
 80017b8:	f04f 0100 	mov.w	r1, #0
 80017bc:	0259      	lsls	r1, r3, #9
 80017be:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80017c2:	0250      	lsls	r0, r2, #9
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4610      	mov	r0, r2
 80017ca:	4619      	mov	r1, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	461a      	mov	r2, r3
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	f7fe fdae 	bl	8000334 <__aeabi_uldivmod>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4613      	mov	r3, r2
 80017de:	61fb      	str	r3, [r7, #28]
 80017e0:	e04a      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e2:	4b30      	ldr	r3, [pc, #192]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x358>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	099b      	lsrs	r3, r3, #6
 80017e8:	461a      	mov	r2, r3
 80017ea:	f04f 0300 	mov.w	r3, #0
 80017ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80017f2:	f04f 0100 	mov.w	r1, #0
 80017f6:	ea02 0400 	and.w	r4, r2, r0
 80017fa:	ea03 0501 	and.w	r5, r3, r1
 80017fe:	4620      	mov	r0, r4
 8001800:	4629      	mov	r1, r5
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	014b      	lsls	r3, r1, #5
 800180c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001810:	0142      	lsls	r2, r0, #5
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	1b00      	subs	r0, r0, r4
 8001818:	eb61 0105 	sbc.w	r1, r1, r5
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	018b      	lsls	r3, r1, #6
 8001826:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800182a:	0182      	lsls	r2, r0, #6
 800182c:	1a12      	subs	r2, r2, r0
 800182e:	eb63 0301 	sbc.w	r3, r3, r1
 8001832:	f04f 0000 	mov.w	r0, #0
 8001836:	f04f 0100 	mov.w	r1, #0
 800183a:	00d9      	lsls	r1, r3, #3
 800183c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001840:	00d0      	lsls	r0, r2, #3
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	1912      	adds	r2, r2, r4
 8001848:	eb45 0303 	adc.w	r3, r5, r3
 800184c:	f04f 0000 	mov.w	r0, #0
 8001850:	f04f 0100 	mov.w	r1, #0
 8001854:	0299      	lsls	r1, r3, #10
 8001856:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800185a:	0290      	lsls	r0, r2, #10
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4610      	mov	r0, r2
 8001862:	4619      	mov	r1, r3
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	461a      	mov	r2, r3
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	f7fe fd62 	bl	8000334 <__aeabi_uldivmod>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4613      	mov	r3, r2
 8001876:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x358>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	0f1b      	lsrs	r3, r3, #28
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001884:	69fa      	ldr	r2, [r7, #28]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	fbb2 f3f3 	udiv	r3, r2, r3
 800188c:	61bb      	str	r3, [r7, #24]
      break;
 800188e:	e002      	b.n	8001896 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001892:	61bb      	str	r3, [r7, #24]
      break;
 8001894:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001896:	69bb      	ldr	r3, [r7, #24]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3720      	adds	r7, #32
 800189c:	46bd      	mov	sp, r7
 800189e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800
 80018a8:	00f42400 	.word	0x00f42400
 80018ac:	007a1200 	.word	0x007a1200

080018b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e28d      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 8083 	beq.w	80019d6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018d0:	4b94      	ldr	r3, [pc, #592]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 030c 	and.w	r3, r3, #12
 80018d8:	2b04      	cmp	r3, #4
 80018da:	d019      	beq.n	8001910 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018dc:	4b91      	ldr	r3, [pc, #580]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d106      	bne.n	80018f6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018e8:	4b8e      	ldr	r3, [pc, #568]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018f4:	d00c      	beq.n	8001910 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018f6:	4b8b      	ldr	r3, [pc, #556]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018fe:	2b0c      	cmp	r3, #12
 8001900:	d112      	bne.n	8001928 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001902:	4b88      	ldr	r3, [pc, #544]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800190e:	d10b      	bne.n	8001928 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001910:	4b84      	ldr	r3, [pc, #528]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d05b      	beq.n	80019d4 <HAL_RCC_OscConfig+0x124>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d157      	bne.n	80019d4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e25a      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001930:	d106      	bne.n	8001940 <HAL_RCC_OscConfig+0x90>
 8001932:	4b7c      	ldr	r3, [pc, #496]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a7b      	ldr	r2, [pc, #492]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	e01d      	b.n	800197c <HAL_RCC_OscConfig+0xcc>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001948:	d10c      	bne.n	8001964 <HAL_RCC_OscConfig+0xb4>
 800194a:	4b76      	ldr	r3, [pc, #472]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a75      	ldr	r2, [pc, #468]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	4b73      	ldr	r3, [pc, #460]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a72      	ldr	r2, [pc, #456]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 800195c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	e00b      	b.n	800197c <HAL_RCC_OscConfig+0xcc>
 8001964:	4b6f      	ldr	r3, [pc, #444]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a6e      	ldr	r2, [pc, #440]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 800196a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	4b6c      	ldr	r3, [pc, #432]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a6b      	ldr	r2, [pc, #428]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800197a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d013      	beq.n	80019ac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7ff f96a 	bl	8000c5c <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800198c:	f7ff f966 	bl	8000c5c <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b64      	cmp	r3, #100	; 0x64
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e21f      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199e:	4b61      	ldr	r3, [pc, #388]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0xdc>
 80019aa:	e014      	b.n	80019d6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ac:	f7ff f956 	bl	8000c5c <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019b4:	f7ff f952 	bl	8000c5c <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b64      	cmp	r3, #100	; 0x64
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e20b      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c6:	4b57      	ldr	r3, [pc, #348]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0x104>
 80019d2:	e000      	b.n	80019d6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d06f      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019e2:	4b50      	ldr	r3, [pc, #320]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d017      	beq.n	8001a1e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019ee:	4b4d      	ldr	r3, [pc, #308]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d105      	bne.n	8001a06 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019fa:	4b4a      	ldr	r3, [pc, #296]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00b      	beq.n	8001a1e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a06:	4b47      	ldr	r3, [pc, #284]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a0e:	2b0c      	cmp	r3, #12
 8001a10:	d11c      	bne.n	8001a4c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a12:	4b44      	ldr	r3, [pc, #272]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d116      	bne.n	8001a4c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1e:	4b41      	ldr	r3, [pc, #260]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d005      	beq.n	8001a36 <HAL_RCC_OscConfig+0x186>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d001      	beq.n	8001a36 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e1d3      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a36:	4b3b      	ldr	r3, [pc, #236]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	4937      	ldr	r1, [pc, #220]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a4a:	e03a      	b.n	8001ac2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d020      	beq.n	8001a96 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a54:	4b34      	ldr	r3, [pc, #208]	; (8001b28 <HAL_RCC_OscConfig+0x278>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5a:	f7ff f8ff 	bl	8000c5c <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a62:	f7ff f8fb 	bl	8000c5c <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e1b4      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a74:	4b2b      	ldr	r3, [pc, #172]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a80:	4b28      	ldr	r3, [pc, #160]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	4925      	ldr	r1, [pc, #148]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	600b      	str	r3, [r1, #0]
 8001a94:	e015      	b.n	8001ac2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a96:	4b24      	ldr	r3, [pc, #144]	; (8001b28 <HAL_RCC_OscConfig+0x278>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9c:	f7ff f8de 	bl	8000c5c <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aa4:	f7ff f8da 	bl	8000c5c <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e193      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab6:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f0      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d036      	beq.n	8001b3c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d016      	beq.n	8001b04 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ad6:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <HAL_RCC_OscConfig+0x27c>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001adc:	f7ff f8be 	bl	8000c5c <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae4:	f7ff f8ba 	bl	8000c5c <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e173      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af6:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x234>
 8001b02:	e01b      	b.n	8001b3c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <HAL_RCC_OscConfig+0x27c>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0a:	f7ff f8a7 	bl	8000c5c <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b10:	e00e      	b.n	8001b30 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b12:	f7ff f8a3 	bl	8000c5c <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d907      	bls.n	8001b30 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e15c      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
 8001b24:	40023800 	.word	0x40023800
 8001b28:	42470000 	.word	0x42470000
 8001b2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b30:	4b8a      	ldr	r3, [pc, #552]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1ea      	bne.n	8001b12 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 8097 	beq.w	8001c78 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b4e:	4b83      	ldr	r3, [pc, #524]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10f      	bne.n	8001b7a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	4b7f      	ldr	r3, [pc, #508]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	4a7e      	ldr	r2, [pc, #504]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b68:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6a:	4b7c      	ldr	r3, [pc, #496]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b76:	2301      	movs	r3, #1
 8001b78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7a:	4b79      	ldr	r3, [pc, #484]	; (8001d60 <HAL_RCC_OscConfig+0x4b0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d118      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b86:	4b76      	ldr	r3, [pc, #472]	; (8001d60 <HAL_RCC_OscConfig+0x4b0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a75      	ldr	r2, [pc, #468]	; (8001d60 <HAL_RCC_OscConfig+0x4b0>)
 8001b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b92:	f7ff f863 	bl	8000c5c <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b9a:	f7ff f85f 	bl	8000c5c <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e118      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bac:	4b6c      	ldr	r3, [pc, #432]	; (8001d60 <HAL_RCC_OscConfig+0x4b0>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0f0      	beq.n	8001b9a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d106      	bne.n	8001bce <HAL_RCC_OscConfig+0x31e>
 8001bc0:	4b66      	ldr	r3, [pc, #408]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc4:	4a65      	ldr	r2, [pc, #404]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6713      	str	r3, [r2, #112]	; 0x70
 8001bcc:	e01c      	b.n	8001c08 <HAL_RCC_OscConfig+0x358>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b05      	cmp	r3, #5
 8001bd4:	d10c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x340>
 8001bd6:	4b61      	ldr	r3, [pc, #388]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bda:	4a60      	ldr	r2, [pc, #384]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001bdc:	f043 0304 	orr.w	r3, r3, #4
 8001be0:	6713      	str	r3, [r2, #112]	; 0x70
 8001be2:	4b5e      	ldr	r3, [pc, #376]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be6:	4a5d      	ldr	r2, [pc, #372]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6713      	str	r3, [r2, #112]	; 0x70
 8001bee:	e00b      	b.n	8001c08 <HAL_RCC_OscConfig+0x358>
 8001bf0:	4b5a      	ldr	r3, [pc, #360]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf4:	4a59      	ldr	r2, [pc, #356]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001bf6:	f023 0301 	bic.w	r3, r3, #1
 8001bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8001bfc:	4b57      	ldr	r3, [pc, #348]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c00:	4a56      	ldr	r2, [pc, #344]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001c02:	f023 0304 	bic.w	r3, r3, #4
 8001c06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d015      	beq.n	8001c3c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c10:	f7ff f824 	bl	8000c5c <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c16:	e00a      	b.n	8001c2e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c18:	f7ff f820 	bl	8000c5c <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e0d7      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c2e:	4b4b      	ldr	r3, [pc, #300]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0ee      	beq.n	8001c18 <HAL_RCC_OscConfig+0x368>
 8001c3a:	e014      	b.n	8001c66 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3c:	f7ff f80e 	bl	8000c5c <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c42:	e00a      	b.n	8001c5a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c44:	f7ff f80a 	bl	8000c5c <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e0c1      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c5a:	4b40      	ldr	r3, [pc, #256]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1ee      	bne.n	8001c44 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c66:	7dfb      	ldrb	r3, [r7, #23]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d105      	bne.n	8001c78 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c6c:	4b3b      	ldr	r3, [pc, #236]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	4a3a      	ldr	r2, [pc, #232]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001c72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 80ad 	beq.w	8001ddc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c82:	4b36      	ldr	r3, [pc, #216]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	2b08      	cmp	r3, #8
 8001c8c:	d060      	beq.n	8001d50 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d145      	bne.n	8001d22 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c96:	4b33      	ldr	r3, [pc, #204]	; (8001d64 <HAL_RCC_OscConfig+0x4b4>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9c:	f7fe ffde 	bl	8000c5c <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca4:	f7fe ffda 	bl	8000c5c <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e093      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb6:	4b29      	ldr	r3, [pc, #164]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69da      	ldr	r2, [r3, #28]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	019b      	lsls	r3, r3, #6
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd8:	085b      	lsrs	r3, r3, #1
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	041b      	lsls	r3, r3, #16
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	061b      	lsls	r3, r3, #24
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cec:	071b      	lsls	r3, r3, #28
 8001cee:	491b      	ldr	r1, [pc, #108]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <HAL_RCC_OscConfig+0x4b4>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfa:	f7fe ffaf 	bl	8000c5c <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d02:	f7fe ffab 	bl	8000c5c <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e064      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0f0      	beq.n	8001d02 <HAL_RCC_OscConfig+0x452>
 8001d20:	e05c      	b.n	8001ddc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <HAL_RCC_OscConfig+0x4b4>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7fe ff98 	bl	8000c5c <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d30:	f7fe ff94 	bl	8000c5c <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e04d      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x480>
 8001d4e:	e045      	b.n	8001ddc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d107      	bne.n	8001d68 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e040      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40007000 	.word	0x40007000
 8001d64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d68:	4b1f      	ldr	r3, [pc, #124]	; (8001de8 <HAL_RCC_OscConfig+0x538>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d030      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d129      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d122      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d98:	4013      	ands	r3, r2
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d119      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dae:	085b      	lsrs	r3, r3, #1
 8001db0:	3b01      	subs	r3, #1
 8001db2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d10f      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d107      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d001      	beq.n	8001ddc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e000      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40023800 	.word	0x40023800

08001dec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e03f      	b.n	8001e7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d106      	bne.n	8001e18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7fe fdfc 	bl	8000a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2224      	movs	r2, #36	; 0x24
 8001e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 fddb 	bl	80029ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	691a      	ldr	r2, [r3, #16]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	695a      	ldr	r2, [r3, #20]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68da      	ldr	r2, [r3, #12]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2220      	movs	r2, #32
 8001e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2220      	movs	r2, #32
 8001e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b08a      	sub	sp, #40	; 0x28
 8001e8a:	af02      	add	r7, sp, #8
 8001e8c:	60f8      	str	r0, [r7, #12]
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	603b      	str	r3, [r7, #0]
 8001e92:	4613      	mov	r3, r2
 8001e94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b20      	cmp	r3, #32
 8001ea4:	d17c      	bne.n	8001fa0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d002      	beq.n	8001eb2 <HAL_UART_Transmit+0x2c>
 8001eac:	88fb      	ldrh	r3, [r7, #6]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e075      	b.n	8001fa2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d101      	bne.n	8001ec4 <HAL_UART_Transmit+0x3e>
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	e06e      	b.n	8001fa2 <HAL_UART_Transmit+0x11c>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2221      	movs	r2, #33	; 0x21
 8001ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001eda:	f7fe febf 	bl	8000c5c <HAL_GetTick>
 8001ede:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	88fa      	ldrh	r2, [r7, #6]
 8001ee4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	88fa      	ldrh	r2, [r7, #6]
 8001eea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ef4:	d108      	bne.n	8001f08 <HAL_UART_Transmit+0x82>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d104      	bne.n	8001f08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	61bb      	str	r3, [r7, #24]
 8001f06:	e003      	b.n	8001f10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f18:	e02a      	b.n	8001f70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2200      	movs	r2, #0
 8001f22:	2180      	movs	r1, #128	; 0x80
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f000 fb1f 	bl	8002568 <UART_WaitOnFlagUntilTimeout>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e036      	b.n	8001fa2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10b      	bne.n	8001f52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	3302      	adds	r3, #2
 8001f4e:	61bb      	str	r3, [r7, #24]
 8001f50:	e007      	b.n	8001f62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	781a      	ldrb	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1cf      	bne.n	8001f1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	2200      	movs	r2, #0
 8001f82:	2140      	movs	r1, #64	; 0x40
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f000 faef 	bl	8002568 <UART_WaitOnFlagUntilTimeout>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e006      	b.n	8001fa2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2220      	movs	r2, #32
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e000      	b.n	8001fa2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001fa0:	2302      	movs	r3, #2
  }
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3720      	adds	r7, #32
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b084      	sub	sp, #16
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b20      	cmp	r3, #32
 8001fc2:	d11d      	bne.n	8002000 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d002      	beq.n	8001fd0 <HAL_UART_Receive_IT+0x26>
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e016      	b.n	8002002 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d101      	bne.n	8001fe2 <HAL_UART_Receive_IT+0x38>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e00f      	b.n	8002002 <HAL_UART_Receive_IT+0x58>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	68b9      	ldr	r1, [r7, #8]
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 fb24 	bl	8002644 <UART_Start_Receive_IT>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	e000      	b.n	8002002 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002000:	2302      	movs	r3, #2
  }
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b0ba      	sub	sp, #232	; 0xe8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002032:	2300      	movs	r3, #0
 8002034:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002038:	2300      	movs	r3, #0
 800203a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800203e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800204a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10f      	bne.n	8002072 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002056:	f003 0320 	and.w	r3, r3, #32
 800205a:	2b00      	cmp	r3, #0
 800205c:	d009      	beq.n	8002072 <HAL_UART_IRQHandler+0x66>
 800205e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002062:	f003 0320 	and.w	r3, r3, #32
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 fc03 	bl	8002876 <UART_Receive_IT>
      return;
 8002070:	e256      	b.n	8002520 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002072:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 80de 	beq.w	8002238 <HAL_UART_IRQHandler+0x22c>
 800207c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b00      	cmp	r3, #0
 8002086:	d106      	bne.n	8002096 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800208c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 80d1 	beq.w	8002238 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00b      	beq.n	80020ba <HAL_UART_IRQHandler+0xae>
 80020a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d005      	beq.n	80020ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f043 0201 	orr.w	r2, r3, #1
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020be:	f003 0304 	and.w	r3, r3, #4
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00b      	beq.n	80020de <HAL_UART_IRQHandler+0xd2>
 80020c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d005      	beq.n	80020de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f043 0202 	orr.w	r2, r3, #2
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00b      	beq.n	8002102 <HAL_UART_IRQHandler+0xf6>
 80020ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d005      	beq.n	8002102 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f043 0204 	orr.w	r2, r3, #4
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b00      	cmp	r3, #0
 800210c:	d011      	beq.n	8002132 <HAL_UART_IRQHandler+0x126>
 800210e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002112:	f003 0320 	and.w	r3, r3, #32
 8002116:	2b00      	cmp	r3, #0
 8002118:	d105      	bne.n	8002126 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800211a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d005      	beq.n	8002132 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f043 0208 	orr.w	r2, r3, #8
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 81ed 	beq.w	8002516 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800213c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002140:	f003 0320 	and.w	r3, r3, #32
 8002144:	2b00      	cmp	r3, #0
 8002146:	d008      	beq.n	800215a <HAL_UART_IRQHandler+0x14e>
 8002148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800214c:	f003 0320 	and.w	r3, r3, #32
 8002150:	2b00      	cmp	r3, #0
 8002152:	d002      	beq.n	800215a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 fb8e 	bl	8002876 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002164:	2b40      	cmp	r3, #64	; 0x40
 8002166:	bf0c      	ite	eq
 8002168:	2301      	moveq	r3, #1
 800216a:	2300      	movne	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d103      	bne.n	8002186 <HAL_UART_IRQHandler+0x17a>
 800217e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002182:	2b00      	cmp	r3, #0
 8002184:	d04f      	beq.n	8002226 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 fa96 	bl	80026b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002196:	2b40      	cmp	r3, #64	; 0x40
 8002198:	d141      	bne.n	800221e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	3314      	adds	r3, #20
 80021a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021a8:	e853 3f00 	ldrex	r3, [r3]
 80021ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80021b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	3314      	adds	r3, #20
 80021c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80021c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80021ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80021d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80021d6:	e841 2300 	strex	r3, r2, [r1]
 80021da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80021de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1d9      	bne.n	800219a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d013      	beq.n	8002216 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f2:	4a7d      	ldr	r2, [pc, #500]	; (80023e8 <HAL_UART_IRQHandler+0x3dc>)
 80021f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe febb 	bl	8000f76 <HAL_DMA_Abort_IT>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d016      	beq.n	8002234 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002210:	4610      	mov	r0, r2
 8002212:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002214:	e00e      	b.n	8002234 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f990 	bl	800253c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800221c:	e00a      	b.n	8002234 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f98c 	bl	800253c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002224:	e006      	b.n	8002234 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f988 	bl	800253c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002232:	e170      	b.n	8002516 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002234:	bf00      	nop
    return;
 8002236:	e16e      	b.n	8002516 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223c:	2b01      	cmp	r3, #1
 800223e:	f040 814a 	bne.w	80024d6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002246:	f003 0310 	and.w	r3, r3, #16
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 8143 	beq.w	80024d6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002254:	f003 0310 	and.w	r3, r3, #16
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 813c 	beq.w	80024d6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800225e:	2300      	movs	r3, #0
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	60bb      	str	r3, [r7, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227e:	2b40      	cmp	r3, #64	; 0x40
 8002280:	f040 80b4 	bne.w	80023ec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002290:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 8140 	beq.w	800251a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800229e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80022a2:	429a      	cmp	r2, r3
 80022a4:	f080 8139 	bcs.w	800251a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80022ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022ba:	f000 8088 	beq.w	80023ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	330c      	adds	r3, #12
 80022c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022cc:	e853 3f00 	ldrex	r3, [r3]
 80022d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80022d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	330c      	adds	r3, #12
 80022e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80022ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80022ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80022f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80022fa:	e841 2300 	strex	r3, r2, [r1]
 80022fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002302:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1d9      	bne.n	80022be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	3314      	adds	r3, #20
 8002310:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002312:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002314:	e853 3f00 	ldrex	r3, [r3]
 8002318:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800231a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800231c:	f023 0301 	bic.w	r3, r3, #1
 8002320:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	3314      	adds	r3, #20
 800232a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800232e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002332:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002334:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002336:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800233a:	e841 2300 	strex	r3, r2, [r1]
 800233e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002340:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1e1      	bne.n	800230a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	3314      	adds	r3, #20
 800234c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800234e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002350:	e853 3f00 	ldrex	r3, [r3]
 8002354:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800235c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	3314      	adds	r3, #20
 8002366:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800236a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800236c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800236e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002370:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002372:	e841 2300 	strex	r3, r2, [r1]
 8002376:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1e3      	bne.n	8002346 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2220      	movs	r2, #32
 8002382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	330c      	adds	r3, #12
 8002392:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002396:	e853 3f00 	ldrex	r3, [r3]
 800239a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800239c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800239e:	f023 0310 	bic.w	r3, r3, #16
 80023a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	330c      	adds	r3, #12
 80023ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80023b0:	65ba      	str	r2, [r7, #88]	; 0x58
 80023b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80023b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023b8:	e841 2300 	strex	r3, r2, [r1]
 80023bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80023be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1e3      	bne.n	800238c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe fd64 	bl	8000e96 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	b29b      	uxth	r3, r3
 80023dc:	4619      	mov	r1, r3
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f8b6 	bl	8002550 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80023e4:	e099      	b.n	800251a <HAL_UART_IRQHandler+0x50e>
 80023e6:	bf00      	nop
 80023e8:	0800277f 	.word	0x0800277f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002400:	b29b      	uxth	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 808b 	beq.w	800251e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002408:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 8086 	beq.w	800251e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	330c      	adds	r3, #12
 8002418:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800241a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800241c:	e853 3f00 	ldrex	r3, [r3]
 8002420:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002424:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002428:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	330c      	adds	r3, #12
 8002432:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002436:	647a      	str	r2, [r7, #68]	; 0x44
 8002438:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800243a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800243c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800243e:	e841 2300 	strex	r3, r2, [r1]
 8002442:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1e3      	bne.n	8002412 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	3314      	adds	r3, #20
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	e853 3f00 	ldrex	r3, [r3]
 8002458:	623b      	str	r3, [r7, #32]
   return(result);
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	f023 0301 	bic.w	r3, r3, #1
 8002460:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	3314      	adds	r3, #20
 800246a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800246e:	633a      	str	r2, [r7, #48]	; 0x30
 8002470:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002472:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002476:	e841 2300 	strex	r3, r2, [r1]
 800247a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800247c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1e3      	bne.n	800244a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2220      	movs	r2, #32
 8002486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	330c      	adds	r3, #12
 8002496:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	e853 3f00 	ldrex	r3, [r3]
 800249e:	60fb      	str	r3, [r7, #12]
   return(result);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f023 0310 	bic.w	r3, r3, #16
 80024a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	330c      	adds	r3, #12
 80024b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80024b4:	61fa      	str	r2, [r7, #28]
 80024b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024b8:	69b9      	ldr	r1, [r7, #24]
 80024ba:	69fa      	ldr	r2, [r7, #28]
 80024bc:	e841 2300 	strex	r3, r2, [r1]
 80024c0:	617b      	str	r3, [r7, #20]
   return(result);
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1e3      	bne.n	8002490 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80024c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80024cc:	4619      	mov	r1, r3
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f83e 	bl	8002550 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80024d4:	e023      	b.n	800251e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80024d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <HAL_UART_IRQHandler+0x4ea>
 80024e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f959 	bl	80027a6 <UART_Transmit_IT>
    return;
 80024f4:	e014      	b.n	8002520 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00e      	beq.n	8002520 <HAL_UART_IRQHandler+0x514>
 8002502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800250a:	2b00      	cmp	r3, #0
 800250c:	d008      	beq.n	8002520 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f999 	bl	8002846 <UART_EndTransmit_IT>
    return;
 8002514:	e004      	b.n	8002520 <HAL_UART_IRQHandler+0x514>
    return;
 8002516:	bf00      	nop
 8002518:	e002      	b.n	8002520 <HAL_UART_IRQHandler+0x514>
      return;
 800251a:	bf00      	nop
 800251c:	e000      	b.n	8002520 <HAL_UART_IRQHandler+0x514>
      return;
 800251e:	bf00      	nop
  }
}
 8002520:	37e8      	adds	r7, #232	; 0xe8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop

08002528 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b090      	sub	sp, #64	; 0x40
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	603b      	str	r3, [r7, #0]
 8002574:	4613      	mov	r3, r2
 8002576:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002578:	e050      	b.n	800261c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800257a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800257c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002580:	d04c      	beq.n	800261c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002584:	2b00      	cmp	r3, #0
 8002586:	d007      	beq.n	8002598 <UART_WaitOnFlagUntilTimeout+0x30>
 8002588:	f7fe fb68 	bl	8000c5c <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002594:	429a      	cmp	r2, r3
 8002596:	d241      	bcs.n	800261c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	330c      	adds	r3, #12
 800259e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a2:	e853 3f00 	ldrex	r3, [r3]
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80025ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	330c      	adds	r3, #12
 80025b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025b8:	637a      	str	r2, [r7, #52]	; 0x34
 80025ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025c0:	e841 2300 	strex	r3, r2, [r1]
 80025c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80025c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1e5      	bne.n	8002598 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	3314      	adds	r3, #20
 80025d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	e853 3f00 	ldrex	r3, [r3]
 80025da:	613b      	str	r3, [r7, #16]
   return(result);
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	f023 0301 	bic.w	r3, r3, #1
 80025e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	3314      	adds	r3, #20
 80025ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025ec:	623a      	str	r2, [r7, #32]
 80025ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f0:	69f9      	ldr	r1, [r7, #28]
 80025f2:	6a3a      	ldr	r2, [r7, #32]
 80025f4:	e841 2300 	strex	r3, r2, [r1]
 80025f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1e5      	bne.n	80025cc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2220      	movs	r2, #32
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2220      	movs	r2, #32
 800260c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e00f      	b.n	800263c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	4013      	ands	r3, r2
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	429a      	cmp	r2, r3
 800262a:	bf0c      	ite	eq
 800262c:	2301      	moveq	r3, #1
 800262e:	2300      	movne	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	461a      	mov	r2, r3
 8002634:	79fb      	ldrb	r3, [r7, #7]
 8002636:	429a      	cmp	r2, r3
 8002638:	d09f      	beq.n	800257a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3740      	adds	r7, #64	; 0x40
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	4613      	mov	r3, r2
 8002650:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	88fa      	ldrh	r2, [r7, #6]
 800265c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	88fa      	ldrh	r2, [r7, #6]
 8002662:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2222      	movs	r2, #34	; 0x22
 800266e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002688:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f042 0201 	orr.w	r2, r2, #1
 8002698:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 0220 	orr.w	r2, r2, #32
 80026a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b095      	sub	sp, #84	; 0x54
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	330c      	adds	r3, #12
 80026c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ca:	e853 3f00 	ldrex	r3, [r3]
 80026ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80026d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80026d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	330c      	adds	r3, #12
 80026de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026e0:	643a      	str	r2, [r7, #64]	; 0x40
 80026e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80026e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026e8:	e841 2300 	strex	r3, r2, [r1]
 80026ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80026ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1e5      	bne.n	80026c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	3314      	adds	r3, #20
 80026fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	e853 3f00 	ldrex	r3, [r3]
 8002702:	61fb      	str	r3, [r7, #28]
   return(result);
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f023 0301 	bic.w	r3, r3, #1
 800270a:	64bb      	str	r3, [r7, #72]	; 0x48
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	3314      	adds	r3, #20
 8002712:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002714:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002716:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002718:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800271a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800271c:	e841 2300 	strex	r3, r2, [r1]
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1e5      	bne.n	80026f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272c:	2b01      	cmp	r3, #1
 800272e:	d119      	bne.n	8002764 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	330c      	adds	r3, #12
 8002736:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	e853 3f00 	ldrex	r3, [r3]
 800273e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f023 0310 	bic.w	r3, r3, #16
 8002746:	647b      	str	r3, [r7, #68]	; 0x44
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	330c      	adds	r3, #12
 800274e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002750:	61ba      	str	r2, [r7, #24]
 8002752:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002754:	6979      	ldr	r1, [r7, #20]
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	e841 2300 	strex	r3, r2, [r1]
 800275c:	613b      	str	r3, [r7, #16]
   return(result);
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1e5      	bne.n	8002730 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2220      	movs	r2, #32
 8002768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002772:	bf00      	nop
 8002774:	3754      	adds	r7, #84	; 0x54
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b084      	sub	sp, #16
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f7ff fecf 	bl	800253c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800279e:	bf00      	nop
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b085      	sub	sp, #20
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b21      	cmp	r3, #33	; 0x21
 80027b8:	d13e      	bne.n	8002838 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c2:	d114      	bne.n	80027ee <UART_Transmit_IT+0x48>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d110      	bne.n	80027ee <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	461a      	mov	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	1c9a      	adds	r2, r3, #2
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	621a      	str	r2, [r3, #32]
 80027ec:	e008      	b.n	8002800 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	1c59      	adds	r1, r3, #1
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6211      	str	r1, [r2, #32]
 80027f8:	781a      	ldrb	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002804:	b29b      	uxth	r3, r3
 8002806:	3b01      	subs	r3, #1
 8002808:	b29b      	uxth	r3, r3
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	4619      	mov	r1, r3
 800280e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10f      	bne.n	8002834 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002822:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002832:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	e000      	b.n	800283a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002838:	2302      	movs	r3, #2
  }
}
 800283a:	4618      	mov	r0, r3
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b082      	sub	sp, #8
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800285c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2220      	movs	r2, #32
 8002862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff fe5e 	bl	8002528 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b08c      	sub	sp, #48	; 0x30
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b22      	cmp	r3, #34	; 0x22
 8002888:	f040 80ab 	bne.w	80029e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002894:	d117      	bne.n	80028c6 <UART_Receive_IT+0x50>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d113      	bne.n	80028c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028be:	1c9a      	adds	r2, r3, #2
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	629a      	str	r2, [r3, #40]	; 0x28
 80028c4:	e026      	b.n	8002914 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028d8:	d007      	beq.n	80028ea <UART_Receive_IT+0x74>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10a      	bne.n	80028f8 <UART_Receive_IT+0x82>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d106      	bne.n	80028f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f4:	701a      	strb	r2, [r3, #0]
 80028f6:	e008      	b.n	800290a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002904:	b2da      	uxtb	r2, r3
 8002906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002908:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002918:	b29b      	uxth	r3, r3
 800291a:	3b01      	subs	r3, #1
 800291c:	b29b      	uxth	r3, r3
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	4619      	mov	r1, r3
 8002922:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002924:	2b00      	cmp	r3, #0
 8002926:	d15a      	bne.n	80029de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0220 	bic.w	r2, r2, #32
 8002936:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002946:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695a      	ldr	r2, [r3, #20]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0201 	bic.w	r2, r2, #1
 8002956:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	2b01      	cmp	r3, #1
 8002966:	d135      	bne.n	80029d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	330c      	adds	r3, #12
 8002974:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	e853 3f00 	ldrex	r3, [r3]
 800297c:	613b      	str	r3, [r7, #16]
   return(result);
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	f023 0310 	bic.w	r3, r3, #16
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	330c      	adds	r3, #12
 800298c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800298e:	623a      	str	r2, [r7, #32]
 8002990:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002992:	69f9      	ldr	r1, [r7, #28]
 8002994:	6a3a      	ldr	r2, [r7, #32]
 8002996:	e841 2300 	strex	r3, r2, [r1]
 800299a:	61bb      	str	r3, [r7, #24]
   return(result);
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1e5      	bne.n	800296e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0310 	and.w	r3, r3, #16
 80029ac:	2b10      	cmp	r3, #16
 80029ae:	d10a      	bne.n	80029c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029b0:	2300      	movs	r3, #0
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80029ca:	4619      	mov	r1, r3
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7ff fdbf 	bl	8002550 <HAL_UARTEx_RxEventCallback>
 80029d2:	e002      	b.n	80029da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7fd fe29 	bl	800062c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80029da:	2300      	movs	r3, #0
 80029dc:	e002      	b.n	80029e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80029e2:	2302      	movs	r3, #2
  }
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3730      	adds	r7, #48	; 0x30
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029f0:	b09f      	sub	sp, #124	; 0x7c
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a02:	68d9      	ldr	r1, [r3, #12]
 8002a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	ea40 0301 	orr.w	r3, r0, r1
 8002a0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	431a      	orrs	r2, r3
 8002a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a30:	f021 010c 	bic.w	r1, r1, #12
 8002a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a3a:	430b      	orrs	r3, r1
 8002a3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a4a:	6999      	ldr	r1, [r3, #24]
 8002a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	ea40 0301 	orr.w	r3, r0, r1
 8002a54:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	4bc5      	ldr	r3, [pc, #788]	; (8002d70 <UART_SetConfig+0x384>)
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d004      	beq.n	8002a6a <UART_SetConfig+0x7e>
 8002a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4bc3      	ldr	r3, [pc, #780]	; (8002d74 <UART_SetConfig+0x388>)
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d103      	bne.n	8002a72 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a6a:	f7fe fd5b 	bl	8001524 <HAL_RCC_GetPCLK2Freq>
 8002a6e:	6778      	str	r0, [r7, #116]	; 0x74
 8002a70:	e002      	b.n	8002a78 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a72:	f7fe fd43 	bl	80014fc <HAL_RCC_GetPCLK1Freq>
 8002a76:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a80:	f040 80b6 	bne.w	8002bf0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a86:	461c      	mov	r4, r3
 8002a88:	f04f 0500 	mov.w	r5, #0
 8002a8c:	4622      	mov	r2, r4
 8002a8e:	462b      	mov	r3, r5
 8002a90:	1891      	adds	r1, r2, r2
 8002a92:	6439      	str	r1, [r7, #64]	; 0x40
 8002a94:	415b      	adcs	r3, r3
 8002a96:	647b      	str	r3, [r7, #68]	; 0x44
 8002a98:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a9c:	1912      	adds	r2, r2, r4
 8002a9e:	eb45 0303 	adc.w	r3, r5, r3
 8002aa2:	f04f 0000 	mov.w	r0, #0
 8002aa6:	f04f 0100 	mov.w	r1, #0
 8002aaa:	00d9      	lsls	r1, r3, #3
 8002aac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ab0:	00d0      	lsls	r0, r2, #3
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	1911      	adds	r1, r2, r4
 8002ab8:	6639      	str	r1, [r7, #96]	; 0x60
 8002aba:	416b      	adcs	r3, r5
 8002abc:	667b      	str	r3, [r7, #100]	; 0x64
 8002abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	f04f 0300 	mov.w	r3, #0
 8002ac8:	1891      	adds	r1, r2, r2
 8002aca:	63b9      	str	r1, [r7, #56]	; 0x38
 8002acc:	415b      	adcs	r3, r3
 8002ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ad0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ad4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002ad8:	f7fd fc2c 	bl	8000334 <__aeabi_uldivmod>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4ba5      	ldr	r3, [pc, #660]	; (8002d78 <UART_SetConfig+0x38c>)
 8002ae2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ae6:	095b      	lsrs	r3, r3, #5
 8002ae8:	011e      	lsls	r6, r3, #4
 8002aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aec:	461c      	mov	r4, r3
 8002aee:	f04f 0500 	mov.w	r5, #0
 8002af2:	4622      	mov	r2, r4
 8002af4:	462b      	mov	r3, r5
 8002af6:	1891      	adds	r1, r2, r2
 8002af8:	6339      	str	r1, [r7, #48]	; 0x30
 8002afa:	415b      	adcs	r3, r3
 8002afc:	637b      	str	r3, [r7, #52]	; 0x34
 8002afe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002b02:	1912      	adds	r2, r2, r4
 8002b04:	eb45 0303 	adc.w	r3, r5, r3
 8002b08:	f04f 0000 	mov.w	r0, #0
 8002b0c:	f04f 0100 	mov.w	r1, #0
 8002b10:	00d9      	lsls	r1, r3, #3
 8002b12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b16:	00d0      	lsls	r0, r2, #3
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	1911      	adds	r1, r2, r4
 8002b1e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b20:	416b      	adcs	r3, r5
 8002b22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	461a      	mov	r2, r3
 8002b2a:	f04f 0300 	mov.w	r3, #0
 8002b2e:	1891      	adds	r1, r2, r2
 8002b30:	62b9      	str	r1, [r7, #40]	; 0x28
 8002b32:	415b      	adcs	r3, r3
 8002b34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b3a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002b3e:	f7fd fbf9 	bl	8000334 <__aeabi_uldivmod>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4b8c      	ldr	r3, [pc, #560]	; (8002d78 <UART_SetConfig+0x38c>)
 8002b48:	fba3 1302 	umull	r1, r3, r3, r2
 8002b4c:	095b      	lsrs	r3, r3, #5
 8002b4e:	2164      	movs	r1, #100	; 0x64
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	3332      	adds	r3, #50	; 0x32
 8002b5a:	4a87      	ldr	r2, [pc, #540]	; (8002d78 <UART_SetConfig+0x38c>)
 8002b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b60:	095b      	lsrs	r3, r3, #5
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b68:	441e      	add	r6, r3
 8002b6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f04f 0100 	mov.w	r1, #0
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	1894      	adds	r4, r2, r2
 8002b78:	623c      	str	r4, [r7, #32]
 8002b7a:	415b      	adcs	r3, r3
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b82:	1812      	adds	r2, r2, r0
 8002b84:	eb41 0303 	adc.w	r3, r1, r3
 8002b88:	f04f 0400 	mov.w	r4, #0
 8002b8c:	f04f 0500 	mov.w	r5, #0
 8002b90:	00dd      	lsls	r5, r3, #3
 8002b92:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002b96:	00d4      	lsls	r4, r2, #3
 8002b98:	4622      	mov	r2, r4
 8002b9a:	462b      	mov	r3, r5
 8002b9c:	1814      	adds	r4, r2, r0
 8002b9e:	653c      	str	r4, [r7, #80]	; 0x50
 8002ba0:	414b      	adcs	r3, r1
 8002ba2:	657b      	str	r3, [r7, #84]	; 0x54
 8002ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	f04f 0300 	mov.w	r3, #0
 8002bae:	1891      	adds	r1, r2, r2
 8002bb0:	61b9      	str	r1, [r7, #24]
 8002bb2:	415b      	adcs	r3, r3
 8002bb4:	61fb      	str	r3, [r7, #28]
 8002bb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002bbe:	f7fd fbb9 	bl	8000334 <__aeabi_uldivmod>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4b6c      	ldr	r3, [pc, #432]	; (8002d78 <UART_SetConfig+0x38c>)
 8002bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8002bcc:	095b      	lsrs	r3, r3, #5
 8002bce:	2164      	movs	r1, #100	; 0x64
 8002bd0:	fb01 f303 	mul.w	r3, r1, r3
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	3332      	adds	r3, #50	; 0x32
 8002bda:	4a67      	ldr	r2, [pc, #412]	; (8002d78 <UART_SetConfig+0x38c>)
 8002bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002be0:	095b      	lsrs	r3, r3, #5
 8002be2:	f003 0207 	and.w	r2, r3, #7
 8002be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4432      	add	r2, r6
 8002bec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002bee:	e0b9      	b.n	8002d64 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bf2:	461c      	mov	r4, r3
 8002bf4:	f04f 0500 	mov.w	r5, #0
 8002bf8:	4622      	mov	r2, r4
 8002bfa:	462b      	mov	r3, r5
 8002bfc:	1891      	adds	r1, r2, r2
 8002bfe:	6139      	str	r1, [r7, #16]
 8002c00:	415b      	adcs	r3, r3
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c08:	1912      	adds	r2, r2, r4
 8002c0a:	eb45 0303 	adc.w	r3, r5, r3
 8002c0e:	f04f 0000 	mov.w	r0, #0
 8002c12:	f04f 0100 	mov.w	r1, #0
 8002c16:	00d9      	lsls	r1, r3, #3
 8002c18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c1c:	00d0      	lsls	r0, r2, #3
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	eb12 0804 	adds.w	r8, r2, r4
 8002c26:	eb43 0905 	adc.w	r9, r3, r5
 8002c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f04f 0100 	mov.w	r1, #0
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	008b      	lsls	r3, r1, #2
 8002c3e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002c42:	0082      	lsls	r2, r0, #2
 8002c44:	4640      	mov	r0, r8
 8002c46:	4649      	mov	r1, r9
 8002c48:	f7fd fb74 	bl	8000334 <__aeabi_uldivmod>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4b49      	ldr	r3, [pc, #292]	; (8002d78 <UART_SetConfig+0x38c>)
 8002c52:	fba3 2302 	umull	r2, r3, r3, r2
 8002c56:	095b      	lsrs	r3, r3, #5
 8002c58:	011e      	lsls	r6, r3, #4
 8002c5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f04f 0100 	mov.w	r1, #0
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	1894      	adds	r4, r2, r2
 8002c68:	60bc      	str	r4, [r7, #8]
 8002c6a:	415b      	adcs	r3, r3
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c72:	1812      	adds	r2, r2, r0
 8002c74:	eb41 0303 	adc.w	r3, r1, r3
 8002c78:	f04f 0400 	mov.w	r4, #0
 8002c7c:	f04f 0500 	mov.w	r5, #0
 8002c80:	00dd      	lsls	r5, r3, #3
 8002c82:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002c86:	00d4      	lsls	r4, r2, #3
 8002c88:	4622      	mov	r2, r4
 8002c8a:	462b      	mov	r3, r5
 8002c8c:	1814      	adds	r4, r2, r0
 8002c8e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002c90:	414b      	adcs	r3, r1
 8002c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f04f 0100 	mov.w	r1, #0
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	008b      	lsls	r3, r1, #2
 8002ca8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002cac:	0082      	lsls	r2, r0, #2
 8002cae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002cb2:	f7fd fb3f 	bl	8000334 <__aeabi_uldivmod>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4b2f      	ldr	r3, [pc, #188]	; (8002d78 <UART_SetConfig+0x38c>)
 8002cbc:	fba3 1302 	umull	r1, r3, r3, r2
 8002cc0:	095b      	lsrs	r3, r3, #5
 8002cc2:	2164      	movs	r1, #100	; 0x64
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	3332      	adds	r3, #50	; 0x32
 8002cce:	4a2a      	ldr	r2, [pc, #168]	; (8002d78 <UART_SetConfig+0x38c>)
 8002cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd4:	095b      	lsrs	r3, r3, #5
 8002cd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cda:	441e      	add	r6, r3
 8002cdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f04f 0100 	mov.w	r1, #0
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	1894      	adds	r4, r2, r2
 8002cea:	603c      	str	r4, [r7, #0]
 8002cec:	415b      	adcs	r3, r3
 8002cee:	607b      	str	r3, [r7, #4]
 8002cf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cf4:	1812      	adds	r2, r2, r0
 8002cf6:	eb41 0303 	adc.w	r3, r1, r3
 8002cfa:	f04f 0400 	mov.w	r4, #0
 8002cfe:	f04f 0500 	mov.w	r5, #0
 8002d02:	00dd      	lsls	r5, r3, #3
 8002d04:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002d08:	00d4      	lsls	r4, r2, #3
 8002d0a:	4622      	mov	r2, r4
 8002d0c:	462b      	mov	r3, r5
 8002d0e:	eb12 0a00 	adds.w	sl, r2, r0
 8002d12:	eb43 0b01 	adc.w	fp, r3, r1
 8002d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f04f 0100 	mov.w	r1, #0
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	008b      	lsls	r3, r1, #2
 8002d2a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002d2e:	0082      	lsls	r2, r0, #2
 8002d30:	4650      	mov	r0, sl
 8002d32:	4659      	mov	r1, fp
 8002d34:	f7fd fafe 	bl	8000334 <__aeabi_uldivmod>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <UART_SetConfig+0x38c>)
 8002d3e:	fba3 1302 	umull	r1, r3, r3, r2
 8002d42:	095b      	lsrs	r3, r3, #5
 8002d44:	2164      	movs	r1, #100	; 0x64
 8002d46:	fb01 f303 	mul.w	r3, r1, r3
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	3332      	adds	r3, #50	; 0x32
 8002d50:	4a09      	ldr	r2, [pc, #36]	; (8002d78 <UART_SetConfig+0x38c>)
 8002d52:	fba2 2303 	umull	r2, r3, r2, r3
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	f003 020f 	and.w	r2, r3, #15
 8002d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4432      	add	r2, r6
 8002d62:	609a      	str	r2, [r3, #8]
}
 8002d64:	bf00      	nop
 8002d66:	377c      	adds	r7, #124	; 0x7c
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d6e:	bf00      	nop
 8002d70:	40011000 	.word	0x40011000
 8002d74:	40011400 	.word	0x40011400
 8002d78:	51eb851f 	.word	0x51eb851f

08002d7c <_init>:
 8002d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7e:	bf00      	nop
 8002d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d82:	bc08      	pop	{r3}
 8002d84:	469e      	mov	lr, r3
 8002d86:	4770      	bx	lr

08002d88 <_fini>:
 8002d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d8a:	bf00      	nop
 8002d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d8e:	bc08      	pop	{r3}
 8002d90:	469e      	mov	lr, r3
 8002d92:	4770      	bx	lr
