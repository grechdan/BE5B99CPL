
IDE_USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003a98  08003a98  00013a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003af0  08003af0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08003af0  08003af0  00013af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003af8  08003af8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003af8  08003af8  00013af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003afc  08003afc  00013afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08003b00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000007c  08003b7c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08003b7c  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      000000a7  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016846  00000000  00000000  00020153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b00  00000000  00000000  00036999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b0  00000000  00000000  0003a4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000888  00000000  00000000  0003ae50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000201fd  00000000  00000000  0003b6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a9e2  00000000  00000000  0005b8d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c858a  00000000  00000000  000662b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001fe8  00000000  00000000  0012e844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00003211  00000000  00000000  0013082c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <deregister_tm_clones>:
 80001d0:	4803      	ldr	r0, [pc, #12]	; (80001e0 <deregister_tm_clones+0x10>)
 80001d2:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <deregister_tm_clones+0x14>)
 80001d4:	4283      	cmp	r3, r0
 80001d6:	d002      	beq.n	80001de <deregister_tm_clones+0xe>
 80001d8:	4b03      	ldr	r3, [pc, #12]	; (80001e8 <deregister_tm_clones+0x18>)
 80001da:	b103      	cbz	r3, 80001de <deregister_tm_clones+0xe>
 80001dc:	4718      	bx	r3
 80001de:	4770      	bx	lr
 80001e0:	2000007c 	.word	0x2000007c
 80001e4:	2000007c 	.word	0x2000007c
 80001e8:	00000000 	.word	0x00000000

080001ec <register_tm_clones>:
 80001ec:	4805      	ldr	r0, [pc, #20]	; (8000204 <register_tm_clones+0x18>)
 80001ee:	4906      	ldr	r1, [pc, #24]	; (8000208 <register_tm_clones+0x1c>)
 80001f0:	1a0b      	subs	r3, r1, r0
 80001f2:	0fd9      	lsrs	r1, r3, #31
 80001f4:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001f8:	1049      	asrs	r1, r1, #1
 80001fa:	d002      	beq.n	8000202 <register_tm_clones+0x16>
 80001fc:	4b03      	ldr	r3, [pc, #12]	; (800020c <register_tm_clones+0x20>)
 80001fe:	b103      	cbz	r3, 8000202 <register_tm_clones+0x16>
 8000200:	4718      	bx	r3
 8000202:	4770      	bx	lr
 8000204:	2000007c 	.word	0x2000007c
 8000208:	2000007c 	.word	0x2000007c
 800020c:	00000000 	.word	0x00000000

08000210 <__do_global_dtors_aux>:
 8000210:	b510      	push	{r4, lr}
 8000212:	4c06      	ldr	r4, [pc, #24]	; (800022c <__do_global_dtors_aux+0x1c>)
 8000214:	7823      	ldrb	r3, [r4, #0]
 8000216:	b943      	cbnz	r3, 800022a <__do_global_dtors_aux+0x1a>
 8000218:	f7ff ffda 	bl	80001d0 <deregister_tm_clones>
 800021c:	4b04      	ldr	r3, [pc, #16]	; (8000230 <__do_global_dtors_aux+0x20>)
 800021e:	b113      	cbz	r3, 8000226 <__do_global_dtors_aux+0x16>
 8000220:	4804      	ldr	r0, [pc, #16]	; (8000234 <__do_global_dtors_aux+0x24>)
 8000222:	f3af 8000 	nop.w
 8000226:	2301      	movs	r3, #1
 8000228:	7023      	strb	r3, [r4, #0]
 800022a:	bd10      	pop	{r4, pc}
 800022c:	2000007c 	.word	0x2000007c
 8000230:	00000000 	.word	0x00000000
 8000234:	08003a80 	.word	0x08003a80

08000238 <frame_dummy>:
 8000238:	b508      	push	{r3, lr}
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <frame_dummy+0x14>)
 800023c:	b11b      	cbz	r3, 8000246 <frame_dummy+0xe>
 800023e:	4904      	ldr	r1, [pc, #16]	; (8000250 <frame_dummy+0x18>)
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <frame_dummy+0x1c>)
 8000242:	f3af 8000 	nop.w
 8000246:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800024a:	e7cf      	b.n	80001ec <register_tm_clones>
 800024c:	00000000 	.word	0x00000000
 8000250:	20000080 	.word	0x20000080
 8000254:	08003a80 	.word	0x08003a80

08000258 <__errno>:
 8000258:	4b01      	ldr	r3, [pc, #4]	; (8000260 <__errno+0x8>)
 800025a:	6818      	ldr	r0, [r3, #0]
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	20000000 	.word	0x20000000

08000264 <__libc_init_array>:
 8000264:	b570      	push	{r4, r5, r6, lr}
 8000266:	4e0d      	ldr	r6, [pc, #52]	; (800029c <__libc_init_array+0x38>)
 8000268:	4d0d      	ldr	r5, [pc, #52]	; (80002a0 <__libc_init_array+0x3c>)
 800026a:	1b76      	subs	r6, r6, r5
 800026c:	10b6      	asrs	r6, r6, #2
 800026e:	d006      	beq.n	800027e <__libc_init_array+0x1a>
 8000270:	2400      	movs	r4, #0
 8000272:	3401      	adds	r4, #1
 8000274:	f855 3b04 	ldr.w	r3, [r5], #4
 8000278:	4798      	blx	r3
 800027a:	42a6      	cmp	r6, r4
 800027c:	d1f9      	bne.n	8000272 <__libc_init_array+0xe>
 800027e:	4e09      	ldr	r6, [pc, #36]	; (80002a4 <__libc_init_array+0x40>)
 8000280:	4d09      	ldr	r5, [pc, #36]	; (80002a8 <__libc_init_array+0x44>)
 8000282:	1b76      	subs	r6, r6, r5
 8000284:	f003 fbfc 	bl	8003a80 <_init>
 8000288:	10b6      	asrs	r6, r6, #2
 800028a:	d006      	beq.n	800029a <__libc_init_array+0x36>
 800028c:	2400      	movs	r4, #0
 800028e:	3401      	adds	r4, #1
 8000290:	f855 3b04 	ldr.w	r3, [r5], #4
 8000294:	4798      	blx	r3
 8000296:	42a6      	cmp	r6, r4
 8000298:	d1f9      	bne.n	800028e <__libc_init_array+0x2a>
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	08003af8 	.word	0x08003af8
 80002a0:	08003af8 	.word	0x08003af8
 80002a4:	08003afc 	.word	0x08003afc
 80002a8:	08003af8 	.word	0x08003af8

080002ac <memset>:
 80002ac:	b4f0      	push	{r4, r5, r6, r7}
 80002ae:	0786      	lsls	r6, r0, #30
 80002b0:	d046      	beq.n	8000340 <memset+0x94>
 80002b2:	1e54      	subs	r4, r2, #1
 80002b4:	2a00      	cmp	r2, #0
 80002b6:	d03c      	beq.n	8000332 <memset+0x86>
 80002b8:	b2ca      	uxtb	r2, r1
 80002ba:	4603      	mov	r3, r0
 80002bc:	e002      	b.n	80002c4 <memset+0x18>
 80002be:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 80002c2:	d336      	bcc.n	8000332 <memset+0x86>
 80002c4:	f803 2b01 	strb.w	r2, [r3], #1
 80002c8:	079d      	lsls	r5, r3, #30
 80002ca:	d1f8      	bne.n	80002be <memset+0x12>
 80002cc:	2c03      	cmp	r4, #3
 80002ce:	d929      	bls.n	8000324 <memset+0x78>
 80002d0:	b2cd      	uxtb	r5, r1
 80002d2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80002d6:	2c0f      	cmp	r4, #15
 80002d8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80002dc:	d933      	bls.n	8000346 <memset+0x9a>
 80002de:	f1a4 0610 	sub.w	r6, r4, #16
 80002e2:	0936      	lsrs	r6, r6, #4
 80002e4:	f103 0720 	add.w	r7, r3, #32
 80002e8:	eb07 1706 	add.w	r7, r7, r6, lsl #4
 80002ec:	f103 0210 	add.w	r2, r3, #16
 80002f0:	e942 5504 	strd	r5, r5, [r2, #-16]
 80002f4:	e942 5502 	strd	r5, r5, [r2, #-8]
 80002f8:	3210      	adds	r2, #16
 80002fa:	42ba      	cmp	r2, r7
 80002fc:	d1f8      	bne.n	80002f0 <memset+0x44>
 80002fe:	1c72      	adds	r2, r6, #1
 8000300:	f014 0f0c 	tst.w	r4, #12
 8000304:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8000308:	f004 060f 	and.w	r6, r4, #15
 800030c:	d013      	beq.n	8000336 <memset+0x8a>
 800030e:	1f33      	subs	r3, r6, #4
 8000310:	f023 0303 	bic.w	r3, r3, #3
 8000314:	3304      	adds	r3, #4
 8000316:	4413      	add	r3, r2
 8000318:	f842 5b04 	str.w	r5, [r2], #4
 800031c:	4293      	cmp	r3, r2
 800031e:	d1fb      	bne.n	8000318 <memset+0x6c>
 8000320:	f006 0403 	and.w	r4, r6, #3
 8000324:	b12c      	cbz	r4, 8000332 <memset+0x86>
 8000326:	b2c9      	uxtb	r1, r1
 8000328:	441c      	add	r4, r3
 800032a:	f803 1b01 	strb.w	r1, [r3], #1
 800032e:	429c      	cmp	r4, r3
 8000330:	d1fb      	bne.n	800032a <memset+0x7e>
 8000332:	bcf0      	pop	{r4, r5, r6, r7}
 8000334:	4770      	bx	lr
 8000336:	4634      	mov	r4, r6
 8000338:	4613      	mov	r3, r2
 800033a:	2c00      	cmp	r4, #0
 800033c:	d1f3      	bne.n	8000326 <memset+0x7a>
 800033e:	e7f8      	b.n	8000332 <memset+0x86>
 8000340:	4614      	mov	r4, r2
 8000342:	4603      	mov	r3, r0
 8000344:	e7c2      	b.n	80002cc <memset+0x20>
 8000346:	461a      	mov	r2, r3
 8000348:	4626      	mov	r6, r4
 800034a:	e7e0      	b.n	800030e <memset+0x62>

0800034c <_sniprintf_r>:
 800034c:	b408      	push	{r3}
 800034e:	b530      	push	{r4, r5, lr}
 8000350:	2a00      	cmp	r2, #0
 8000352:	b09c      	sub	sp, #112	; 0x70
 8000354:	4604      	mov	r4, r0
 8000356:	db35      	blt.n	80003c4 <_sniprintf_r+0x78>
 8000358:	f44f 7302 	mov.w	r3, #520	; 0x208
 800035c:	9102      	str	r1, [sp, #8]
 800035e:	9106      	str	r1, [sp, #24]
 8000360:	f8ad 3014 	strh.w	r3, [sp, #20]
 8000364:	a920      	add	r1, sp, #128	; 0x80
 8000366:	d018      	beq.n	800039a <_sniprintf_r+0x4e>
 8000368:	3a01      	subs	r2, #1
 800036a:	460b      	mov	r3, r1
 800036c:	9204      	str	r2, [sp, #16]
 800036e:	9207      	str	r2, [sp, #28]
 8000370:	9101      	str	r1, [sp, #4]
 8000372:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8000374:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8000378:	a902      	add	r1, sp, #8
 800037a:	f8ad 5016 	strh.w	r5, [sp, #22]
 800037e:	f000 f949 	bl	8000614 <_svfiprintf_r>
 8000382:	1c42      	adds	r2, r0, #1
 8000384:	da01      	bge.n	800038a <_sniprintf_r+0x3e>
 8000386:	238b      	movs	r3, #139	; 0x8b
 8000388:	6023      	str	r3, [r4, #0]
 800038a:	9b02      	ldr	r3, [sp, #8]
 800038c:	2200      	movs	r2, #0
 800038e:	701a      	strb	r2, [r3, #0]
 8000390:	b01c      	add	sp, #112	; 0x70
 8000392:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000396:	b001      	add	sp, #4
 8000398:	4770      	bx	lr
 800039a:	460b      	mov	r3, r1
 800039c:	9204      	str	r2, [sp, #16]
 800039e:	9207      	str	r2, [sp, #28]
 80003a0:	9101      	str	r1, [sp, #4]
 80003a2:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80003a6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80003a8:	f8ad 5016 	strh.w	r5, [sp, #22]
 80003ac:	a902      	add	r1, sp, #8
 80003ae:	f000 f931 	bl	8000614 <_svfiprintf_r>
 80003b2:	1c43      	adds	r3, r0, #1
 80003b4:	da01      	bge.n	80003ba <_sniprintf_r+0x6e>
 80003b6:	238b      	movs	r3, #139	; 0x8b
 80003b8:	6023      	str	r3, [r4, #0]
 80003ba:	b01c      	add	sp, #112	; 0x70
 80003bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80003c0:	b001      	add	sp, #4
 80003c2:	4770      	bx	lr
 80003c4:	228b      	movs	r2, #139	; 0x8b
 80003c6:	6002      	str	r2, [r0, #0]
 80003c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003cc:	e7f5      	b.n	80003ba <_sniprintf_r+0x6e>
 80003ce:	bf00      	nop

080003d0 <sniprintf>:
 80003d0:	b40c      	push	{r2, r3}
 80003d2:	b530      	push	{r4, r5, lr}
 80003d4:	4b20      	ldr	r3, [pc, #128]	; (8000458 <sniprintf+0x88>)
 80003d6:	2900      	cmp	r1, #0
 80003d8:	b09d      	sub	sp, #116	; 0x74
 80003da:	681c      	ldr	r4, [r3, #0]
 80003dc:	db37      	blt.n	800044e <sniprintf+0x7e>
 80003de:	f44f 7302 	mov.w	r3, #520	; 0x208
 80003e2:	9002      	str	r0, [sp, #8]
 80003e4:	9006      	str	r0, [sp, #24]
 80003e6:	f8ad 3014 	strh.w	r3, [sp, #20]
 80003ea:	a821      	add	r0, sp, #132	; 0x84
 80003ec:	d019      	beq.n	8000422 <sniprintf+0x52>
 80003ee:	3901      	subs	r1, #1
 80003f0:	4603      	mov	r3, r0
 80003f2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80003f4:	9104      	str	r1, [sp, #16]
 80003f6:	9107      	str	r1, [sp, #28]
 80003f8:	9001      	str	r0, [sp, #4]
 80003fa:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80003fe:	a902      	add	r1, sp, #8
 8000400:	4620      	mov	r0, r4
 8000402:	f8ad 5016 	strh.w	r5, [sp, #22]
 8000406:	f000 f905 	bl	8000614 <_svfiprintf_r>
 800040a:	1c42      	adds	r2, r0, #1
 800040c:	da01      	bge.n	8000412 <sniprintf+0x42>
 800040e:	238b      	movs	r3, #139	; 0x8b
 8000410:	6023      	str	r3, [r4, #0]
 8000412:	9b02      	ldr	r3, [sp, #8]
 8000414:	2200      	movs	r2, #0
 8000416:	701a      	strb	r2, [r3, #0]
 8000418:	b01d      	add	sp, #116	; 0x74
 800041a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800041e:	b002      	add	sp, #8
 8000420:	4770      	bx	lr
 8000422:	4603      	mov	r3, r0
 8000424:	9104      	str	r1, [sp, #16]
 8000426:	9107      	str	r1, [sp, #28]
 8000428:	9001      	str	r0, [sp, #4]
 800042a:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800042e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8000430:	f8ad 5016 	strh.w	r5, [sp, #22]
 8000434:	a902      	add	r1, sp, #8
 8000436:	4620      	mov	r0, r4
 8000438:	f000 f8ec 	bl	8000614 <_svfiprintf_r>
 800043c:	1c43      	adds	r3, r0, #1
 800043e:	da01      	bge.n	8000444 <sniprintf+0x74>
 8000440:	238b      	movs	r3, #139	; 0x8b
 8000442:	6023      	str	r3, [r4, #0]
 8000444:	b01d      	add	sp, #116	; 0x74
 8000446:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800044a:	b002      	add	sp, #8
 800044c:	4770      	bx	lr
 800044e:	238b      	movs	r3, #139	; 0x8b
 8000450:	6023      	str	r3, [r4, #0]
 8000452:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000456:	e7f5      	b.n	8000444 <sniprintf+0x74>
 8000458:	20000000 	.word	0x20000000

0800045c <__ssputs_r>:
 800045c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000460:	688e      	ldr	r6, [r1, #8]
 8000462:	461d      	mov	r5, r3
 8000464:	42ae      	cmp	r6, r5
 8000466:	460c      	mov	r4, r1
 8000468:	680b      	ldr	r3, [r1, #0]
 800046a:	4617      	mov	r7, r2
 800046c:	d836      	bhi.n	80004dc <__ssputs_r+0x80>
 800046e:	4680      	mov	r8, r0
 8000470:	8988      	ldrh	r0, [r1, #12]
 8000472:	f410 6f90 	tst.w	r0, #1152	; 0x480
 8000476:	d10e      	bne.n	8000496 <__ssputs_r+0x3a>
 8000478:	4635      	mov	r5, r6
 800047a:	4618      	mov	r0, r3
 800047c:	462a      	mov	r2, r5
 800047e:	4639      	mov	r1, r7
 8000480:	f000 fcd0 	bl	8000e24 <memmove>
 8000484:	68a2      	ldr	r2, [r4, #8]
 8000486:	6823      	ldr	r3, [r4, #0]
 8000488:	1b96      	subs	r6, r2, r6
 800048a:	442b      	add	r3, r5
 800048c:	60a6      	str	r6, [r4, #8]
 800048e:	6023      	str	r3, [r4, #0]
 8000490:	2000      	movs	r0, #0
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	e9d1 1604 	ldrd	r1, r6, [r1, #16]
 800049a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800049e:	eba3 0901 	sub.w	r9, r3, r1
 80004a2:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 80004a6:	1c6b      	adds	r3, r5, #1
 80004a8:	1076      	asrs	r6, r6, #1
 80004aa:	444b      	add	r3, r9
 80004ac:	42b3      	cmp	r3, r6
 80004ae:	4632      	mov	r2, r6
 80004b0:	bf84      	itt	hi
 80004b2:	461e      	movhi	r6, r3
 80004b4:	4632      	movhi	r2, r6
 80004b6:	0543      	lsls	r3, r0, #21
 80004b8:	d512      	bpl.n	80004e0 <__ssputs_r+0x84>
 80004ba:	4611      	mov	r1, r2
 80004bc:	4640      	mov	r0, r8
 80004be:	f000 fd6f 	bl	8000fa0 <_malloc_r>
 80004c2:	4682      	mov	sl, r0
 80004c4:	b300      	cbz	r0, 8000508 <__ssputs_r+0xac>
 80004c6:	464a      	mov	r2, r9
 80004c8:	6921      	ldr	r1, [r4, #16]
 80004ca:	f000 fc11 	bl	8000cf0 <memcpy>
 80004ce:	89a3      	ldrh	r3, [r4, #12]
 80004d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80004d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004d8:	81a3      	strh	r3, [r4, #12]
 80004da:	e006      	b.n	80004ea <__ssputs_r+0x8e>
 80004dc:	462e      	mov	r6, r5
 80004de:	e7cc      	b.n	800047a <__ssputs_r+0x1e>
 80004e0:	4640      	mov	r0, r8
 80004e2:	f000 fdc1 	bl	8001068 <_realloc_r>
 80004e6:	4682      	mov	sl, r0
 80004e8:	b150      	cbz	r0, 8000500 <__ssputs_r+0xa4>
 80004ea:	eba6 0209 	sub.w	r2, r6, r9
 80004ee:	eb0a 0309 	add.w	r3, sl, r9
 80004f2:	6166      	str	r6, [r4, #20]
 80004f4:	f8c4 a010 	str.w	sl, [r4, #16]
 80004f8:	6023      	str	r3, [r4, #0]
 80004fa:	60a2      	str	r2, [r4, #8]
 80004fc:	462e      	mov	r6, r5
 80004fe:	e7bc      	b.n	800047a <__ssputs_r+0x1e>
 8000500:	6921      	ldr	r1, [r4, #16]
 8000502:	4640      	mov	r0, r8
 8000504:	f000 fcf6 	bl	8000ef4 <_free_r>
 8000508:	230c      	movs	r3, #12
 800050a:	f8c8 3000 	str.w	r3, [r8]
 800050e:	89a3      	ldrh	r3, [r4, #12]
 8000510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000514:	81a3      	strh	r3, [r4, #12]
 8000516:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800051a:	e7ba      	b.n	8000492 <__ssputs_r+0x36>

0800051c <__ssprint_r>:
 800051c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000520:	6893      	ldr	r3, [r2, #8]
 8000522:	b083      	sub	sp, #12
 8000524:	4690      	mov	r8, r2
 8000526:	2b00      	cmp	r3, #0
 8000528:	d06d      	beq.n	8000606 <__ssprint_r+0xea>
 800052a:	6817      	ldr	r7, [r2, #0]
 800052c:	688d      	ldr	r5, [r1, #8]
 800052e:	4682      	mov	sl, r0
 8000530:	460c      	mov	r4, r1
 8000532:	6808      	ldr	r0, [r1, #0]
 8000534:	3708      	adds	r7, #8
 8000536:	e043      	b.n	80005c0 <__ssprint_r+0xa4>
 8000538:	89a3      	ldrh	r3, [r4, #12]
 800053a:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800053e:	d02e      	beq.n	800059e <__ssprint_r+0x82>
 8000540:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
 8000544:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000548:	eba0 0b01 	sub.w	fp, r0, r1
 800054c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000550:	eb0b 0006 	add.w	r0, fp, r6
 8000554:	106d      	asrs	r5, r5, #1
 8000556:	3001      	adds	r0, #1
 8000558:	42a8      	cmp	r0, r5
 800055a:	462a      	mov	r2, r5
 800055c:	bf84      	itt	hi
 800055e:	4605      	movhi	r5, r0
 8000560:	462a      	movhi	r2, r5
 8000562:	055b      	lsls	r3, r3, #21
 8000564:	d536      	bpl.n	80005d4 <__ssprint_r+0xb8>
 8000566:	4611      	mov	r1, r2
 8000568:	4650      	mov	r0, sl
 800056a:	f000 fd19 	bl	8000fa0 <_malloc_r>
 800056e:	2800      	cmp	r0, #0
 8000570:	d03a      	beq.n	80005e8 <__ssprint_r+0xcc>
 8000572:	465a      	mov	r2, fp
 8000574:	6921      	ldr	r1, [r4, #16]
 8000576:	9001      	str	r0, [sp, #4]
 8000578:	f000 fbba 	bl	8000cf0 <memcpy>
 800057c:	89a2      	ldrh	r2, [r4, #12]
 800057e:	9b01      	ldr	r3, [sp, #4]
 8000580:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8000584:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000588:	81a2      	strh	r2, [r4, #12]
 800058a:	eba5 020b 	sub.w	r2, r5, fp
 800058e:	eb03 000b 	add.w	r0, r3, fp
 8000592:	6165      	str	r5, [r4, #20]
 8000594:	6123      	str	r3, [r4, #16]
 8000596:	6020      	str	r0, [r4, #0]
 8000598:	60a2      	str	r2, [r4, #8]
 800059a:	4635      	mov	r5, r6
 800059c:	46b3      	mov	fp, r6
 800059e:	465a      	mov	r2, fp
 80005a0:	4649      	mov	r1, r9
 80005a2:	f000 fc3f 	bl	8000e24 <memmove>
 80005a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80005aa:	68a2      	ldr	r2, [r4, #8]
 80005ac:	6820      	ldr	r0, [r4, #0]
 80005ae:	1b55      	subs	r5, r2, r5
 80005b0:	4458      	add	r0, fp
 80005b2:	1b9e      	subs	r6, r3, r6
 80005b4:	60a5      	str	r5, [r4, #8]
 80005b6:	6020      	str	r0, [r4, #0]
 80005b8:	f8c8 6008 	str.w	r6, [r8, #8]
 80005bc:	b31e      	cbz	r6, 8000606 <__ssprint_r+0xea>
 80005be:	3708      	adds	r7, #8
 80005c0:	e957 9602 	ldrd	r9, r6, [r7, #-8]
 80005c4:	46ab      	mov	fp, r5
 80005c6:	2e00      	cmp	r6, #0
 80005c8:	d0f9      	beq.n	80005be <__ssprint_r+0xa2>
 80005ca:	42ae      	cmp	r6, r5
 80005cc:	d2b4      	bcs.n	8000538 <__ssprint_r+0x1c>
 80005ce:	4635      	mov	r5, r6
 80005d0:	46b3      	mov	fp, r6
 80005d2:	e7e4      	b.n	800059e <__ssprint_r+0x82>
 80005d4:	4650      	mov	r0, sl
 80005d6:	f000 fd47 	bl	8001068 <_realloc_r>
 80005da:	4603      	mov	r3, r0
 80005dc:	2800      	cmp	r0, #0
 80005de:	d1d4      	bne.n	800058a <__ssprint_r+0x6e>
 80005e0:	6921      	ldr	r1, [r4, #16]
 80005e2:	4650      	mov	r0, sl
 80005e4:	f000 fc86 	bl	8000ef4 <_free_r>
 80005e8:	230c      	movs	r3, #12
 80005ea:	f8ca 3000 	str.w	r3, [sl]
 80005ee:	89a3      	ldrh	r3, [r4, #12]
 80005f0:	2200      	movs	r2, #0
 80005f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005fa:	81a3      	strh	r3, [r4, #12]
 80005fc:	e9c8 2201 	strd	r2, r2, [r8, #4]
 8000600:	b003      	add	sp, #12
 8000602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000606:	2000      	movs	r0, #0
 8000608:	f8c8 0004 	str.w	r0, [r8, #4]
 800060c:	b003      	add	sp, #12
 800060e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000612:	bf00      	nop

08000614 <_svfiprintf_r>:
 8000614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000618:	4690      	mov	r8, r2
 800061a:	898a      	ldrh	r2, [r1, #12]
 800061c:	b09f      	sub	sp, #124	; 0x7c
 800061e:	0614      	lsls	r4, r2, #24
 8000620:	468b      	mov	fp, r1
 8000622:	9002      	str	r0, [sp, #8]
 8000624:	d503      	bpl.n	800062e <_svfiprintf_r+0x1a>
 8000626:	690a      	ldr	r2, [r1, #16]
 8000628:	2a00      	cmp	r2, #0
 800062a:	f000 810b 	beq.w	8000844 <_svfiprintf_r+0x230>
 800062e:	9305      	str	r3, [sp, #20]
 8000630:	2330      	movs	r3, #48	; 0x30
 8000632:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 8000636:	f898 3000 	ldrb.w	r3, [r8]
 800063a:	4e8e      	ldr	r6, [pc, #568]	; (8000874 <_svfiprintf_r+0x260>)
 800063c:	2100      	movs	r1, #0
 800063e:	2220      	movs	r2, #32
 8000640:	910b      	str	r1, [sp, #44]	; 0x2c
 8000642:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 8000646:	2701      	movs	r7, #1
 8000648:	2b00      	cmp	r3, #0
 800064a:	f000 8084 	beq.w	8000756 <_svfiprintf_r+0x142>
 800064e:	2b25      	cmp	r3, #37	; 0x25
 8000650:	f000 80f6 	beq.w	8000840 <_svfiprintf_r+0x22c>
 8000654:	4645      	mov	r5, r8
 8000656:	e003      	b.n	8000660 <_svfiprintf_r+0x4c>
 8000658:	2b25      	cmp	r3, #37	; 0x25
 800065a:	f000 8086 	beq.w	800076a <_svfiprintf_r+0x156>
 800065e:	4625      	mov	r5, r4
 8000660:	786b      	ldrb	r3, [r5, #1]
 8000662:	1c6c      	adds	r4, r5, #1
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1f7      	bne.n	8000658 <_svfiprintf_r+0x44>
 8000668:	ebb4 0a08 	subs.w	sl, r4, r8
 800066c:	d073      	beq.n	8000756 <_svfiprintf_r+0x142>
 800066e:	4642      	mov	r2, r8
 8000670:	4653      	mov	r3, sl
 8000672:	4659      	mov	r1, fp
 8000674:	9802      	ldr	r0, [sp, #8]
 8000676:	f7ff fef1 	bl	800045c <__ssputs_r>
 800067a:	3001      	adds	r0, #1
 800067c:	d06b      	beq.n	8000756 <_svfiprintf_r+0x142>
 800067e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000680:	786a      	ldrb	r2, [r5, #1]
 8000682:	4453      	add	r3, sl
 8000684:	930b      	str	r3, [sp, #44]	; 0x2c
 8000686:	2a00      	cmp	r2, #0
 8000688:	d065      	beq.n	8000756 <_svfiprintf_r+0x142>
 800068a:	2300      	movs	r3, #0
 800068c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000690:	3401      	adds	r4, #1
 8000692:	9306      	str	r3, [sp, #24]
 8000694:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8000698:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800069c:	931c      	str	r3, [sp, #112]	; 0x70
 800069e:	9207      	str	r2, [sp, #28]
 80006a0:	e005      	b.n	80006ae <_svfiprintf_r+0x9a>
 80006a2:	9a06      	ldr	r2, [sp, #24]
 80006a4:	fa07 f303 	lsl.w	r3, r7, r3
 80006a8:	4313      	orrs	r3, r2
 80006aa:	462c      	mov	r4, r5
 80006ac:	9306      	str	r3, [sp, #24]
 80006ae:	4625      	mov	r5, r4
 80006b0:	2205      	movs	r2, #5
 80006b2:	f815 1b01 	ldrb.w	r1, [r5], #1
 80006b6:	4630      	mov	r0, r6
 80006b8:	f000 faca 	bl	8000c50 <memchr>
 80006bc:	46aa      	mov	sl, r5
 80006be:	1b83      	subs	r3, r0, r6
 80006c0:	2800      	cmp	r0, #0
 80006c2:	d1ee      	bne.n	80006a2 <_svfiprintf_r+0x8e>
 80006c4:	9b06      	ldr	r3, [sp, #24]
 80006c6:	06d9      	lsls	r1, r3, #27
 80006c8:	bf44      	itt	mi
 80006ca:	2220      	movmi	r2, #32
 80006cc:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 80006d0:	7821      	ldrb	r1, [r4, #0]
 80006d2:	071a      	lsls	r2, r3, #28
 80006d4:	bf44      	itt	mi
 80006d6:	222b      	movmi	r2, #43	; 0x2b
 80006d8:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 80006dc:	292a      	cmp	r1, #42	; 0x2a
 80006de:	d148      	bne.n	8000772 <_svfiprintf_r+0x15e>
 80006e0:	9a05      	ldr	r2, [sp, #20]
 80006e2:	6811      	ldr	r1, [r2, #0]
 80006e4:	3204      	adds	r2, #4
 80006e6:	2900      	cmp	r1, #0
 80006e8:	9205      	str	r2, [sp, #20]
 80006ea:	db7e      	blt.n	80007ea <_svfiprintf_r+0x1d6>
 80006ec:	9109      	str	r1, [sp, #36]	; 0x24
 80006ee:	7861      	ldrb	r1, [r4, #1]
 80006f0:	1ca5      	adds	r5, r4, #2
 80006f2:	292e      	cmp	r1, #46	; 0x2e
 80006f4:	d056      	beq.n	80007a4 <_svfiprintf_r+0x190>
 80006f6:	4c60      	ldr	r4, [pc, #384]	; (8000878 <_svfiprintf_r+0x264>)
 80006f8:	2203      	movs	r2, #3
 80006fa:	4620      	mov	r0, r4
 80006fc:	f000 faa8 	bl	8000c50 <memchr>
 8000700:	2800      	cmp	r0, #0
 8000702:	d068      	beq.n	80007d6 <_svfiprintf_r+0x1c2>
 8000704:	1b00      	subs	r0, r0, r4
 8000706:	9b06      	ldr	r3, [sp, #24]
 8000708:	2440      	movs	r4, #64	; 0x40
 800070a:	fa04 f000 	lsl.w	r0, r4, r0
 800070e:	4303      	orrs	r3, r0
 8000710:	9306      	str	r3, [sp, #24]
 8000712:	f105 0801 	add.w	r8, r5, #1
 8000716:	7829      	ldrb	r1, [r5, #0]
 8000718:	4858      	ldr	r0, [pc, #352]	; (800087c <_svfiprintf_r+0x268>)
 800071a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 800071e:	2206      	movs	r2, #6
 8000720:	f000 fa96 	bl	8000c50 <memchr>
 8000724:	2800      	cmp	r0, #0
 8000726:	d066      	beq.n	80007f6 <_svfiprintf_r+0x1e2>
 8000728:	4b55      	ldr	r3, [pc, #340]	; (8000880 <_svfiprintf_r+0x26c>)
 800072a:	2b00      	cmp	r3, #0
 800072c:	d056      	beq.n	80007dc <_svfiprintf_r+0x1c8>
 800072e:	ab05      	add	r3, sp, #20
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	465a      	mov	r2, fp
 8000734:	4b53      	ldr	r3, [pc, #332]	; (8000884 <_svfiprintf_r+0x270>)
 8000736:	9802      	ldr	r0, [sp, #8]
 8000738:	a906      	add	r1, sp, #24
 800073a:	f3af 8000 	nop.w
 800073e:	4681      	mov	r9, r0
 8000740:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8000744:	d007      	beq.n	8000756 <_svfiprintf_r+0x142>
 8000746:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000748:	444b      	add	r3, r9
 800074a:	930b      	str	r3, [sp, #44]	; 0x2c
 800074c:	f898 3000 	ldrb.w	r3, [r8]
 8000750:	2b00      	cmp	r3, #0
 8000752:	f47f af7c 	bne.w	800064e <_svfiprintf_r+0x3a>
 8000756:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800075a:	065b      	lsls	r3, r3, #25
 800075c:	bf54      	ite	pl
 800075e:	980b      	ldrpl	r0, [sp, #44]	; 0x2c
 8000760:	f04f 30ff 	movmi.w	r0, #4294967295	; 0xffffffff
 8000764:	b01f      	add	sp, #124	; 0x7c
 8000766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800076a:	ebb4 0a08 	subs.w	sl, r4, r8
 800076e:	d08c      	beq.n	800068a <_svfiprintf_r+0x76>
 8000770:	e77d      	b.n	800066e <_svfiprintf_r+0x5a>
 8000772:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8000776:	2a09      	cmp	r2, #9
 8000778:	bf88      	it	hi
 800077a:	46a2      	movhi	sl, r4
 800077c:	d8b9      	bhi.n	80006f2 <_svfiprintf_r+0xde>
 800077e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000780:	e001      	b.n	8000786 <_svfiprintf_r+0x172>
 8000782:	462c      	mov	r4, r5
 8000784:	3501      	adds	r5, #1
 8000786:	7829      	ldrb	r1, [r5, #0]
 8000788:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800078c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000790:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8000794:	2a09      	cmp	r2, #9
 8000796:	46aa      	mov	sl, r5
 8000798:	d9f3      	bls.n	8000782 <_svfiprintf_r+0x16e>
 800079a:	292e      	cmp	r1, #46	; 0x2e
 800079c:	f104 0502 	add.w	r5, r4, #2
 80007a0:	9309      	str	r3, [sp, #36]	; 0x24
 80007a2:	d1a8      	bne.n	80006f6 <_svfiprintf_r+0xe2>
 80007a4:	f89a 1001 	ldrb.w	r1, [sl, #1]
 80007a8:	292a      	cmp	r1, #42	; 0x2a
 80007aa:	d12e      	bne.n	800080a <_svfiprintf_r+0x1f6>
 80007ac:	9b05      	ldr	r3, [sp, #20]
 80007ae:	f89a 1002 	ldrb.w	r1, [sl, #2]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	9207      	str	r2, [sp, #28]
 80007b6:	3304      	adds	r3, #4
 80007b8:	2a00      	cmp	r2, #0
 80007ba:	9305      	str	r3, [sp, #20]
 80007bc:	f10a 0503 	add.w	r5, sl, #3
 80007c0:	f10a 0302 	add.w	r3, sl, #2
 80007c4:	db37      	blt.n	8000836 <_svfiprintf_r+0x222>
 80007c6:	4c2c      	ldr	r4, [pc, #176]	; (8000878 <_svfiprintf_r+0x264>)
 80007c8:	2203      	movs	r2, #3
 80007ca:	4620      	mov	r0, r4
 80007cc:	469a      	mov	sl, r3
 80007ce:	f000 fa3f 	bl	8000c50 <memchr>
 80007d2:	2800      	cmp	r0, #0
 80007d4:	d196      	bne.n	8000704 <_svfiprintf_r+0xf0>
 80007d6:	46a8      	mov	r8, r5
 80007d8:	4655      	mov	r5, sl
 80007da:	e79c      	b.n	8000716 <_svfiprintf_r+0x102>
 80007dc:	9b05      	ldr	r3, [sp, #20]
 80007de:	3307      	adds	r3, #7
 80007e0:	f023 0307 	bic.w	r3, r3, #7
 80007e4:	3308      	adds	r3, #8
 80007e6:	9305      	str	r3, [sp, #20]
 80007e8:	e7ad      	b.n	8000746 <_svfiprintf_r+0x132>
 80007ea:	4249      	negs	r1, r1
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	9109      	str	r1, [sp, #36]	; 0x24
 80007f2:	9306      	str	r3, [sp, #24]
 80007f4:	e77b      	b.n	80006ee <_svfiprintf_r+0xda>
 80007f6:	ab05      	add	r3, sp, #20
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	465a      	mov	r2, fp
 80007fc:	4b21      	ldr	r3, [pc, #132]	; (8000884 <_svfiprintf_r+0x270>)
 80007fe:	9802      	ldr	r0, [sp, #8]
 8000800:	a906      	add	r1, sp, #24
 8000802:	f000 f8d7 	bl	80009b4 <_printf_i>
 8000806:	4681      	mov	r9, r0
 8000808:	e79a      	b.n	8000740 <_svfiprintf_r+0x12c>
 800080a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800080e:	2300      	movs	r3, #0
 8000810:	2a09      	cmp	r2, #9
 8000812:	9307      	str	r3, [sp, #28]
 8000814:	d901      	bls.n	800081a <_svfiprintf_r+0x206>
 8000816:	e023      	b.n	8000860 <_svfiprintf_r+0x24c>
 8000818:	4655      	mov	r5, sl
 800081a:	7869      	ldrb	r1, [r5, #1]
 800081c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000820:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000824:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8000828:	2a09      	cmp	r2, #9
 800082a:	f105 0a01 	add.w	sl, r5, #1
 800082e:	d9f3      	bls.n	8000818 <_svfiprintf_r+0x204>
 8000830:	3502      	adds	r5, #2
 8000832:	9307      	str	r3, [sp, #28]
 8000834:	e75f      	b.n	80006f6 <_svfiprintf_r+0xe2>
 8000836:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800083a:	469a      	mov	sl, r3
 800083c:	9207      	str	r2, [sp, #28]
 800083e:	e75a      	b.n	80006f6 <_svfiprintf_r+0xe2>
 8000840:	4644      	mov	r4, r8
 8000842:	e722      	b.n	800068a <_svfiprintf_r+0x76>
 8000844:	2140      	movs	r1, #64	; 0x40
 8000846:	9303      	str	r3, [sp, #12]
 8000848:	f000 fbaa 	bl	8000fa0 <_malloc_r>
 800084c:	9b03      	ldr	r3, [sp, #12]
 800084e:	f8cb 0000 	str.w	r0, [fp]
 8000852:	f8cb 0010 	str.w	r0, [fp, #16]
 8000856:	b130      	cbz	r0, 8000866 <_svfiprintf_r+0x252>
 8000858:	2240      	movs	r2, #64	; 0x40
 800085a:	f8cb 2014 	str.w	r2, [fp, #20]
 800085e:	e6e6      	b.n	800062e <_svfiprintf_r+0x1a>
 8000860:	46aa      	mov	sl, r5
 8000862:	3501      	adds	r5, #1
 8000864:	e747      	b.n	80006f6 <_svfiprintf_r+0xe2>
 8000866:	9a02      	ldr	r2, [sp, #8]
 8000868:	230c      	movs	r3, #12
 800086a:	6013      	str	r3, [r2, #0]
 800086c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000870:	e778      	b.n	8000764 <_svfiprintf_r+0x150>
 8000872:	bf00      	nop
 8000874:	08003ab4 	.word	0x08003ab4
 8000878:	08003abc 	.word	0x08003abc
 800087c:	08003ac0 	.word	0x08003ac0
 8000880:	00000000 	.word	0x00000000
 8000884:	0800045d 	.word	0x0800045d

08000888 <_printf_common>:
 8000888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800088c:	460c      	mov	r4, r1
 800088e:	4691      	mov	r9, r2
 8000890:	690a      	ldr	r2, [r1, #16]
 8000892:	6889      	ldr	r1, [r1, #8]
 8000894:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000898:	428a      	cmp	r2, r1
 800089a:	bfb8      	it	lt
 800089c:	460a      	movlt	r2, r1
 800089e:	f8c9 2000 	str.w	r2, [r9]
 80008a2:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 80008a6:	4606      	mov	r6, r0
 80008a8:	461f      	mov	r7, r3
 80008aa:	b111      	cbz	r1, 80008b2 <_printf_common+0x2a>
 80008ac:	3201      	adds	r2, #1
 80008ae:	f8c9 2000 	str.w	r2, [r9]
 80008b2:	6823      	ldr	r3, [r4, #0]
 80008b4:	0699      	lsls	r1, r3, #26
 80008b6:	d55c      	bpl.n	8000972 <_printf_common+0xea>
 80008b8:	f8d9 2000 	ldr.w	r2, [r9]
 80008bc:	3202      	adds	r2, #2
 80008be:	f8c9 2000 	str.w	r2, [r9]
 80008c2:	6823      	ldr	r3, [r4, #0]
 80008c4:	f013 0f06 	tst.w	r3, #6
 80008c8:	4619      	mov	r1, r3
 80008ca:	d11d      	bne.n	8000908 <_printf_common+0x80>
 80008cc:	68e1      	ldr	r1, [r4, #12]
 80008ce:	1a8a      	subs	r2, r1, r2
 80008d0:	2a00      	cmp	r2, #0
 80008d2:	bfd8      	it	le
 80008d4:	4619      	movle	r1, r3
 80008d6:	dd17      	ble.n	8000908 <_printf_common+0x80>
 80008d8:	f104 0a19 	add.w	sl, r4, #25
 80008dc:	2500      	movs	r5, #0
 80008de:	e005      	b.n	80008ec <_printf_common+0x64>
 80008e0:	68e3      	ldr	r3, [r4, #12]
 80008e2:	f8d9 2000 	ldr.w	r2, [r9]
 80008e6:	1a9b      	subs	r3, r3, r2
 80008e8:	42ab      	cmp	r3, r5
 80008ea:	dd0c      	ble.n	8000906 <_printf_common+0x7e>
 80008ec:	2301      	movs	r3, #1
 80008ee:	4652      	mov	r2, sl
 80008f0:	4639      	mov	r1, r7
 80008f2:	4630      	mov	r0, r6
 80008f4:	47c0      	blx	r8
 80008f6:	3001      	adds	r0, #1
 80008f8:	f105 0501 	add.w	r5, r5, #1
 80008fc:	d1f0      	bne.n	80008e0 <_printf_common+0x58>
 80008fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000906:	6821      	ldr	r1, [r4, #0]
 8000908:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800090c:	3300      	adds	r3, #0
 800090e:	bf18      	it	ne
 8000910:	2301      	movne	r3, #1
 8000912:	068a      	lsls	r2, r1, #26
 8000914:	d50a      	bpl.n	800092c <_printf_common+0xa4>
 8000916:	18e1      	adds	r1, r4, r3
 8000918:	1c5a      	adds	r2, r3, #1
 800091a:	2030      	movs	r0, #48	; 0x30
 800091c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000920:	4422      	add	r2, r4
 8000922:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000926:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800092a:	3302      	adds	r3, #2
 800092c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000930:	4639      	mov	r1, r7
 8000932:	4630      	mov	r0, r6
 8000934:	47c0      	blx	r8
 8000936:	3001      	adds	r0, #1
 8000938:	d0e1      	beq.n	80008fe <_printf_common+0x76>
 800093a:	6823      	ldr	r3, [r4, #0]
 800093c:	68a2      	ldr	r2, [r4, #8]
 800093e:	6921      	ldr	r1, [r4, #16]
 8000940:	f003 0306 	and.w	r3, r3, #6
 8000944:	2b04      	cmp	r3, #4
 8000946:	d01d      	beq.n	8000984 <_printf_common+0xfc>
 8000948:	428a      	cmp	r2, r1
 800094a:	dd26      	ble.n	800099a <_printf_common+0x112>
 800094c:	f04f 0900 	mov.w	r9, #0
 8000950:	1a52      	subs	r2, r2, r1
 8000952:	4491      	add	r9, r2
 8000954:	341a      	adds	r4, #26
 8000956:	2500      	movs	r5, #0
 8000958:	e001      	b.n	800095e <_printf_common+0xd6>
 800095a:	454d      	cmp	r5, r9
 800095c:	da1d      	bge.n	800099a <_printf_common+0x112>
 800095e:	2301      	movs	r3, #1
 8000960:	4622      	mov	r2, r4
 8000962:	4639      	mov	r1, r7
 8000964:	4630      	mov	r0, r6
 8000966:	47c0      	blx	r8
 8000968:	3001      	adds	r0, #1
 800096a:	f105 0501 	add.w	r5, r5, #1
 800096e:	d1f4      	bne.n	800095a <_printf_common+0xd2>
 8000970:	e7c5      	b.n	80008fe <_printf_common+0x76>
 8000972:	f013 0f06 	tst.w	r3, #6
 8000976:	d013      	beq.n	80009a0 <_printf_common+0x118>
 8000978:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800097c:	3300      	adds	r3, #0
 800097e:	bf18      	it	ne
 8000980:	2301      	movne	r3, #1
 8000982:	e7d3      	b.n	800092c <_printf_common+0xa4>
 8000984:	f8d9 0000 	ldr.w	r0, [r9]
 8000988:	68e3      	ldr	r3, [r4, #12]
 800098a:	428a      	cmp	r2, r1
 800098c:	eba3 0300 	sub.w	r3, r3, r0
 8000990:	ea23 79e3 	bic.w	r9, r3, r3, asr #31
 8000994:	dcdc      	bgt.n	8000950 <_printf_common+0xc8>
 8000996:	2b00      	cmp	r3, #0
 8000998:	dcdc      	bgt.n	8000954 <_printf_common+0xcc>
 800099a:	2000      	movs	r0, #0
 800099c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a0:	68e1      	ldr	r1, [r4, #12]
 80009a2:	f8d9 2000 	ldr.w	r2, [r9]
 80009a6:	1a8a      	subs	r2, r1, r2
 80009a8:	2a00      	cmp	r2, #0
 80009aa:	bfd8      	it	le
 80009ac:	4619      	movle	r1, r3
 80009ae:	dc93      	bgt.n	80008d8 <_printf_common+0x50>
 80009b0:	e7aa      	b.n	8000908 <_printf_common+0x80>
 80009b2:	bf00      	nop

080009b4 <_printf_i>:
 80009b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009b8:	460c      	mov	r4, r1
 80009ba:	7e09      	ldrb	r1, [r1, #24]
 80009bc:	b085      	sub	sp, #20
 80009be:	296e      	cmp	r1, #110	; 0x6e
 80009c0:	4606      	mov	r6, r0
 80009c2:	4617      	mov	r7, r2
 80009c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80009c6:	4698      	mov	r8, r3
 80009c8:	f104 0e43 	add.w	lr, r4, #67	; 0x43
 80009cc:	d06d      	beq.n	8000aaa <_printf_i+0xf6>
 80009ce:	d939      	bls.n	8000a44 <_printf_i+0x90>
 80009d0:	2973      	cmp	r1, #115	; 0x73
 80009d2:	f000 80f6 	beq.w	8000bc2 <_printf_i+0x20e>
 80009d6:	d944      	bls.n	8000a62 <_printf_i+0xae>
 80009d8:	2975      	cmp	r1, #117	; 0x75
 80009da:	f000 8104 	beq.w	8000be6 <_printf_i+0x232>
 80009de:	2978      	cmp	r1, #120	; 0x78
 80009e0:	f040 8111 	bne.w	8000c06 <_printf_i+0x252>
 80009e4:	2378      	movs	r3, #120	; 0x78
 80009e6:	6822      	ldr	r2, [r4, #0]
 80009e8:	f8df c258 	ldr.w	ip, [pc, #600]	; 8000c44 <_printf_i+0x290>
 80009ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80009f0:	6801      	ldr	r1, [r0, #0]
 80009f2:	0615      	lsls	r5, r2, #24
 80009f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80009f8:	6001      	str	r1, [r0, #0]
 80009fa:	f140 80a1 	bpl.w	8000b40 <_printf_i+0x18c>
 80009fe:	07d1      	lsls	r1, r2, #31
 8000a00:	bf44      	itt	mi
 8000a02:	f042 0220 	orrmi.w	r2, r2, #32
 8000a06:	6022      	strmi	r2, [r4, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	f000 8093 	beq.w	8000b34 <_printf_i+0x180>
 8000a0e:	2210      	movs	r2, #16
 8000a10:	2100      	movs	r1, #0
 8000a12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000a16:	6860      	ldr	r0, [r4, #4]
 8000a18:	60a0      	str	r0, [r4, #8]
 8000a1a:	2800      	cmp	r0, #0
 8000a1c:	f2c0 80c8 	blt.w	8000bb0 <_printf_i+0x1fc>
 8000a20:	6821      	ldr	r1, [r4, #0]
 8000a22:	f021 0104 	bic.w	r1, r1, #4
 8000a26:	6021      	str	r1, [r4, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	f040 80a3 	bne.w	8000b74 <_printf_i+0x1c0>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	f040 80c0 	bne.w	8000bb4 <_printf_i+0x200>
 8000a34:	4675      	mov	r5, lr
 8000a36:	2a08      	cmp	r2, #8
 8000a38:	f000 80ac 	beq.w	8000b94 <_printf_i+0x1e0>
 8000a3c:	ebae 0305 	sub.w	r3, lr, r5
 8000a40:	6123      	str	r3, [r4, #16]
 8000a42:	e041      	b.n	8000ac8 <_printf_i+0x114>
 8000a44:	2963      	cmp	r1, #99	; 0x63
 8000a46:	f000 80e5 	beq.w	8000c14 <_printf_i+0x260>
 8000a4a:	d81a      	bhi.n	8000a82 <_printf_i+0xce>
 8000a4c:	2900      	cmp	r1, #0
 8000a4e:	d038      	beq.n	8000ac2 <_printf_i+0x10e>
 8000a50:	2958      	cmp	r1, #88	; 0x58
 8000a52:	f040 80d8 	bne.w	8000c06 <_printf_i+0x252>
 8000a56:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8000a5a:	6822      	ldr	r2, [r4, #0]
 8000a5c:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 8000c48 <_printf_i+0x294>
 8000a60:	e7c6      	b.n	80009f0 <_printf_i+0x3c>
 8000a62:	296f      	cmp	r1, #111	; 0x6f
 8000a64:	f000 80bf 	beq.w	8000be6 <_printf_i+0x232>
 8000a68:	2970      	cmp	r1, #112	; 0x70
 8000a6a:	f040 80cc 	bne.w	8000c06 <_printf_i+0x252>
 8000a6e:	6822      	ldr	r2, [r4, #0]
 8000a70:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 8000c44 <_printf_i+0x290>
 8000a74:	f042 0220 	orr.w	r2, r2, #32
 8000a78:	2378      	movs	r3, #120	; 0x78
 8000a7a:	6022      	str	r2, [r4, #0]
 8000a7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000a80:	e7b6      	b.n	80009f0 <_printf_i+0x3c>
 8000a82:	2964      	cmp	r1, #100	; 0x64
 8000a84:	d002      	beq.n	8000a8c <_printf_i+0xd8>
 8000a86:	2969      	cmp	r1, #105	; 0x69
 8000a88:	f040 80bd 	bne.w	8000c06 <_printf_i+0x252>
 8000a8c:	6822      	ldr	r2, [r4, #0]
 8000a8e:	6803      	ldr	r3, [r0, #0]
 8000a90:	0611      	lsls	r1, r2, #24
 8000a92:	f103 0504 	add.w	r5, r3, #4
 8000a96:	d557      	bpl.n	8000b48 <_printf_i+0x194>
 8000a98:	6819      	ldr	r1, [r3, #0]
 8000a9a:	6005      	str	r5, [r0, #0]
 8000a9c:	460b      	mov	r3, r1
 8000a9e:	2900      	cmp	r1, #0
 8000aa0:	db59      	blt.n	8000b56 <_printf_i+0x1a2>
 8000aa2:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000c48 <_printf_i+0x294>
 8000aa6:	220a      	movs	r2, #10
 8000aa8:	e7b5      	b.n	8000a16 <_printf_i+0x62>
 8000aaa:	6803      	ldr	r3, [r0, #0]
 8000aac:	6822      	ldr	r2, [r4, #0]
 8000aae:	6961      	ldr	r1, [r4, #20]
 8000ab0:	1d1d      	adds	r5, r3, #4
 8000ab2:	6005      	str	r5, [r0, #0]
 8000ab4:	0615      	lsls	r5, r2, #24
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	d402      	bmi.n	8000ac0 <_printf_i+0x10c>
 8000aba:	0650      	lsls	r0, r2, #25
 8000abc:	f100 80bd 	bmi.w	8000c3a <_printf_i+0x286>
 8000ac0:	6019      	str	r1, [r3, #0]
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	4675      	mov	r5, lr
 8000ac6:	6123      	str	r3, [r4, #16]
 8000ac8:	f8cd 8000 	str.w	r8, [sp]
 8000acc:	463b      	mov	r3, r7
 8000ace:	aa03      	add	r2, sp, #12
 8000ad0:	4621      	mov	r1, r4
 8000ad2:	4630      	mov	r0, r6
 8000ad4:	f7ff fed8 	bl	8000888 <_printf_common>
 8000ad8:	3001      	adds	r0, #1
 8000ada:	d020      	beq.n	8000b1e <_printf_i+0x16a>
 8000adc:	462a      	mov	r2, r5
 8000ade:	6923      	ldr	r3, [r4, #16]
 8000ae0:	4639      	mov	r1, r7
 8000ae2:	4630      	mov	r0, r6
 8000ae4:	47c0      	blx	r8
 8000ae6:	3001      	adds	r0, #1
 8000ae8:	d019      	beq.n	8000b1e <_printf_i+0x16a>
 8000aea:	6822      	ldr	r2, [r4, #0]
 8000aec:	9803      	ldr	r0, [sp, #12]
 8000aee:	68e3      	ldr	r3, [r4, #12]
 8000af0:	0792      	lsls	r2, r2, #30
 8000af2:	d519      	bpl.n	8000b28 <_printf_i+0x174>
 8000af4:	1a1a      	subs	r2, r3, r0
 8000af6:	2a00      	cmp	r2, #0
 8000af8:	dd16      	ble.n	8000b28 <_printf_i+0x174>
 8000afa:	f104 0919 	add.w	r9, r4, #25
 8000afe:	2500      	movs	r5, #0
 8000b00:	e004      	b.n	8000b0c <_printf_i+0x158>
 8000b02:	68e3      	ldr	r3, [r4, #12]
 8000b04:	9803      	ldr	r0, [sp, #12]
 8000b06:	1a1a      	subs	r2, r3, r0
 8000b08:	42aa      	cmp	r2, r5
 8000b0a:	dd0d      	ble.n	8000b28 <_printf_i+0x174>
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	464a      	mov	r2, r9
 8000b10:	4639      	mov	r1, r7
 8000b12:	4630      	mov	r0, r6
 8000b14:	47c0      	blx	r8
 8000b16:	3001      	adds	r0, #1
 8000b18:	f105 0501 	add.w	r5, r5, #1
 8000b1c:	d1f1      	bne.n	8000b02 <_printf_i+0x14e>
 8000b1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b22:	b005      	add	sp, #20
 8000b24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b28:	4298      	cmp	r0, r3
 8000b2a:	bfb8      	it	lt
 8000b2c:	4618      	movlt	r0, r3
 8000b2e:	b005      	add	sp, #20
 8000b30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b34:	6822      	ldr	r2, [r4, #0]
 8000b36:	f022 0220 	bic.w	r2, r2, #32
 8000b3a:	6022      	str	r2, [r4, #0]
 8000b3c:	2210      	movs	r2, #16
 8000b3e:	e767      	b.n	8000a10 <_printf_i+0x5c>
 8000b40:	0650      	lsls	r0, r2, #25
 8000b42:	bf48      	it	mi
 8000b44:	b29b      	uxthmi	r3, r3
 8000b46:	e75a      	b.n	80009fe <_printf_i+0x4a>
 8000b48:	0651      	lsls	r1, r2, #25
 8000b4a:	d5a5      	bpl.n	8000a98 <_printf_i+0xe4>
 8000b4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b50:	6005      	str	r5, [r0, #0]
 8000b52:	4619      	mov	r1, r3
 8000b54:	e7a3      	b.n	8000a9e <_printf_i+0xea>
 8000b56:	6861      	ldr	r1, [r4, #4]
 8000b58:	60a1      	str	r1, [r4, #8]
 8000b5a:	202d      	movs	r0, #45	; 0x2d
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	f1c3 0300 	rsb	r3, r3, #0
 8000b62:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8000b66:	db02      	blt.n	8000b6e <_printf_i+0x1ba>
 8000b68:	f022 0204 	bic.w	r2, r2, #4
 8000b6c:	6022      	str	r2, [r4, #0]
 8000b6e:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 8000c48 <_printf_i+0x294>
 8000b72:	220a      	movs	r2, #10
 8000b74:	4675      	mov	r5, lr
 8000b76:	e000      	b.n	8000b7a <_printf_i+0x1c6>
 8000b78:	460b      	mov	r3, r1
 8000b7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b7e:	fb02 3011 	mls	r0, r2, r1, r3
 8000b82:	4293      	cmp	r3, r2
 8000b84:	f81c 0000 	ldrb.w	r0, [ip, r0]
 8000b88:	f805 0d01 	strb.w	r0, [r5, #-1]!
 8000b8c:	d2f4      	bcs.n	8000b78 <_printf_i+0x1c4>
 8000b8e:	2a08      	cmp	r2, #8
 8000b90:	f47f af54 	bne.w	8000a3c <_printf_i+0x88>
 8000b94:	6823      	ldr	r3, [r4, #0]
 8000b96:	07db      	lsls	r3, r3, #31
 8000b98:	f57f af50 	bpl.w	8000a3c <_printf_i+0x88>
 8000b9c:	6862      	ldr	r2, [r4, #4]
 8000b9e:	6923      	ldr	r3, [r4, #16]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	f73f af4b 	bgt.w	8000a3c <_printf_i+0x88>
 8000ba6:	2330      	movs	r3, #48	; 0x30
 8000ba8:	f805 3c01 	strb.w	r3, [r5, #-1]
 8000bac:	3d01      	subs	r5, #1
 8000bae:	e745      	b.n	8000a3c <_printf_i+0x88>
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d1df      	bne.n	8000b74 <_printf_i+0x1c0>
 8000bb4:	f89c 3000 	ldrb.w	r3, [ip]
 8000bb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000bc0:	e739      	b.n	8000a36 <_printf_i+0x82>
 8000bc2:	6803      	ldr	r3, [r0, #0]
 8000bc4:	6862      	ldr	r2, [r4, #4]
 8000bc6:	1d19      	adds	r1, r3, #4
 8000bc8:	6001      	str	r1, [r0, #0]
 8000bca:	681d      	ldr	r5, [r3, #0]
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4628      	mov	r0, r5
 8000bd0:	f000 f83e 	bl	8000c50 <memchr>
 8000bd4:	2800      	cmp	r0, #0
 8000bd6:	d032      	beq.n	8000c3e <_printf_i+0x28a>
 8000bd8:	1b40      	subs	r0, r0, r5
 8000bda:	6060      	str	r0, [r4, #4]
 8000bdc:	6120      	str	r0, [r4, #16]
 8000bde:	2300      	movs	r3, #0
 8000be0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000be4:	e770      	b.n	8000ac8 <_printf_i+0x114>
 8000be6:	6822      	ldr	r2, [r4, #0]
 8000be8:	6803      	ldr	r3, [r0, #0]
 8000bea:	f012 0f80 	tst.w	r2, #128	; 0x80
 8000bee:	f103 0504 	add.w	r5, r3, #4
 8000bf2:	d01a      	beq.n	8000c2a <_printf_i+0x276>
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	6005      	str	r5, [r0, #0]
 8000bf8:	296f      	cmp	r1, #111	; 0x6f
 8000bfa:	bf0c      	ite	eq
 8000bfc:	2208      	moveq	r2, #8
 8000bfe:	220a      	movne	r2, #10
 8000c00:	f8df c044 	ldr.w	ip, [pc, #68]	; 8000c48 <_printf_i+0x294>
 8000c04:	e704      	b.n	8000a10 <_printf_i+0x5c>
 8000c06:	2301      	movs	r3, #1
 8000c08:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8000c0c:	6123      	str	r3, [r4, #16]
 8000c0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000c12:	e7e4      	b.n	8000bde <_printf_i+0x22a>
 8000c14:	6803      	ldr	r3, [r0, #0]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	1d19      	adds	r1, r3, #4
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	6001      	str	r1, [r0, #0]
 8000c1e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000c22:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8000c26:	6123      	str	r3, [r4, #16]
 8000c28:	e7d9      	b.n	8000bde <_printf_i+0x22a>
 8000c2a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000c2e:	bf0d      	iteet	eq
 8000c30:	681b      	ldreq	r3, [r3, #0]
 8000c32:	6005      	strne	r5, [r0, #0]
 8000c34:	881b      	ldrhne	r3, [r3, #0]
 8000c36:	6005      	streq	r5, [r0, #0]
 8000c38:	e7de      	b.n	8000bf8 <_printf_i+0x244>
 8000c3a:	8019      	strh	r1, [r3, #0]
 8000c3c:	e741      	b.n	8000ac2 <_printf_i+0x10e>
 8000c3e:	6860      	ldr	r0, [r4, #4]
 8000c40:	e7cc      	b.n	8000bdc <_printf_i+0x228>
 8000c42:	bf00      	nop
 8000c44:	08003adc 	.word	0x08003adc
 8000c48:	08003ac8 	.word	0x08003ac8
 8000c4c:	00000000 	.word	0x00000000

08000c50 <memchr>:
 8000c50:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000c54:	2a10      	cmp	r2, #16
 8000c56:	db2b      	blt.n	8000cb0 <memchr+0x60>
 8000c58:	f010 0f07 	tst.w	r0, #7
 8000c5c:	d008      	beq.n	8000c70 <memchr+0x20>
 8000c5e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000c62:	3a01      	subs	r2, #1
 8000c64:	428b      	cmp	r3, r1
 8000c66:	d02d      	beq.n	8000cc4 <memchr+0x74>
 8000c68:	f010 0f07 	tst.w	r0, #7
 8000c6c:	b342      	cbz	r2, 8000cc0 <memchr+0x70>
 8000c6e:	d1f6      	bne.n	8000c5e <memchr+0xe>
 8000c70:	b4f0      	push	{r4, r5, r6, r7}
 8000c72:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000c76:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8000c7a:	f022 0407 	bic.w	r4, r2, #7
 8000c7e:	f07f 0700 	mvns.w	r7, #0
 8000c82:	2300      	movs	r3, #0
 8000c84:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000c88:	3c08      	subs	r4, #8
 8000c8a:	ea85 0501 	eor.w	r5, r5, r1
 8000c8e:	ea86 0601 	eor.w	r6, r6, r1
 8000c92:	fa85 f547 	uadd8	r5, r5, r7
 8000c96:	faa3 f587 	sel	r5, r3, r7
 8000c9a:	fa86 f647 	uadd8	r6, r6, r7
 8000c9e:	faa5 f687 	sel	r6, r5, r7
 8000ca2:	b98e      	cbnz	r6, 8000cc8 <memchr+0x78>
 8000ca4:	d1ee      	bne.n	8000c84 <memchr+0x34>
 8000ca6:	bcf0      	pop	{r4, r5, r6, r7}
 8000ca8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000cac:	f002 0207 	and.w	r2, r2, #7
 8000cb0:	b132      	cbz	r2, 8000cc0 <memchr+0x70>
 8000cb2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000cb6:	3a01      	subs	r2, #1
 8000cb8:	ea83 0301 	eor.w	r3, r3, r1
 8000cbc:	b113      	cbz	r3, 8000cc4 <memchr+0x74>
 8000cbe:	d1f8      	bne.n	8000cb2 <memchr+0x62>
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	4770      	bx	lr
 8000cc4:	3801      	subs	r0, #1
 8000cc6:	4770      	bx	lr
 8000cc8:	2d00      	cmp	r5, #0
 8000cca:	bf06      	itte	eq
 8000ccc:	4635      	moveq	r5, r6
 8000cce:	3803      	subeq	r0, #3
 8000cd0:	3807      	subne	r0, #7
 8000cd2:	f015 0f01 	tst.w	r5, #1
 8000cd6:	d107      	bne.n	8000ce8 <memchr+0x98>
 8000cd8:	3001      	adds	r0, #1
 8000cda:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000cde:	bf02      	ittt	eq
 8000ce0:	3001      	addeq	r0, #1
 8000ce2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000ce6:	3001      	addeq	r0, #1
 8000ce8:	bcf0      	pop	{r4, r5, r6, r7}
 8000cea:	3801      	subs	r0, #1
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <memcpy>:
 8000cf0:	4684      	mov	ip, r0
 8000cf2:	ea41 0300 	orr.w	r3, r1, r0
 8000cf6:	f013 0303 	ands.w	r3, r3, #3
 8000cfa:	d16d      	bne.n	8000dd8 <memcpy+0xe8>
 8000cfc:	3a40      	subs	r2, #64	; 0x40
 8000cfe:	d341      	bcc.n	8000d84 <memcpy+0x94>
 8000d00:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d04:	f840 3b04 	str.w	r3, [r0], #4
 8000d08:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d0c:	f840 3b04 	str.w	r3, [r0], #4
 8000d10:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d14:	f840 3b04 	str.w	r3, [r0], #4
 8000d18:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d1c:	f840 3b04 	str.w	r3, [r0], #4
 8000d20:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d24:	f840 3b04 	str.w	r3, [r0], #4
 8000d28:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d2c:	f840 3b04 	str.w	r3, [r0], #4
 8000d30:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d34:	f840 3b04 	str.w	r3, [r0], #4
 8000d38:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d3c:	f840 3b04 	str.w	r3, [r0], #4
 8000d40:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d44:	f840 3b04 	str.w	r3, [r0], #4
 8000d48:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d4c:	f840 3b04 	str.w	r3, [r0], #4
 8000d50:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d54:	f840 3b04 	str.w	r3, [r0], #4
 8000d58:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d5c:	f840 3b04 	str.w	r3, [r0], #4
 8000d60:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d64:	f840 3b04 	str.w	r3, [r0], #4
 8000d68:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d6c:	f840 3b04 	str.w	r3, [r0], #4
 8000d70:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d74:	f840 3b04 	str.w	r3, [r0], #4
 8000d78:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d7c:	f840 3b04 	str.w	r3, [r0], #4
 8000d80:	3a40      	subs	r2, #64	; 0x40
 8000d82:	d2bd      	bcs.n	8000d00 <memcpy+0x10>
 8000d84:	3230      	adds	r2, #48	; 0x30
 8000d86:	d311      	bcc.n	8000dac <memcpy+0xbc>
 8000d88:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d8c:	f840 3b04 	str.w	r3, [r0], #4
 8000d90:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d94:	f840 3b04 	str.w	r3, [r0], #4
 8000d98:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d9c:	f840 3b04 	str.w	r3, [r0], #4
 8000da0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000da4:	f840 3b04 	str.w	r3, [r0], #4
 8000da8:	3a10      	subs	r2, #16
 8000daa:	d2ed      	bcs.n	8000d88 <memcpy+0x98>
 8000dac:	320c      	adds	r2, #12
 8000dae:	d305      	bcc.n	8000dbc <memcpy+0xcc>
 8000db0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000db4:	f840 3b04 	str.w	r3, [r0], #4
 8000db8:	3a04      	subs	r2, #4
 8000dba:	d2f9      	bcs.n	8000db0 <memcpy+0xc0>
 8000dbc:	3204      	adds	r2, #4
 8000dbe:	d008      	beq.n	8000dd2 <memcpy+0xe2>
 8000dc0:	07d2      	lsls	r2, r2, #31
 8000dc2:	bf1c      	itt	ne
 8000dc4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000dc8:	f800 3b01 	strbne.w	r3, [r0], #1
 8000dcc:	d301      	bcc.n	8000dd2 <memcpy+0xe2>
 8000dce:	880b      	ldrh	r3, [r1, #0]
 8000dd0:	8003      	strh	r3, [r0, #0]
 8000dd2:	4660      	mov	r0, ip
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	2a08      	cmp	r2, #8
 8000dda:	d313      	bcc.n	8000e04 <memcpy+0x114>
 8000ddc:	078b      	lsls	r3, r1, #30
 8000dde:	d08d      	beq.n	8000cfc <memcpy+0xc>
 8000de0:	f010 0303 	ands.w	r3, r0, #3
 8000de4:	d08a      	beq.n	8000cfc <memcpy+0xc>
 8000de6:	f1c3 0304 	rsb	r3, r3, #4
 8000dea:	1ad2      	subs	r2, r2, r3
 8000dec:	07db      	lsls	r3, r3, #31
 8000dee:	bf1c      	itt	ne
 8000df0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000df4:	f800 3b01 	strbne.w	r3, [r0], #1
 8000df8:	d380      	bcc.n	8000cfc <memcpy+0xc>
 8000dfa:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000dfe:	f820 3b02 	strh.w	r3, [r0], #2
 8000e02:	e77b      	b.n	8000cfc <memcpy+0xc>
 8000e04:	3a04      	subs	r2, #4
 8000e06:	d3d9      	bcc.n	8000dbc <memcpy+0xcc>
 8000e08:	3a01      	subs	r2, #1
 8000e0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e0e:	f800 3b01 	strb.w	r3, [r0], #1
 8000e12:	d2f9      	bcs.n	8000e08 <memcpy+0x118>
 8000e14:	780b      	ldrb	r3, [r1, #0]
 8000e16:	7003      	strb	r3, [r0, #0]
 8000e18:	784b      	ldrb	r3, [r1, #1]
 8000e1a:	7043      	strb	r3, [r0, #1]
 8000e1c:	788b      	ldrb	r3, [r1, #2]
 8000e1e:	7083      	strb	r3, [r0, #2]
 8000e20:	4660      	mov	r0, ip
 8000e22:	4770      	bx	lr

08000e24 <memmove>:
 8000e24:	4288      	cmp	r0, r1
 8000e26:	b4f0      	push	{r4, r5, r6, r7}
 8000e28:	d90d      	bls.n	8000e46 <memmove+0x22>
 8000e2a:	188b      	adds	r3, r1, r2
 8000e2c:	4283      	cmp	r3, r0
 8000e2e:	d90a      	bls.n	8000e46 <memmove+0x22>
 8000e30:	1884      	adds	r4, r0, r2
 8000e32:	b132      	cbz	r2, 8000e42 <memmove+0x1e>
 8000e34:	4622      	mov	r2, r4
 8000e36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000e3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d1f9      	bne.n	8000e36 <memmove+0x12>
 8000e42:	bcf0      	pop	{r4, r5, r6, r7}
 8000e44:	4770      	bx	lr
 8000e46:	2a0f      	cmp	r2, #15
 8000e48:	d80e      	bhi.n	8000e68 <memmove+0x44>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	1e54      	subs	r4, r2, #1
 8000e4e:	2a00      	cmp	r2, #0
 8000e50:	d0f7      	beq.n	8000e42 <memmove+0x1e>
 8000e52:	3401      	adds	r4, #1
 8000e54:	440c      	add	r4, r1
 8000e56:	3b01      	subs	r3, #1
 8000e58:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000e5c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000e60:	42a1      	cmp	r1, r4
 8000e62:	d1f9      	bne.n	8000e58 <memmove+0x34>
 8000e64:	bcf0      	pop	{r4, r5, r6, r7}
 8000e66:	4770      	bx	lr
 8000e68:	ea40 0301 	orr.w	r3, r0, r1
 8000e6c:	079b      	lsls	r3, r3, #30
 8000e6e:	d13b      	bne.n	8000ee8 <memmove+0xc4>
 8000e70:	f1a2 0710 	sub.w	r7, r2, #16
 8000e74:	093f      	lsrs	r7, r7, #4
 8000e76:	f101 0620 	add.w	r6, r1, #32
 8000e7a:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8000e7e:	f101 0310 	add.w	r3, r1, #16
 8000e82:	f100 0410 	add.w	r4, r0, #16
 8000e86:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8000e8a:	f844 5c10 	str.w	r5, [r4, #-16]
 8000e8e:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8000e92:	f844 5c0c 	str.w	r5, [r4, #-12]
 8000e96:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8000e9a:	f844 5c08 	str.w	r5, [r4, #-8]
 8000e9e:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8000ea2:	f844 5c04 	str.w	r5, [r4, #-4]
 8000ea6:	3310      	adds	r3, #16
 8000ea8:	42b3      	cmp	r3, r6
 8000eaa:	f104 0410 	add.w	r4, r4, #16
 8000eae:	d1ea      	bne.n	8000e86 <memmove+0x62>
 8000eb0:	1c7b      	adds	r3, r7, #1
 8000eb2:	011b      	lsls	r3, r3, #4
 8000eb4:	f012 0f0c 	tst.w	r2, #12
 8000eb8:	4419      	add	r1, r3
 8000eba:	f002 050f 	and.w	r5, r2, #15
 8000ebe:	4403      	add	r3, r0
 8000ec0:	d015      	beq.n	8000eee <memmove+0xca>
 8000ec2:	3d04      	subs	r5, #4
 8000ec4:	08ad      	lsrs	r5, r5, #2
 8000ec6:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
 8000eca:	1f1c      	subs	r4, r3, #4
 8000ecc:	460e      	mov	r6, r1
 8000ece:	f856 7b04 	ldr.w	r7, [r6], #4
 8000ed2:	f844 7f04 	str.w	r7, [r4, #4]!
 8000ed6:	4564      	cmp	r4, ip
 8000ed8:	d1f9      	bne.n	8000ece <memmove+0xaa>
 8000eda:	3501      	adds	r5, #1
 8000edc:	00ad      	lsls	r5, r5, #2
 8000ede:	442b      	add	r3, r5
 8000ee0:	4429      	add	r1, r5
 8000ee2:	f002 0203 	and.w	r2, r2, #3
 8000ee6:	e7b1      	b.n	8000e4c <memmove+0x28>
 8000ee8:	1e54      	subs	r4, r2, #1
 8000eea:	4603      	mov	r3, r0
 8000eec:	e7b1      	b.n	8000e52 <memmove+0x2e>
 8000eee:	462a      	mov	r2, r5
 8000ef0:	e7ac      	b.n	8000e4c <memmove+0x28>
 8000ef2:	bf00      	nop

08000ef4 <_free_r>:
 8000ef4:	2900      	cmp	r1, #0
 8000ef6:	d03c      	beq.n	8000f72 <_free_r+0x7e>
 8000ef8:	b538      	push	{r3, r4, r5, lr}
 8000efa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000efe:	1f0c      	subs	r4, r1, #4
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	bfb8      	it	lt
 8000f04:	18e4      	addlt	r4, r4, r3
 8000f06:	4605      	mov	r5, r0
 8000f08:	f000 f8e6 	bl	80010d8 <__malloc_lock>
 8000f0c:	4b23      	ldr	r3, [pc, #140]	; (8000f9c <_free_r+0xa8>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	b12a      	cbz	r2, 8000f1e <_free_r+0x2a>
 8000f12:	42a2      	cmp	r2, r4
 8000f14:	d90d      	bls.n	8000f32 <_free_r+0x3e>
 8000f16:	6821      	ldr	r1, [r4, #0]
 8000f18:	1860      	adds	r0, r4, r1
 8000f1a:	4282      	cmp	r2, r0
 8000f1c:	d023      	beq.n	8000f66 <_free_r+0x72>
 8000f1e:	6062      	str	r2, [r4, #4]
 8000f20:	4628      	mov	r0, r5
 8000f22:	601c      	str	r4, [r3, #0]
 8000f24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f28:	f000 b8d8 	b.w	80010dc <__malloc_unlock>
 8000f2c:	42a3      	cmp	r3, r4
 8000f2e:	d803      	bhi.n	8000f38 <_free_r+0x44>
 8000f30:	461a      	mov	r2, r3
 8000f32:	6853      	ldr	r3, [r2, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1f9      	bne.n	8000f2c <_free_r+0x38>
 8000f38:	6811      	ldr	r1, [r2, #0]
 8000f3a:	1850      	adds	r0, r2, r1
 8000f3c:	42a0      	cmp	r0, r4
 8000f3e:	d019      	beq.n	8000f74 <_free_r+0x80>
 8000f40:	d824      	bhi.n	8000f8c <_free_r+0x98>
 8000f42:	6821      	ldr	r1, [r4, #0]
 8000f44:	1860      	adds	r0, r4, r1
 8000f46:	4283      	cmp	r3, r0
 8000f48:	d006      	beq.n	8000f58 <_free_r+0x64>
 8000f4a:	6063      	str	r3, [r4, #4]
 8000f4c:	6054      	str	r4, [r2, #4]
 8000f4e:	4628      	mov	r0, r5
 8000f50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f54:	f000 b8c2 	b.w	80010dc <__malloc_unlock>
 8000f58:	e9d3 0300 	ldrd	r0, r3, [r3]
 8000f5c:	4401      	add	r1, r0
 8000f5e:	6063      	str	r3, [r4, #4]
 8000f60:	6021      	str	r1, [r4, #0]
 8000f62:	6054      	str	r4, [r2, #4]
 8000f64:	e7f3      	b.n	8000f4e <_free_r+0x5a>
 8000f66:	e9d2 0200 	ldrd	r0, r2, [r2]
 8000f6a:	4401      	add	r1, r0
 8000f6c:	6062      	str	r2, [r4, #4]
 8000f6e:	6021      	str	r1, [r4, #0]
 8000f70:	e7d6      	b.n	8000f20 <_free_r+0x2c>
 8000f72:	4770      	bx	lr
 8000f74:	6820      	ldr	r0, [r4, #0]
 8000f76:	4401      	add	r1, r0
 8000f78:	1850      	adds	r0, r2, r1
 8000f7a:	4283      	cmp	r3, r0
 8000f7c:	6011      	str	r1, [r2, #0]
 8000f7e:	d1e6      	bne.n	8000f4e <_free_r+0x5a>
 8000f80:	e9d3 0300 	ldrd	r0, r3, [r3]
 8000f84:	4401      	add	r1, r0
 8000f86:	6053      	str	r3, [r2, #4]
 8000f88:	6011      	str	r1, [r2, #0]
 8000f8a:	e7e0      	b.n	8000f4e <_free_r+0x5a>
 8000f8c:	230c      	movs	r3, #12
 8000f8e:	602b      	str	r3, [r5, #0]
 8000f90:	4628      	mov	r0, r5
 8000f92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f96:	f000 b8a1 	b.w	80010dc <__malloc_unlock>
 8000f9a:	bf00      	nop
 8000f9c:	20000098 	.word	0x20000098

08000fa0 <_malloc_r>:
 8000fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fa2:	1ccd      	adds	r5, r1, #3
 8000fa4:	f025 0503 	bic.w	r5, r5, #3
 8000fa8:	3508      	adds	r5, #8
 8000faa:	2d0c      	cmp	r5, #12
 8000fac:	bf38      	it	cc
 8000fae:	250c      	movcc	r5, #12
 8000fb0:	2d00      	cmp	r5, #0
 8000fb2:	4606      	mov	r6, r0
 8000fb4:	db33      	blt.n	800101e <_malloc_r+0x7e>
 8000fb6:	42a9      	cmp	r1, r5
 8000fb8:	d831      	bhi.n	800101e <_malloc_r+0x7e>
 8000fba:	4f2a      	ldr	r7, [pc, #168]	; (8001064 <_malloc_r+0xc4>)
 8000fbc:	f000 f88c 	bl	80010d8 <__malloc_lock>
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	b152      	cbz	r2, 8000fda <_malloc_r+0x3a>
 8000fc4:	6813      	ldr	r3, [r2, #0]
 8000fc6:	1b5b      	subs	r3, r3, r5
 8000fc8:	d404      	bmi.n	8000fd4 <_malloc_r+0x34>
 8000fca:	e03f      	b.n	800104c <_malloc_r+0xac>
 8000fcc:	6823      	ldr	r3, [r4, #0]
 8000fce:	1b5b      	subs	r3, r3, r5
 8000fd0:	d529      	bpl.n	8001026 <_malloc_r+0x86>
 8000fd2:	4622      	mov	r2, r4
 8000fd4:	6854      	ldr	r4, [r2, #4]
 8000fd6:	2c00      	cmp	r4, #0
 8000fd8:	d1f8      	bne.n	8000fcc <_malloc_r+0x2c>
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	2900      	cmp	r1, #0
 8000fde:	d03b      	beq.n	8001058 <_malloc_r+0xb8>
 8000fe0:	4629      	mov	r1, r5
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	f000 f866 	bl	80010b4 <_sbrk_r>
 8000fe8:	1c43      	adds	r3, r0, #1
 8000fea:	d028      	beq.n	800103e <_malloc_r+0x9e>
 8000fec:	1cc4      	adds	r4, r0, #3
 8000fee:	f024 0403 	bic.w	r4, r4, #3
 8000ff2:	42a0      	cmp	r0, r4
 8000ff4:	d005      	beq.n	8001002 <_malloc_r+0x62>
 8000ff6:	1a21      	subs	r1, r4, r0
 8000ff8:	4630      	mov	r0, r6
 8000ffa:	f000 f85b 	bl	80010b4 <_sbrk_r>
 8000ffe:	3001      	adds	r0, #1
 8001000:	d01d      	beq.n	800103e <_malloc_r+0x9e>
 8001002:	6025      	str	r5, [r4, #0]
 8001004:	4630      	mov	r0, r6
 8001006:	f000 f869 	bl	80010dc <__malloc_unlock>
 800100a:	f104 000b 	add.w	r0, r4, #11
 800100e:	f020 0007 	bic.w	r0, r0, #7
 8001012:	1d23      	adds	r3, r4, #4
 8001014:	1ac2      	subs	r2, r0, r3
 8001016:	d001      	beq.n	800101c <_malloc_r+0x7c>
 8001018:	1a1b      	subs	r3, r3, r0
 800101a:	50a3      	str	r3, [r4, r2]
 800101c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800101e:	220c      	movs	r2, #12
 8001020:	6032      	str	r2, [r6, #0]
 8001022:	2000      	movs	r0, #0
 8001024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001026:	2b0b      	cmp	r3, #11
 8001028:	d805      	bhi.n	8001036 <_malloc_r+0x96>
 800102a:	42a2      	cmp	r2, r4
 800102c:	6863      	ldr	r3, [r4, #4]
 800102e:	d011      	beq.n	8001054 <_malloc_r+0xb4>
 8001030:	6053      	str	r3, [r2, #4]
 8001032:	e7e7      	b.n	8001004 <_malloc_r+0x64>
 8001034:	4614      	mov	r4, r2
 8001036:	6023      	str	r3, [r4, #0]
 8001038:	441c      	add	r4, r3
 800103a:	6025      	str	r5, [r4, #0]
 800103c:	e7e2      	b.n	8001004 <_malloc_r+0x64>
 800103e:	230c      	movs	r3, #12
 8001040:	4630      	mov	r0, r6
 8001042:	6033      	str	r3, [r6, #0]
 8001044:	f000 f84a 	bl	80010dc <__malloc_unlock>
 8001048:	2000      	movs	r0, #0
 800104a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800104c:	2b0b      	cmp	r3, #11
 800104e:	d8f1      	bhi.n	8001034 <_malloc_r+0x94>
 8001050:	6853      	ldr	r3, [r2, #4]
 8001052:	4614      	mov	r4, r2
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	e7d5      	b.n	8001004 <_malloc_r+0x64>
 8001058:	4630      	mov	r0, r6
 800105a:	f000 f82b 	bl	80010b4 <_sbrk_r>
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	e7be      	b.n	8000fe0 <_malloc_r+0x40>
 8001062:	bf00      	nop
 8001064:	20000098 	.word	0x20000098

08001068 <_realloc_r>:
 8001068:	b309      	cbz	r1, 80010ae <_realloc_r+0x46>
 800106a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800106c:	4614      	mov	r4, r2
 800106e:	b1ca      	cbz	r2, 80010a4 <_realloc_r+0x3c>
 8001070:	4606      	mov	r6, r0
 8001072:	460d      	mov	r5, r1
 8001074:	f000 f834 	bl	80010e0 <_malloc_usable_size_r>
 8001078:	42a0      	cmp	r0, r4
 800107a:	d302      	bcc.n	8001082 <_realloc_r+0x1a>
 800107c:	462f      	mov	r7, r5
 800107e:	4638      	mov	r0, r7
 8001080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001082:	4621      	mov	r1, r4
 8001084:	4630      	mov	r0, r6
 8001086:	f7ff ff8b 	bl	8000fa0 <_malloc_r>
 800108a:	4607      	mov	r7, r0
 800108c:	2800      	cmp	r0, #0
 800108e:	d0f6      	beq.n	800107e <_realloc_r+0x16>
 8001090:	4622      	mov	r2, r4
 8001092:	4629      	mov	r1, r5
 8001094:	f7ff fe2c 	bl	8000cf0 <memcpy>
 8001098:	4630      	mov	r0, r6
 800109a:	4629      	mov	r1, r5
 800109c:	f7ff ff2a 	bl	8000ef4 <_free_r>
 80010a0:	4638      	mov	r0, r7
 80010a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010a4:	4627      	mov	r7, r4
 80010a6:	f7ff ff25 	bl	8000ef4 <_free_r>
 80010aa:	4638      	mov	r0, r7
 80010ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010ae:	4611      	mov	r1, r2
 80010b0:	f7ff bf76 	b.w	8000fa0 <_malloc_r>

080010b4 <_sbrk_r>:
 80010b4:	b538      	push	{r3, r4, r5, lr}
 80010b6:	4c07      	ldr	r4, [pc, #28]	; (80010d4 <_sbrk_r+0x20>)
 80010b8:	2300      	movs	r3, #0
 80010ba:	4605      	mov	r5, r0
 80010bc:	4608      	mov	r0, r1
 80010be:	6023      	str	r3, [r4, #0]
 80010c0:	f000 fb9a 	bl	80017f8 <_sbrk>
 80010c4:	1c43      	adds	r3, r0, #1
 80010c6:	d000      	beq.n	80010ca <_sbrk_r+0x16>
 80010c8:	bd38      	pop	{r3, r4, r5, pc}
 80010ca:	6823      	ldr	r3, [r4, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d0fb      	beq.n	80010c8 <_sbrk_r+0x14>
 80010d0:	602b      	str	r3, [r5, #0]
 80010d2:	bd38      	pop	{r3, r4, r5, pc}
 80010d4:	200001ec 	.word	0x200001ec

080010d8 <__malloc_lock>:
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop

080010dc <__malloc_unlock>:
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <_malloc_usable_size_r>:
 80010e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80010e4:	1f18      	subs	r0, r3, #4
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	bfbc      	itt	lt
 80010ea:	580b      	ldrlt	r3, [r1, r0]
 80010ec:	18c0      	addlt	r0, r0, r3
 80010ee:	4770      	bx	lr

080010f0 <__aeabi_uldivmod>:
 80010f0:	b953      	cbnz	r3, 8001108 <__aeabi_uldivmod+0x18>
 80010f2:	b94a      	cbnz	r2, 8001108 <__aeabi_uldivmod+0x18>
 80010f4:	2900      	cmp	r1, #0
 80010f6:	bf08      	it	eq
 80010f8:	2800      	cmpeq	r0, #0
 80010fa:	bf1c      	itt	ne
 80010fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8001100:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001104:	f000 b96e 	b.w	80013e4 <__aeabi_idiv0>
 8001108:	f1ad 0c08 	sub.w	ip, sp, #8
 800110c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001110:	f000 f806 	bl	8001120 <__udivmoddi4>
 8001114:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800111c:	b004      	add	sp, #16
 800111e:	4770      	bx	lr

08001120 <__udivmoddi4>:
 8001120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001124:	9d08      	ldr	r5, [sp, #32]
 8001126:	4604      	mov	r4, r0
 8001128:	468c      	mov	ip, r1
 800112a:	2b00      	cmp	r3, #0
 800112c:	f040 8083 	bne.w	8001236 <__udivmoddi4+0x116>
 8001130:	428a      	cmp	r2, r1
 8001132:	4617      	mov	r7, r2
 8001134:	d947      	bls.n	80011c6 <__udivmoddi4+0xa6>
 8001136:	fab2 f282 	clz	r2, r2
 800113a:	b142      	cbz	r2, 800114e <__udivmoddi4+0x2e>
 800113c:	f1c2 0020 	rsb	r0, r2, #32
 8001140:	fa24 f000 	lsr.w	r0, r4, r0
 8001144:	4091      	lsls	r1, r2
 8001146:	4097      	lsls	r7, r2
 8001148:	ea40 0c01 	orr.w	ip, r0, r1
 800114c:	4094      	lsls	r4, r2
 800114e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001152:	0c23      	lsrs	r3, r4, #16
 8001154:	fbbc f6f8 	udiv	r6, ip, r8
 8001158:	fa1f fe87 	uxth.w	lr, r7
 800115c:	fb08 c116 	mls	r1, r8, r6, ip
 8001160:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001164:	fb06 f10e 	mul.w	r1, r6, lr
 8001168:	4299      	cmp	r1, r3
 800116a:	d909      	bls.n	8001180 <__udivmoddi4+0x60>
 800116c:	18fb      	adds	r3, r7, r3
 800116e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8001172:	f080 8119 	bcs.w	80013a8 <__udivmoddi4+0x288>
 8001176:	4299      	cmp	r1, r3
 8001178:	f240 8116 	bls.w	80013a8 <__udivmoddi4+0x288>
 800117c:	3e02      	subs	r6, #2
 800117e:	443b      	add	r3, r7
 8001180:	1a5b      	subs	r3, r3, r1
 8001182:	b2a4      	uxth	r4, r4
 8001184:	fbb3 f0f8 	udiv	r0, r3, r8
 8001188:	fb08 3310 	mls	r3, r8, r0, r3
 800118c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001190:	fb00 fe0e 	mul.w	lr, r0, lr
 8001194:	45a6      	cmp	lr, r4
 8001196:	d909      	bls.n	80011ac <__udivmoddi4+0x8c>
 8001198:	193c      	adds	r4, r7, r4
 800119a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800119e:	f080 8105 	bcs.w	80013ac <__udivmoddi4+0x28c>
 80011a2:	45a6      	cmp	lr, r4
 80011a4:	f240 8102 	bls.w	80013ac <__udivmoddi4+0x28c>
 80011a8:	3802      	subs	r0, #2
 80011aa:	443c      	add	r4, r7
 80011ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80011b0:	eba4 040e 	sub.w	r4, r4, lr
 80011b4:	2600      	movs	r6, #0
 80011b6:	b11d      	cbz	r5, 80011c0 <__udivmoddi4+0xa0>
 80011b8:	40d4      	lsrs	r4, r2
 80011ba:	2300      	movs	r3, #0
 80011bc:	e9c5 4300 	strd	r4, r3, [r5]
 80011c0:	4631      	mov	r1, r6
 80011c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011c6:	b902      	cbnz	r2, 80011ca <__udivmoddi4+0xaa>
 80011c8:	deff      	udf	#255	; 0xff
 80011ca:	fab2 f282 	clz	r2, r2
 80011ce:	2a00      	cmp	r2, #0
 80011d0:	d150      	bne.n	8001274 <__udivmoddi4+0x154>
 80011d2:	1bcb      	subs	r3, r1, r7
 80011d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011d8:	fa1f f887 	uxth.w	r8, r7
 80011dc:	2601      	movs	r6, #1
 80011de:	fbb3 fcfe 	udiv	ip, r3, lr
 80011e2:	0c21      	lsrs	r1, r4, #16
 80011e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80011e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80011ec:	fb08 f30c 	mul.w	r3, r8, ip
 80011f0:	428b      	cmp	r3, r1
 80011f2:	d907      	bls.n	8001204 <__udivmoddi4+0xe4>
 80011f4:	1879      	adds	r1, r7, r1
 80011f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80011fa:	d202      	bcs.n	8001202 <__udivmoddi4+0xe2>
 80011fc:	428b      	cmp	r3, r1
 80011fe:	f200 80e9 	bhi.w	80013d4 <__udivmoddi4+0x2b4>
 8001202:	4684      	mov	ip, r0
 8001204:	1ac9      	subs	r1, r1, r3
 8001206:	b2a3      	uxth	r3, r4
 8001208:	fbb1 f0fe 	udiv	r0, r1, lr
 800120c:	fb0e 1110 	mls	r1, lr, r0, r1
 8001210:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8001214:	fb08 f800 	mul.w	r8, r8, r0
 8001218:	45a0      	cmp	r8, r4
 800121a:	d907      	bls.n	800122c <__udivmoddi4+0x10c>
 800121c:	193c      	adds	r4, r7, r4
 800121e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001222:	d202      	bcs.n	800122a <__udivmoddi4+0x10a>
 8001224:	45a0      	cmp	r8, r4
 8001226:	f200 80d9 	bhi.w	80013dc <__udivmoddi4+0x2bc>
 800122a:	4618      	mov	r0, r3
 800122c:	eba4 0408 	sub.w	r4, r4, r8
 8001230:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001234:	e7bf      	b.n	80011b6 <__udivmoddi4+0x96>
 8001236:	428b      	cmp	r3, r1
 8001238:	d909      	bls.n	800124e <__udivmoddi4+0x12e>
 800123a:	2d00      	cmp	r5, #0
 800123c:	f000 80b1 	beq.w	80013a2 <__udivmoddi4+0x282>
 8001240:	2600      	movs	r6, #0
 8001242:	e9c5 0100 	strd	r0, r1, [r5]
 8001246:	4630      	mov	r0, r6
 8001248:	4631      	mov	r1, r6
 800124a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800124e:	fab3 f683 	clz	r6, r3
 8001252:	2e00      	cmp	r6, #0
 8001254:	d14a      	bne.n	80012ec <__udivmoddi4+0x1cc>
 8001256:	428b      	cmp	r3, r1
 8001258:	d302      	bcc.n	8001260 <__udivmoddi4+0x140>
 800125a:	4282      	cmp	r2, r0
 800125c:	f200 80b8 	bhi.w	80013d0 <__udivmoddi4+0x2b0>
 8001260:	1a84      	subs	r4, r0, r2
 8001262:	eb61 0103 	sbc.w	r1, r1, r3
 8001266:	2001      	movs	r0, #1
 8001268:	468c      	mov	ip, r1
 800126a:	2d00      	cmp	r5, #0
 800126c:	d0a8      	beq.n	80011c0 <__udivmoddi4+0xa0>
 800126e:	e9c5 4c00 	strd	r4, ip, [r5]
 8001272:	e7a5      	b.n	80011c0 <__udivmoddi4+0xa0>
 8001274:	f1c2 0320 	rsb	r3, r2, #32
 8001278:	fa20 f603 	lsr.w	r6, r0, r3
 800127c:	4097      	lsls	r7, r2
 800127e:	fa01 f002 	lsl.w	r0, r1, r2
 8001282:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001286:	40d9      	lsrs	r1, r3
 8001288:	4330      	orrs	r0, r6
 800128a:	0c03      	lsrs	r3, r0, #16
 800128c:	fbb1 f6fe 	udiv	r6, r1, lr
 8001290:	fa1f f887 	uxth.w	r8, r7
 8001294:	fb0e 1116 	mls	r1, lr, r6, r1
 8001298:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800129c:	fb06 f108 	mul.w	r1, r6, r8
 80012a0:	4299      	cmp	r1, r3
 80012a2:	fa04 f402 	lsl.w	r4, r4, r2
 80012a6:	d909      	bls.n	80012bc <__udivmoddi4+0x19c>
 80012a8:	18fb      	adds	r3, r7, r3
 80012aa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80012ae:	f080 808d 	bcs.w	80013cc <__udivmoddi4+0x2ac>
 80012b2:	4299      	cmp	r1, r3
 80012b4:	f240 808a 	bls.w	80013cc <__udivmoddi4+0x2ac>
 80012b8:	3e02      	subs	r6, #2
 80012ba:	443b      	add	r3, r7
 80012bc:	1a5b      	subs	r3, r3, r1
 80012be:	b281      	uxth	r1, r0
 80012c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80012c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80012c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80012cc:	fb00 f308 	mul.w	r3, r0, r8
 80012d0:	428b      	cmp	r3, r1
 80012d2:	d907      	bls.n	80012e4 <__udivmoddi4+0x1c4>
 80012d4:	1879      	adds	r1, r7, r1
 80012d6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80012da:	d273      	bcs.n	80013c4 <__udivmoddi4+0x2a4>
 80012dc:	428b      	cmp	r3, r1
 80012de:	d971      	bls.n	80013c4 <__udivmoddi4+0x2a4>
 80012e0:	3802      	subs	r0, #2
 80012e2:	4439      	add	r1, r7
 80012e4:	1acb      	subs	r3, r1, r3
 80012e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80012ea:	e778      	b.n	80011de <__udivmoddi4+0xbe>
 80012ec:	f1c6 0c20 	rsb	ip, r6, #32
 80012f0:	fa03 f406 	lsl.w	r4, r3, r6
 80012f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80012f8:	431c      	orrs	r4, r3
 80012fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80012fe:	fa01 f306 	lsl.w	r3, r1, r6
 8001302:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8001306:	fa21 f10c 	lsr.w	r1, r1, ip
 800130a:	431f      	orrs	r7, r3
 800130c:	0c3b      	lsrs	r3, r7, #16
 800130e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001312:	fa1f f884 	uxth.w	r8, r4
 8001316:	fb0e 1119 	mls	r1, lr, r9, r1
 800131a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800131e:	fb09 fa08 	mul.w	sl, r9, r8
 8001322:	458a      	cmp	sl, r1
 8001324:	fa02 f206 	lsl.w	r2, r2, r6
 8001328:	fa00 f306 	lsl.w	r3, r0, r6
 800132c:	d908      	bls.n	8001340 <__udivmoddi4+0x220>
 800132e:	1861      	adds	r1, r4, r1
 8001330:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8001334:	d248      	bcs.n	80013c8 <__udivmoddi4+0x2a8>
 8001336:	458a      	cmp	sl, r1
 8001338:	d946      	bls.n	80013c8 <__udivmoddi4+0x2a8>
 800133a:	f1a9 0902 	sub.w	r9, r9, #2
 800133e:	4421      	add	r1, r4
 8001340:	eba1 010a 	sub.w	r1, r1, sl
 8001344:	b2bf      	uxth	r7, r7
 8001346:	fbb1 f0fe 	udiv	r0, r1, lr
 800134a:	fb0e 1110 	mls	r1, lr, r0, r1
 800134e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001352:	fb00 f808 	mul.w	r8, r0, r8
 8001356:	45b8      	cmp	r8, r7
 8001358:	d907      	bls.n	800136a <__udivmoddi4+0x24a>
 800135a:	19e7      	adds	r7, r4, r7
 800135c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8001360:	d22e      	bcs.n	80013c0 <__udivmoddi4+0x2a0>
 8001362:	45b8      	cmp	r8, r7
 8001364:	d92c      	bls.n	80013c0 <__udivmoddi4+0x2a0>
 8001366:	3802      	subs	r0, #2
 8001368:	4427      	add	r7, r4
 800136a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800136e:	eba7 0708 	sub.w	r7, r7, r8
 8001372:	fba0 8902 	umull	r8, r9, r0, r2
 8001376:	454f      	cmp	r7, r9
 8001378:	46c6      	mov	lr, r8
 800137a:	4649      	mov	r1, r9
 800137c:	d31a      	bcc.n	80013b4 <__udivmoddi4+0x294>
 800137e:	d017      	beq.n	80013b0 <__udivmoddi4+0x290>
 8001380:	b15d      	cbz	r5, 800139a <__udivmoddi4+0x27a>
 8001382:	ebb3 020e 	subs.w	r2, r3, lr
 8001386:	eb67 0701 	sbc.w	r7, r7, r1
 800138a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800138e:	40f2      	lsrs	r2, r6
 8001390:	ea4c 0202 	orr.w	r2, ip, r2
 8001394:	40f7      	lsrs	r7, r6
 8001396:	e9c5 2700 	strd	r2, r7, [r5]
 800139a:	2600      	movs	r6, #0
 800139c:	4631      	mov	r1, r6
 800139e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013a2:	462e      	mov	r6, r5
 80013a4:	4628      	mov	r0, r5
 80013a6:	e70b      	b.n	80011c0 <__udivmoddi4+0xa0>
 80013a8:	4606      	mov	r6, r0
 80013aa:	e6e9      	b.n	8001180 <__udivmoddi4+0x60>
 80013ac:	4618      	mov	r0, r3
 80013ae:	e6fd      	b.n	80011ac <__udivmoddi4+0x8c>
 80013b0:	4543      	cmp	r3, r8
 80013b2:	d2e5      	bcs.n	8001380 <__udivmoddi4+0x260>
 80013b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80013b8:	eb69 0104 	sbc.w	r1, r9, r4
 80013bc:	3801      	subs	r0, #1
 80013be:	e7df      	b.n	8001380 <__udivmoddi4+0x260>
 80013c0:	4608      	mov	r0, r1
 80013c2:	e7d2      	b.n	800136a <__udivmoddi4+0x24a>
 80013c4:	4660      	mov	r0, ip
 80013c6:	e78d      	b.n	80012e4 <__udivmoddi4+0x1c4>
 80013c8:	4681      	mov	r9, r0
 80013ca:	e7b9      	b.n	8001340 <__udivmoddi4+0x220>
 80013cc:	4666      	mov	r6, ip
 80013ce:	e775      	b.n	80012bc <__udivmoddi4+0x19c>
 80013d0:	4630      	mov	r0, r6
 80013d2:	e74a      	b.n	800126a <__udivmoddi4+0x14a>
 80013d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80013d8:	4439      	add	r1, r7
 80013da:	e713      	b.n	8001204 <__udivmoddi4+0xe4>
 80013dc:	3802      	subs	r0, #2
 80013de:	443c      	add	r4, r7
 80013e0:	e724      	b.n	800122c <__udivmoddi4+0x10c>
 80013e2:	bf00      	nop

080013e4 <__aeabi_idiv0>:
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop

080013e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ee:	f000 fa75 	bl	80018dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f2:	f000 f849 	bl	8001488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f6:	f000 f8df 	bl	80015b8 <MX_GPIO_Init>
//  MX_DMA_Init();
  MX_USART2_UART_Init();
 80013fa:	f000 f8b3 	bl	8001564 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // HAL_UART_Receive_DMA(&huart2,in_message,11);

	HAL_UART_Transmit(&huart2, hello, sizeof(hello),10);
 80013fe:	230a      	movs	r3, #10
 8001400:	220b      	movs	r2, #11
 8001402:	491b      	ldr	r1, [pc, #108]	; (8001470 <main+0x88>)
 8001404:	481b      	ldr	r0, [pc, #108]	; (8001474 <main+0x8c>)
 8001406:	f001 fc20 	bl	8002c4a <HAL_UART_Transmit>
//  while (huart2.gState == HAL_UART_STATE_BUSY_TX) {}
int B1_status;
int last_B1_status = 1;
 800140a:	2301      	movs	r3, #1
 800140c:	60fb      	str	r3, [r7, #12]
int counter = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	2120      	movs	r1, #32
 8001416:	4818      	ldr	r0, [pc, #96]	; (8001478 <main+0x90>)
 8001418:	f000 fe46 	bl	80020a8 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
		B1_status= HAL_GPIO_ReadPin (B1_GPIO_Port, B1_Pin);
 800141c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001420:	4816      	ldr	r0, [pc, #88]	; (800147c <main+0x94>)
 8001422:	f000 fe29 	bl	8002078 <HAL_GPIO_ReadPin>
 8001426:	4603      	mov	r3, r0
 8001428:	607b      	str	r3, [r7, #4]
		
		if (B1_status == 0 && last_B1_status == 1){
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d118      	bne.n	8001462 <main+0x7a>
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d115      	bne.n	8001462 <main+0x7a>
			counter++;
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	3301      	adds	r3, #1
 800143a:	60bb      	str	r3, [r7, #8]
			snprintf(out_message, sizeof(out_message),"%i",counter);
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	4a10      	ldr	r2, [pc, #64]	; (8001480 <main+0x98>)
 8001440:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001444:	480f      	ldr	r0, [pc, #60]	; (8001484 <main+0x9c>)
 8001446:	f7fe ffc3 	bl	80003d0 <sniprintf>
			HAL_UART_Transmit(&huart2, out_message, sizeof(out_message),10);
 800144a:	230a      	movs	r3, #10
 800144c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001450:	490c      	ldr	r1, [pc, #48]	; (8001484 <main+0x9c>)
 8001452:	4808      	ldr	r0, [pc, #32]	; (8001474 <main+0x8c>)
 8001454:	f001 fbf9 	bl	8002c4a <HAL_UART_Transmit>
			HAL_GPIO_WritePin(GPIOA,LD2_Pin,GPIO_PIN_SET);
 8001458:	2201      	movs	r2, #1
 800145a:	2120      	movs	r1, #32
 800145c:	4806      	ldr	r0, [pc, #24]	; (8001478 <main+0x90>)
 800145e:	f000 fe23 	bl	80020a8 <HAL_GPIO_WritePin>
		}
		HAL_Delay(10);
 8001462:	200a      	movs	r0, #10
 8001464:	f000 faac 	bl	80019c0 <HAL_Delay>

		last_B1_status = B1_status;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	60fb      	str	r3, [r7, #12]
		B1_status= HAL_GPIO_ReadPin (B1_GPIO_Port, B1_Pin);
 800146c:	e7d6      	b.n	800141c <main+0x34>
 800146e:	bf00      	nop
 8001470:	20000064 	.word	0x20000064
 8001474:	200000a4 	.word	0x200000a4
 8001478:	40020000 	.word	0x40020000
 800147c:	40020800 	.word	0x40020800
 8001480:	08003a98 	.word	0x08003a98
 8001484:	200000e8 	.word	0x200000e8

08001488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b094      	sub	sp, #80	; 0x50
 800148c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148e:	f107 031c 	add.w	r3, r7, #28
 8001492:	2234      	movs	r2, #52	; 0x34
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f7fe ff08 	bl	80002ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800149c:	f107 0308 	add.w	r3, r7, #8
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ac:	2300      	movs	r3, #0
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	4b2a      	ldr	r3, [pc, #168]	; (800155c <SystemClock_Config+0xd4>)
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	4a29      	ldr	r2, [pc, #164]	; (800155c <SystemClock_Config+0xd4>)
 80014b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ba:	6413      	str	r3, [r2, #64]	; 0x40
 80014bc:	4b27      	ldr	r3, [pc, #156]	; (800155c <SystemClock_Config+0xd4>)
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014c8:	2300      	movs	r3, #0
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	4b24      	ldr	r3, [pc, #144]	; (8001560 <SystemClock_Config+0xd8>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014d4:	4a22      	ldr	r2, [pc, #136]	; (8001560 <SystemClock_Config+0xd8>)
 80014d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	4b20      	ldr	r3, [pc, #128]	; (8001560 <SystemClock_Config+0xd8>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014e8:	2302      	movs	r3, #2
 80014ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ec:	2301      	movs	r3, #1
 80014ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014f0:	2310      	movs	r3, #16
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f4:	2302      	movs	r3, #2
 80014f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014f8:	2300      	movs	r3, #0
 80014fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014fc:	2310      	movs	r3, #16
 80014fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001500:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001504:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001506:	2304      	movs	r3, #4
 8001508:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800150a:	2302      	movs	r3, #2
 800150c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800150e:	2302      	movs	r3, #2
 8001510:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001512:	f107 031c 	add.w	r3, r7, #28
 8001516:	4618      	mov	r0, r3
 8001518:	f001 f8ac 	bl	8002674 <HAL_RCC_OscConfig>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001522:	f000 f8b7 	bl	8001694 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001526:	230f      	movs	r3, #15
 8001528:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800152a:	2302      	movs	r3, #2
 800152c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001536:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001538:	2300      	movs	r3, #0
 800153a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800153c:	f107 0308 	add.w	r3, r7, #8
 8001540:	2102      	movs	r1, #2
 8001542:	4618      	mov	r0, r3
 8001544:	f000 fdca 	bl	80020dc <HAL_RCC_ClockConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800154e:	f000 f8a1 	bl	8001694 <Error_Handler>
  }
}
 8001552:	bf00      	nop
 8001554:	3750      	adds	r7, #80	; 0x50
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800
 8001560:	40007000 	.word	0x40007000

08001564 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <MX_USART2_UART_Init+0x4c>)
 800156a:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <MX_USART2_UART_Init+0x50>)
 800156c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <MX_USART2_UART_Init+0x4c>)
 8001570:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001574:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <MX_USART2_UART_Init+0x4c>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <MX_USART2_UART_Init+0x4c>)
 800157e:	2200      	movs	r2, #0
 8001580:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <MX_USART2_UART_Init+0x4c>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <MX_USART2_UART_Init+0x4c>)
 800158a:	220c      	movs	r2, #12
 800158c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158e:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <MX_USART2_UART_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <MX_USART2_UART_Init+0x4c>)
 8001596:	2200      	movs	r2, #0
 8001598:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800159a:	4805      	ldr	r0, [pc, #20]	; (80015b0 <MX_USART2_UART_Init+0x4c>)
 800159c:	f001 fb08 	bl	8002bb0 <HAL_UART_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015a6:	f000 f875 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200000a4 	.word	0x200000a4
 80015b4:	40004400 	.word	0x40004400

080015b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
 80015cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
 80015d2:	4b2d      	ldr	r3, [pc, #180]	; (8001688 <MX_GPIO_Init+0xd0>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a2c      	ldr	r2, [pc, #176]	; (8001688 <MX_GPIO_Init+0xd0>)
 80015d8:	f043 0304 	orr.w	r3, r3, #4
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b2a      	ldr	r3, [pc, #168]	; (8001688 <MX_GPIO_Init+0xd0>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0304 	and.w	r3, r3, #4
 80015e6:	613b      	str	r3, [r7, #16]
 80015e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	4b26      	ldr	r3, [pc, #152]	; (8001688 <MX_GPIO_Init+0xd0>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a25      	ldr	r2, [pc, #148]	; (8001688 <MX_GPIO_Init+0xd0>)
 80015f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b23      	ldr	r3, [pc, #140]	; (8001688 <MX_GPIO_Init+0xd0>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	4b1f      	ldr	r3, [pc, #124]	; (8001688 <MX_GPIO_Init+0xd0>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a1e      	ldr	r2, [pc, #120]	; (8001688 <MX_GPIO_Init+0xd0>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <MX_GPIO_Init+0xd0>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	4b18      	ldr	r3, [pc, #96]	; (8001688 <MX_GPIO_Init+0xd0>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a17      	ldr	r2, [pc, #92]	; (8001688 <MX_GPIO_Init+0xd0>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <MX_GPIO_Init+0xd0>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	2120      	movs	r1, #32
 8001642:	4812      	ldr	r0, [pc, #72]	; (800168c <MX_GPIO_Init+0xd4>)
 8001644:	f000 fd30 	bl	80020a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001648:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800164c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800164e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001654:	2301      	movs	r3, #1
 8001656:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4619      	mov	r1, r3
 800165e:	480c      	ldr	r0, [pc, #48]	; (8001690 <MX_GPIO_Init+0xd8>)
 8001660:	f000 fb76 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001664:	2320      	movs	r3, #32
 8001666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001668:	2301      	movs	r3, #1
 800166a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	4619      	mov	r1, r3
 800167a:	4804      	ldr	r0, [pc, #16]	; (800168c <MX_GPIO_Init+0xd4>)
 800167c:	f000 fb68 	bl	8001d50 <HAL_GPIO_Init>

}
 8001680:	bf00      	nop
 8001682:	3728      	adds	r7, #40	; 0x28
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40023800 	.word	0x40023800
 800168c:	40020000 	.word	0x40020000
 8001690:	40020800 	.word	0x40020800

08001694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001698:	b672      	cpsid	i
}
 800169a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800169c:	e7fe      	b.n	800169c <Error_Handler+0x8>
	...

080016a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <HAL_MspInit+0x4c>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	4a0f      	ldr	r2, [pc, #60]	; (80016ec <HAL_MspInit+0x4c>)
 80016b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b4:	6453      	str	r3, [r2, #68]	; 0x44
 80016b6:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <HAL_MspInit+0x4c>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	603b      	str	r3, [r7, #0]
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <HAL_MspInit+0x4c>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	4a08      	ldr	r2, [pc, #32]	; (80016ec <HAL_MspInit+0x4c>)
 80016cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d0:	6413      	str	r3, [r2, #64]	; 0x40
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_MspInit+0x4c>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016de:	2007      	movs	r0, #7
 80016e0:	f000 fa62 	bl	8001ba8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40023800 	.word	0x40023800

080016f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a1d      	ldr	r2, [pc, #116]	; (8001784 <HAL_UART_MspInit+0x94>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d133      	bne.n	800177a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <HAL_UART_MspInit+0x98>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	4a1b      	ldr	r2, [pc, #108]	; (8001788 <HAL_UART_MspInit+0x98>)
 800171c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001720:	6413      	str	r3, [r2, #64]	; 0x40
 8001722:	4b19      	ldr	r3, [pc, #100]	; (8001788 <HAL_UART_MspInit+0x98>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <HAL_UART_MspInit+0x98>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a14      	ldr	r2, [pc, #80]	; (8001788 <HAL_UART_MspInit+0x98>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_UART_MspInit+0x98>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800174a:	230c      	movs	r3, #12
 800174c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001756:	2303      	movs	r3, #3
 8001758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800175a:	2307      	movs	r3, #7
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	4619      	mov	r1, r3
 8001764:	4809      	ldr	r0, [pc, #36]	; (800178c <HAL_UART_MspInit+0x9c>)
 8001766:	f000 faf3 	bl	8001d50 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	2100      	movs	r1, #0
 800176e:	2026      	movs	r0, #38	; 0x26
 8001770:	f000 fa25 	bl	8001bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001774:	2026      	movs	r0, #38	; 0x26
 8001776:	f000 fa3e 	bl	8001bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800177a:	bf00      	nop
 800177c:	3728      	adds	r7, #40	; 0x28
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40004400 	.word	0x40004400
 8001788:	40023800 	.word	0x40023800
 800178c:	40020000 	.word	0x40020000

08001790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <NMI_Handler+0x4>

08001796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179a:	e7fe      	b.n	800179a <HardFault_Handler+0x4>

0800179c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <MemManage_Handler+0x4>

080017a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <BusFault_Handler+0x4>

080017a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <UsageFault_Handler+0x4>

080017ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017dc:	f000 f8d0 	bl	8001980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017e8:	4802      	ldr	r0, [pc, #8]	; (80017f4 <USART2_IRQHandler+0x10>)
 80017ea:	f001 fac1 	bl	8002d70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200000a4 	.word	0x200000a4

080017f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001800:	4a14      	ldr	r2, [pc, #80]	; (8001854 <_sbrk+0x5c>)
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <_sbrk+0x60>)
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800180c:	4b13      	ldr	r3, [pc, #76]	; (800185c <_sbrk+0x64>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d102      	bne.n	800181a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <_sbrk+0x64>)
 8001816:	4a12      	ldr	r2, [pc, #72]	; (8001860 <_sbrk+0x68>)
 8001818:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <_sbrk+0x64>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	429a      	cmp	r2, r3
 8001826:	d207      	bcs.n	8001838 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001828:	f7fe fd16 	bl	8000258 <__errno>
 800182c:	4603      	mov	r3, r0
 800182e:	220c      	movs	r2, #12
 8001830:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001836:	e009      	b.n	800184c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <_sbrk+0x64>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800183e:	4b07      	ldr	r3, [pc, #28]	; (800185c <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	4a05      	ldr	r2, [pc, #20]	; (800185c <_sbrk+0x64>)
 8001848:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800184a:	68fb      	ldr	r3, [r7, #12]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20020000 	.word	0x20020000
 8001858:	00000400 	.word	0x00000400
 800185c:	200000a0 	.word	0x200000a0
 8001860:	200001f0 	.word	0x200001f0

08001864 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <SystemInit+0x20>)
 800186a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800186e:	4a05      	ldr	r2, [pc, #20]	; (8001884 <SystemInit+0x20>)
 8001870:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001888:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800188c:	480d      	ldr	r0, [pc, #52]	; (80018c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800188e:	490e      	ldr	r1, [pc, #56]	; (80018c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001890:	4a0e      	ldr	r2, [pc, #56]	; (80018cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001894:	e002      	b.n	800189c <LoopCopyDataInit>

08001896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189a:	3304      	adds	r3, #4

0800189c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800189c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a0:	d3f9      	bcc.n	8001896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a2:	4a0b      	ldr	r2, [pc, #44]	; (80018d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018a4:	4c0b      	ldr	r4, [pc, #44]	; (80018d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a8:	e001      	b.n	80018ae <LoopFillZerobss>

080018aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ac:	3204      	adds	r2, #4

080018ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b0:	d3fb      	bcc.n	80018aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018b2:	f7ff ffd7 	bl	8001864 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018b6:	f7fe fcd5 	bl	8000264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ba:	f7ff fd95 	bl	80013e8 <main>
  bx  lr    
 80018be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80018cc:	08003b00 	.word	0x08003b00
  ldr r2, =_sbss
 80018d0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80018d4:	200001f0 	.word	0x200001f0

080018d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d8:	e7fe      	b.n	80018d8 <ADC_IRQHandler>
	...

080018dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018e0:	4b0e      	ldr	r3, [pc, #56]	; (800191c <HAL_Init+0x40>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a0d      	ldr	r2, [pc, #52]	; (800191c <HAL_Init+0x40>)
 80018e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <HAL_Init+0x40>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a0a      	ldr	r2, [pc, #40]	; (800191c <HAL_Init+0x40>)
 80018f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <HAL_Init+0x40>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a07      	ldr	r2, [pc, #28]	; (800191c <HAL_Init+0x40>)
 80018fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001902:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001904:	2003      	movs	r0, #3
 8001906:	f000 f94f 	bl	8001ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800190a:	2000      	movs	r0, #0
 800190c:	f000 f808 	bl	8001920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001910:	f7ff fec6 	bl	80016a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40023c00 	.word	0x40023c00

08001920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <HAL_InitTick+0x54>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <HAL_InitTick+0x58>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	4619      	mov	r1, r3
 8001932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001936:	fbb3 f3f1 	udiv	r3, r3, r1
 800193a:	fbb2 f3f3 	udiv	r3, r2, r3
 800193e:	4618      	mov	r0, r3
 8001940:	f000 f967 	bl	8001c12 <HAL_SYSTICK_Config>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e00e      	b.n	800196c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b0f      	cmp	r3, #15
 8001952:	d80a      	bhi.n	800196a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001954:	2200      	movs	r2, #0
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800195c:	f000 f92f 	bl	8001bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001960:	4a06      	ldr	r2, [pc, #24]	; (800197c <HAL_InitTick+0x5c>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	e000      	b.n	800196c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
}
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000070 	.word	0x20000070
 8001978:	20000078 	.word	0x20000078
 800197c:	20000074 	.word	0x20000074

08001980 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_IncTick+0x20>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_IncTick+0x24>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4413      	add	r3, r2
 8001990:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <HAL_IncTick+0x24>)
 8001992:	6013      	str	r3, [r2, #0]
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	20000078 	.word	0x20000078
 80019a4:	200001e8 	.word	0x200001e8

080019a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return uwTick;
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <HAL_GetTick+0x14>)
 80019ae:	681b      	ldr	r3, [r3, #0]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	200001e8 	.word	0x200001e8

080019c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c8:	f7ff ffee 	bl	80019a8 <HAL_GetTick>
 80019cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019d8:	d005      	beq.n	80019e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019da:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <HAL_Delay+0x44>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4413      	add	r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019e6:	bf00      	nop
 80019e8:	f7ff ffde 	bl	80019a8 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d8f7      	bhi.n	80019e8 <HAL_Delay+0x28>
  {
  }
}
 80019f8:	bf00      	nop
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000078 	.word	0x20000078

08001a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <__NVIC_SetPriorityGrouping+0x44>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a24:	4013      	ands	r3, r2
 8001a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3a:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <__NVIC_SetPriorityGrouping+0x44>)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	60d3      	str	r3, [r2, #12]
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <__NVIC_GetPriorityGrouping+0x18>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	0a1b      	lsrs	r3, r3, #8
 8001a5a:	f003 0307 	and.w	r3, r3, #7
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	db0b      	blt.n	8001a96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	f003 021f 	and.w	r2, r3, #31
 8001a84:	4907      	ldr	r1, [pc, #28]	; (8001aa4 <__NVIC_EnableIRQ+0x38>)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	095b      	lsrs	r3, r3, #5
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	e000e100 	.word	0xe000e100

08001aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	6039      	str	r1, [r7, #0]
 8001ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	db0a      	blt.n	8001ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	490c      	ldr	r1, [pc, #48]	; (8001af4 <__NVIC_SetPriority+0x4c>)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	0112      	lsls	r2, r2, #4
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	440b      	add	r3, r1
 8001acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad0:	e00a      	b.n	8001ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	4908      	ldr	r1, [pc, #32]	; (8001af8 <__NVIC_SetPriority+0x50>)
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	3b04      	subs	r3, #4
 8001ae0:	0112      	lsls	r2, r2, #4
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	761a      	strb	r2, [r3, #24]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000e100 	.word	0xe000e100
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b089      	sub	sp, #36	; 0x24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f1c3 0307 	rsb	r3, r3, #7
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	bf28      	it	cs
 8001b1a:	2304      	movcs	r3, #4
 8001b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3304      	adds	r3, #4
 8001b22:	2b06      	cmp	r3, #6
 8001b24:	d902      	bls.n	8001b2c <NVIC_EncodePriority+0x30>
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3b03      	subs	r3, #3
 8001b2a:	e000      	b.n	8001b2e <NVIC_EncodePriority+0x32>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43da      	mvns	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	401a      	ands	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4e:	43d9      	mvns	r1, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b54:	4313      	orrs	r3, r2
         );
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3724      	adds	r7, #36	; 0x24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b74:	d301      	bcc.n	8001b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b76:	2301      	movs	r3, #1
 8001b78:	e00f      	b.n	8001b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <SysTick_Config+0x40>)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b82:	210f      	movs	r1, #15
 8001b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b88:	f7ff ff8e 	bl	8001aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <SysTick_Config+0x40>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b92:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <SysTick_Config+0x40>)
 8001b94:	2207      	movs	r2, #7
 8001b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	e000e010 	.word	0xe000e010

08001ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff ff29 	bl	8001a08 <__NVIC_SetPriorityGrouping>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b086      	sub	sp, #24
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
 8001bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd0:	f7ff ff3e 	bl	8001a50 <__NVIC_GetPriorityGrouping>
 8001bd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	68b9      	ldr	r1, [r7, #8]
 8001bda:	6978      	ldr	r0, [r7, #20]
 8001bdc:	f7ff ff8e 	bl	8001afc <NVIC_EncodePriority>
 8001be0:	4602      	mov	r2, r0
 8001be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be6:	4611      	mov	r1, r2
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ff5d 	bl	8001aa8 <__NVIC_SetPriority>
}
 8001bee:	bf00      	nop
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff31 	bl	8001a6c <__NVIC_EnableIRQ>
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff ffa2 	bl	8001b64 <SysTick_Config>
 8001c20:	4603      	mov	r3, r0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b084      	sub	sp, #16
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c36:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c38:	f7ff feb6 	bl	80019a8 <HAL_GetTick>
 8001c3c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d008      	beq.n	8001c5c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2280      	movs	r2, #128	; 0x80
 8001c4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e052      	b.n	8001d02 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0216 	bic.w	r2, r2, #22
 8001c6a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	695a      	ldr	r2, [r3, #20]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c7a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d103      	bne.n	8001c8c <HAL_DMA_Abort+0x62>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d007      	beq.n	8001c9c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 0208 	bic.w	r2, r2, #8
 8001c9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0201 	bic.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cac:	e013      	b.n	8001cd6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cae:	f7ff fe7b 	bl	80019a8 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b05      	cmp	r3, #5
 8001cba:	d90c      	bls.n	8001cd6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e015      	b.n	8001d02 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1e4      	bne.n	8001cae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce8:	223f      	movs	r2, #63	; 0x3f
 8001cea:	409a      	lsls	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d004      	beq.n	8001d28 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2280      	movs	r2, #128	; 0x80
 8001d22:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e00c      	b.n	8001d42 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2205      	movs	r2, #5
 8001d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 0201 	bic.w	r2, r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
	...

08001d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b089      	sub	sp, #36	; 0x24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d66:	2300      	movs	r3, #0
 8001d68:	61fb      	str	r3, [r7, #28]
 8001d6a:	e165      	b.n	8002038 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	f040 8154 	bne.w	8002032 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d005      	beq.n	8001da2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d130      	bne.n	8001e04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	2203      	movs	r2, #3
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4013      	ands	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dd8:	2201      	movs	r2, #1
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	091b      	lsrs	r3, r3, #4
 8001dee:	f003 0201 	and.w	r2, r3, #1
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	2b03      	cmp	r3, #3
 8001e0e:	d017      	beq.n	8001e40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d123      	bne.n	8001e94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	08da      	lsrs	r2, r3, #3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3208      	adds	r2, #8
 8001e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	220f      	movs	r2, #15
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	08da      	lsrs	r2, r3, #3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3208      	adds	r2, #8
 8001e8e:	69b9      	ldr	r1, [r7, #24]
 8001e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0203 	and.w	r2, r3, #3
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 80ae 	beq.w	8002032 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	4b5d      	ldr	r3, [pc, #372]	; (8002050 <HAL_GPIO_Init+0x300>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	4a5c      	ldr	r2, [pc, #368]	; (8002050 <HAL_GPIO_Init+0x300>)
 8001ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee6:	4b5a      	ldr	r3, [pc, #360]	; (8002050 <HAL_GPIO_Init+0x300>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ef2:	4a58      	ldr	r2, [pc, #352]	; (8002054 <HAL_GPIO_Init+0x304>)
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	089b      	lsrs	r3, r3, #2
 8001ef8:	3302      	adds	r3, #2
 8001efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	220f      	movs	r2, #15
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4f      	ldr	r2, [pc, #316]	; (8002058 <HAL_GPIO_Init+0x308>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d025      	beq.n	8001f6a <HAL_GPIO_Init+0x21a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a4e      	ldr	r2, [pc, #312]	; (800205c <HAL_GPIO_Init+0x30c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d01f      	beq.n	8001f66 <HAL_GPIO_Init+0x216>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4d      	ldr	r2, [pc, #308]	; (8002060 <HAL_GPIO_Init+0x310>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d019      	beq.n	8001f62 <HAL_GPIO_Init+0x212>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a4c      	ldr	r2, [pc, #304]	; (8002064 <HAL_GPIO_Init+0x314>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d013      	beq.n	8001f5e <HAL_GPIO_Init+0x20e>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a4b      	ldr	r2, [pc, #300]	; (8002068 <HAL_GPIO_Init+0x318>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d00d      	beq.n	8001f5a <HAL_GPIO_Init+0x20a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a4a      	ldr	r2, [pc, #296]	; (800206c <HAL_GPIO_Init+0x31c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d007      	beq.n	8001f56 <HAL_GPIO_Init+0x206>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a49      	ldr	r2, [pc, #292]	; (8002070 <HAL_GPIO_Init+0x320>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d101      	bne.n	8001f52 <HAL_GPIO_Init+0x202>
 8001f4e:	2306      	movs	r3, #6
 8001f50:	e00c      	b.n	8001f6c <HAL_GPIO_Init+0x21c>
 8001f52:	2307      	movs	r3, #7
 8001f54:	e00a      	b.n	8001f6c <HAL_GPIO_Init+0x21c>
 8001f56:	2305      	movs	r3, #5
 8001f58:	e008      	b.n	8001f6c <HAL_GPIO_Init+0x21c>
 8001f5a:	2304      	movs	r3, #4
 8001f5c:	e006      	b.n	8001f6c <HAL_GPIO_Init+0x21c>
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e004      	b.n	8001f6c <HAL_GPIO_Init+0x21c>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e002      	b.n	8001f6c <HAL_GPIO_Init+0x21c>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <HAL_GPIO_Init+0x21c>
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	69fa      	ldr	r2, [r7, #28]
 8001f6e:	f002 0203 	and.w	r2, r2, #3
 8001f72:	0092      	lsls	r2, r2, #2
 8001f74:	4093      	lsls	r3, r2
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f7c:	4935      	ldr	r1, [pc, #212]	; (8002054 <HAL_GPIO_Init+0x304>)
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	089b      	lsrs	r3, r3, #2
 8001f82:	3302      	adds	r3, #2
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f8a:	4b3a      	ldr	r3, [pc, #232]	; (8002074 <HAL_GPIO_Init+0x324>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	43db      	mvns	r3, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4013      	ands	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fae:	4a31      	ldr	r2, [pc, #196]	; (8002074 <HAL_GPIO_Init+0x324>)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fb4:	4b2f      	ldr	r3, [pc, #188]	; (8002074 <HAL_GPIO_Init+0x324>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fd8:	4a26      	ldr	r2, [pc, #152]	; (8002074 <HAL_GPIO_Init+0x324>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fde:	4b25      	ldr	r3, [pc, #148]	; (8002074 <HAL_GPIO_Init+0x324>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002002:	4a1c      	ldr	r2, [pc, #112]	; (8002074 <HAL_GPIO_Init+0x324>)
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002008:	4b1a      	ldr	r3, [pc, #104]	; (8002074 <HAL_GPIO_Init+0x324>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800202c:	4a11      	ldr	r2, [pc, #68]	; (8002074 <HAL_GPIO_Init+0x324>)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3301      	adds	r3, #1
 8002036:	61fb      	str	r3, [r7, #28]
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	2b0f      	cmp	r3, #15
 800203c:	f67f ae96 	bls.w	8001d6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002040:	bf00      	nop
 8002042:	bf00      	nop
 8002044:	3724      	adds	r7, #36	; 0x24
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40023800 	.word	0x40023800
 8002054:	40013800 	.word	0x40013800
 8002058:	40020000 	.word	0x40020000
 800205c:	40020400 	.word	0x40020400
 8002060:	40020800 	.word	0x40020800
 8002064:	40020c00 	.word	0x40020c00
 8002068:	40021000 	.word	0x40021000
 800206c:	40021400 	.word	0x40021400
 8002070:	40021800 	.word	0x40021800
 8002074:	40013c00 	.word	0x40013c00

08002078 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	887b      	ldrh	r3, [r7, #2]
 800208a:	4013      	ands	r3, r2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d002      	beq.n	8002096 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002090:	2301      	movs	r3, #1
 8002092:	73fb      	strb	r3, [r7, #15]
 8002094:	e001      	b.n	800209a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002096:	2300      	movs	r3, #0
 8002098:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800209a:	7bfb      	ldrb	r3, [r7, #15]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	807b      	strh	r3, [r7, #2]
 80020b4:	4613      	mov	r3, r2
 80020b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020b8:	787b      	ldrb	r3, [r7, #1]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020be:	887a      	ldrh	r2, [r7, #2]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020c4:	e003      	b.n	80020ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020c6:	887b      	ldrh	r3, [r7, #2]
 80020c8:	041a      	lsls	r2, r3, #16
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	619a      	str	r2, [r3, #24]
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
	...

080020dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0cc      	b.n	800228a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020f0:	4b68      	ldr	r3, [pc, #416]	; (8002294 <HAL_RCC_ClockConfig+0x1b8>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 030f 	and.w	r3, r3, #15
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d90c      	bls.n	8002118 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fe:	4b65      	ldr	r3, [pc, #404]	; (8002294 <HAL_RCC_ClockConfig+0x1b8>)
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002106:	4b63      	ldr	r3, [pc, #396]	; (8002294 <HAL_RCC_ClockConfig+0x1b8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d001      	beq.n	8002118 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e0b8      	b.n	800228a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d020      	beq.n	8002166 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d005      	beq.n	800213c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002130:	4b59      	ldr	r3, [pc, #356]	; (8002298 <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	4a58      	ldr	r2, [pc, #352]	; (8002298 <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800213a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002148:	4b53      	ldr	r3, [pc, #332]	; (8002298 <HAL_RCC_ClockConfig+0x1bc>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	4a52      	ldr	r2, [pc, #328]	; (8002298 <HAL_RCC_ClockConfig+0x1bc>)
 800214e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002152:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002154:	4b50      	ldr	r3, [pc, #320]	; (8002298 <HAL_RCC_ClockConfig+0x1bc>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	494d      	ldr	r1, [pc, #308]	; (8002298 <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	4313      	orrs	r3, r2
 8002164:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d044      	beq.n	80021fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d107      	bne.n	800218a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217a:	4b47      	ldr	r3, [pc, #284]	; (8002298 <HAL_RCC_ClockConfig+0x1bc>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d119      	bne.n	80021ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e07f      	b.n	800228a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b02      	cmp	r3, #2
 8002190:	d003      	beq.n	800219a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002196:	2b03      	cmp	r3, #3
 8002198:	d107      	bne.n	80021aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800219a:	4b3f      	ldr	r3, [pc, #252]	; (8002298 <HAL_RCC_ClockConfig+0x1bc>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d109      	bne.n	80021ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e06f      	b.n	800228a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021aa:	4b3b      	ldr	r3, [pc, #236]	; (8002298 <HAL_RCC_ClockConfig+0x1bc>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e067      	b.n	800228a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ba:	4b37      	ldr	r3, [pc, #220]	; (8002298 <HAL_RCC_ClockConfig+0x1bc>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f023 0203 	bic.w	r2, r3, #3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	4934      	ldr	r1, [pc, #208]	; (8002298 <HAL_RCC_ClockConfig+0x1bc>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021cc:	f7ff fbec 	bl	80019a8 <HAL_GetTick>
 80021d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d2:	e00a      	b.n	80021ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d4:	f7ff fbe8 	bl	80019a8 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e04f      	b.n	800228a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ea:	4b2b      	ldr	r3, [pc, #172]	; (8002298 <HAL_RCC_ClockConfig+0x1bc>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 020c 	and.w	r2, r3, #12
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d1eb      	bne.n	80021d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021fc:	4b25      	ldr	r3, [pc, #148]	; (8002294 <HAL_RCC_ClockConfig+0x1b8>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 030f 	and.w	r3, r3, #15
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d20c      	bcs.n	8002224 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220a:	4b22      	ldr	r3, [pc, #136]	; (8002294 <HAL_RCC_ClockConfig+0x1b8>)
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002212:	4b20      	ldr	r3, [pc, #128]	; (8002294 <HAL_RCC_ClockConfig+0x1b8>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	d001      	beq.n	8002224 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e032      	b.n	800228a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b00      	cmp	r3, #0
 800222e:	d008      	beq.n	8002242 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002230:	4b19      	ldr	r3, [pc, #100]	; (8002298 <HAL_RCC_ClockConfig+0x1bc>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	4916      	ldr	r1, [pc, #88]	; (8002298 <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	4313      	orrs	r3, r2
 8002240:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d009      	beq.n	8002262 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800224e:	4b12      	ldr	r3, [pc, #72]	; (8002298 <HAL_RCC_ClockConfig+0x1bc>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	490e      	ldr	r1, [pc, #56]	; (8002298 <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	4313      	orrs	r3, r2
 8002260:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002262:	f000 f855 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 8002266:	4602      	mov	r2, r0
 8002268:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	091b      	lsrs	r3, r3, #4
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	490a      	ldr	r1, [pc, #40]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 8002274:	5ccb      	ldrb	r3, [r1, r3]
 8002276:	fa22 f303 	lsr.w	r3, r2, r3
 800227a:	4a09      	ldr	r2, [pc, #36]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800227c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800227e:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff fb4c 	bl	8001920 <HAL_InitTick>

  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40023c00 	.word	0x40023c00
 8002298:	40023800 	.word	0x40023800
 800229c:	08003a9c 	.word	0x08003a9c
 80022a0:	20000070 	.word	0x20000070
 80022a4:	20000074 	.word	0x20000074

080022a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022ac:	4b03      	ldr	r3, [pc, #12]	; (80022bc <HAL_RCC_GetHCLKFreq+0x14>)
 80022ae:	681b      	ldr	r3, [r3, #0]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	20000070 	.word	0x20000070

080022c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022c4:	f7ff fff0 	bl	80022a8 <HAL_RCC_GetHCLKFreq>
 80022c8:	4602      	mov	r2, r0
 80022ca:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	0a9b      	lsrs	r3, r3, #10
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	4903      	ldr	r1, [pc, #12]	; (80022e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022d6:	5ccb      	ldrb	r3, [r1, r3]
 80022d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022dc:	4618      	mov	r0, r3
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40023800 	.word	0x40023800
 80022e4:	08003aac 	.word	0x08003aac

080022e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022ec:	f7ff ffdc 	bl	80022a8 <HAL_RCC_GetHCLKFreq>
 80022f0:	4602      	mov	r2, r0
 80022f2:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	0b5b      	lsrs	r3, r3, #13
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	4903      	ldr	r1, [pc, #12]	; (800230c <HAL_RCC_GetPCLK2Freq+0x24>)
 80022fe:	5ccb      	ldrb	r3, [r1, r3]
 8002300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002304:	4618      	mov	r0, r3
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40023800 	.word	0x40023800
 800230c:	08003aac 	.word	0x08003aac

08002310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002314:	b088      	sub	sp, #32
 8002316:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800232c:	4bce      	ldr	r3, [pc, #824]	; (8002668 <HAL_RCC_GetSysClockFreq+0x358>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 030c 	and.w	r3, r3, #12
 8002334:	2b0c      	cmp	r3, #12
 8002336:	f200 818d 	bhi.w	8002654 <HAL_RCC_GetSysClockFreq+0x344>
 800233a:	a201      	add	r2, pc, #4	; (adr r2, 8002340 <HAL_RCC_GetSysClockFreq+0x30>)
 800233c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002340:	08002375 	.word	0x08002375
 8002344:	08002655 	.word	0x08002655
 8002348:	08002655 	.word	0x08002655
 800234c:	08002655 	.word	0x08002655
 8002350:	0800237b 	.word	0x0800237b
 8002354:	08002655 	.word	0x08002655
 8002358:	08002655 	.word	0x08002655
 800235c:	08002655 	.word	0x08002655
 8002360:	08002381 	.word	0x08002381
 8002364:	08002655 	.word	0x08002655
 8002368:	08002655 	.word	0x08002655
 800236c:	08002655 	.word	0x08002655
 8002370:	080024f5 	.word	0x080024f5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002374:	4bbd      	ldr	r3, [pc, #756]	; (800266c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002376:	61bb      	str	r3, [r7, #24]
       break;
 8002378:	e16f      	b.n	800265a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800237a:	4bbd      	ldr	r3, [pc, #756]	; (8002670 <HAL_RCC_GetSysClockFreq+0x360>)
 800237c:	61bb      	str	r3, [r7, #24]
      break;
 800237e:	e16c      	b.n	800265a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002380:	4bb9      	ldr	r3, [pc, #740]	; (8002668 <HAL_RCC_GetSysClockFreq+0x358>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002388:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800238a:	4bb7      	ldr	r3, [pc, #732]	; (8002668 <HAL_RCC_GetSysClockFreq+0x358>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d053      	beq.n	800243e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002396:	4bb4      	ldr	r3, [pc, #720]	; (8002668 <HAL_RCC_GetSysClockFreq+0x358>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	099b      	lsrs	r3, r3, #6
 800239c:	461a      	mov	r2, r3
 800239e:	f04f 0300 	mov.w	r3, #0
 80023a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80023a6:	f04f 0100 	mov.w	r1, #0
 80023aa:	ea02 0400 	and.w	r4, r2, r0
 80023ae:	603c      	str	r4, [r7, #0]
 80023b0:	400b      	ands	r3, r1
 80023b2:	607b      	str	r3, [r7, #4]
 80023b4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023b8:	4620      	mov	r0, r4
 80023ba:	4629      	mov	r1, r5
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	014b      	lsls	r3, r1, #5
 80023c6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023ca:	0142      	lsls	r2, r0, #5
 80023cc:	4610      	mov	r0, r2
 80023ce:	4619      	mov	r1, r3
 80023d0:	4623      	mov	r3, r4
 80023d2:	1ac0      	subs	r0, r0, r3
 80023d4:	462b      	mov	r3, r5
 80023d6:	eb61 0103 	sbc.w	r1, r1, r3
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	018b      	lsls	r3, r1, #6
 80023e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80023e8:	0182      	lsls	r2, r0, #6
 80023ea:	1a12      	subs	r2, r2, r0
 80023ec:	eb63 0301 	sbc.w	r3, r3, r1
 80023f0:	f04f 0000 	mov.w	r0, #0
 80023f4:	f04f 0100 	mov.w	r1, #0
 80023f8:	00d9      	lsls	r1, r3, #3
 80023fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023fe:	00d0      	lsls	r0, r2, #3
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4621      	mov	r1, r4
 8002406:	1852      	adds	r2, r2, r1
 8002408:	4629      	mov	r1, r5
 800240a:	eb43 0101 	adc.w	r1, r3, r1
 800240e:	460b      	mov	r3, r1
 8002410:	f04f 0000 	mov.w	r0, #0
 8002414:	f04f 0100 	mov.w	r1, #0
 8002418:	0259      	lsls	r1, r3, #9
 800241a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800241e:	0250      	lsls	r0, r2, #9
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4610      	mov	r0, r2
 8002426:	4619      	mov	r1, r3
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	461a      	mov	r2, r3
 800242c:	f04f 0300 	mov.w	r3, #0
 8002430:	f7fe fe5e 	bl	80010f0 <__aeabi_uldivmod>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4613      	mov	r3, r2
 800243a:	61fb      	str	r3, [r7, #28]
 800243c:	e04c      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800243e:	4b8a      	ldr	r3, [pc, #552]	; (8002668 <HAL_RCC_GetSysClockFreq+0x358>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	099b      	lsrs	r3, r3, #6
 8002444:	461a      	mov	r2, r3
 8002446:	f04f 0300 	mov.w	r3, #0
 800244a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800244e:	f04f 0100 	mov.w	r1, #0
 8002452:	ea02 0a00 	and.w	sl, r2, r0
 8002456:	ea03 0b01 	and.w	fp, r3, r1
 800245a:	4650      	mov	r0, sl
 800245c:	4659      	mov	r1, fp
 800245e:	f04f 0200 	mov.w	r2, #0
 8002462:	f04f 0300 	mov.w	r3, #0
 8002466:	014b      	lsls	r3, r1, #5
 8002468:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800246c:	0142      	lsls	r2, r0, #5
 800246e:	4610      	mov	r0, r2
 8002470:	4619      	mov	r1, r3
 8002472:	ebb0 000a 	subs.w	r0, r0, sl
 8002476:	eb61 010b 	sbc.w	r1, r1, fp
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	f04f 0300 	mov.w	r3, #0
 8002482:	018b      	lsls	r3, r1, #6
 8002484:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002488:	0182      	lsls	r2, r0, #6
 800248a:	1a12      	subs	r2, r2, r0
 800248c:	eb63 0301 	sbc.w	r3, r3, r1
 8002490:	f04f 0000 	mov.w	r0, #0
 8002494:	f04f 0100 	mov.w	r1, #0
 8002498:	00d9      	lsls	r1, r3, #3
 800249a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800249e:	00d0      	lsls	r0, r2, #3
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	eb12 020a 	adds.w	r2, r2, sl
 80024a8:	eb43 030b 	adc.w	r3, r3, fp
 80024ac:	f04f 0000 	mov.w	r0, #0
 80024b0:	f04f 0100 	mov.w	r1, #0
 80024b4:	0299      	lsls	r1, r3, #10
 80024b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80024ba:	0290      	lsls	r0, r2, #10
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4610      	mov	r0, r2
 80024c2:	4619      	mov	r1, r3
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	461a      	mov	r2, r3
 80024c8:	f04f 0300 	mov.w	r3, #0
 80024cc:	f7fe fe10 	bl	80010f0 <__aeabi_uldivmod>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4613      	mov	r3, r2
 80024d6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024d8:	4b63      	ldr	r3, [pc, #396]	; (8002668 <HAL_RCC_GetSysClockFreq+0x358>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	0c1b      	lsrs	r3, r3, #16
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	3301      	adds	r3, #1
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80024e8:	69fa      	ldr	r2, [r7, #28]
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f0:	61bb      	str	r3, [r7, #24]
      break;
 80024f2:	e0b2      	b.n	800265a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024f4:	4b5c      	ldr	r3, [pc, #368]	; (8002668 <HAL_RCC_GetSysClockFreq+0x358>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024fc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024fe:	4b5a      	ldr	r3, [pc, #360]	; (8002668 <HAL_RCC_GetSysClockFreq+0x358>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d04d      	beq.n	80025a6 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800250a:	4b57      	ldr	r3, [pc, #348]	; (8002668 <HAL_RCC_GetSysClockFreq+0x358>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	099b      	lsrs	r3, r3, #6
 8002510:	461a      	mov	r2, r3
 8002512:	f04f 0300 	mov.w	r3, #0
 8002516:	f240 10ff 	movw	r0, #511	; 0x1ff
 800251a:	f04f 0100 	mov.w	r1, #0
 800251e:	ea02 0800 	and.w	r8, r2, r0
 8002522:	ea03 0901 	and.w	r9, r3, r1
 8002526:	4640      	mov	r0, r8
 8002528:	4649      	mov	r1, r9
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	f04f 0300 	mov.w	r3, #0
 8002532:	014b      	lsls	r3, r1, #5
 8002534:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002538:	0142      	lsls	r2, r0, #5
 800253a:	4610      	mov	r0, r2
 800253c:	4619      	mov	r1, r3
 800253e:	ebb0 0008 	subs.w	r0, r0, r8
 8002542:	eb61 0109 	sbc.w	r1, r1, r9
 8002546:	f04f 0200 	mov.w	r2, #0
 800254a:	f04f 0300 	mov.w	r3, #0
 800254e:	018b      	lsls	r3, r1, #6
 8002550:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002554:	0182      	lsls	r2, r0, #6
 8002556:	1a12      	subs	r2, r2, r0
 8002558:	eb63 0301 	sbc.w	r3, r3, r1
 800255c:	f04f 0000 	mov.w	r0, #0
 8002560:	f04f 0100 	mov.w	r1, #0
 8002564:	00d9      	lsls	r1, r3, #3
 8002566:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800256a:	00d0      	lsls	r0, r2, #3
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	eb12 0208 	adds.w	r2, r2, r8
 8002574:	eb43 0309 	adc.w	r3, r3, r9
 8002578:	f04f 0000 	mov.w	r0, #0
 800257c:	f04f 0100 	mov.w	r1, #0
 8002580:	0259      	lsls	r1, r3, #9
 8002582:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002586:	0250      	lsls	r0, r2, #9
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4610      	mov	r0, r2
 800258e:	4619      	mov	r1, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	461a      	mov	r2, r3
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	f7fe fdaa 	bl	80010f0 <__aeabi_uldivmod>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4613      	mov	r3, r2
 80025a2:	61fb      	str	r3, [r7, #28]
 80025a4:	e04a      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025a6:	4b30      	ldr	r3, [pc, #192]	; (8002668 <HAL_RCC_GetSysClockFreq+0x358>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	099b      	lsrs	r3, r3, #6
 80025ac:	461a      	mov	r2, r3
 80025ae:	f04f 0300 	mov.w	r3, #0
 80025b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80025b6:	f04f 0100 	mov.w	r1, #0
 80025ba:	ea02 0400 	and.w	r4, r2, r0
 80025be:	ea03 0501 	and.w	r5, r3, r1
 80025c2:	4620      	mov	r0, r4
 80025c4:	4629      	mov	r1, r5
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	f04f 0300 	mov.w	r3, #0
 80025ce:	014b      	lsls	r3, r1, #5
 80025d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80025d4:	0142      	lsls	r2, r0, #5
 80025d6:	4610      	mov	r0, r2
 80025d8:	4619      	mov	r1, r3
 80025da:	1b00      	subs	r0, r0, r4
 80025dc:	eb61 0105 	sbc.w	r1, r1, r5
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	f04f 0300 	mov.w	r3, #0
 80025e8:	018b      	lsls	r3, r1, #6
 80025ea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80025ee:	0182      	lsls	r2, r0, #6
 80025f0:	1a12      	subs	r2, r2, r0
 80025f2:	eb63 0301 	sbc.w	r3, r3, r1
 80025f6:	f04f 0000 	mov.w	r0, #0
 80025fa:	f04f 0100 	mov.w	r1, #0
 80025fe:	00d9      	lsls	r1, r3, #3
 8002600:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002604:	00d0      	lsls	r0, r2, #3
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	1912      	adds	r2, r2, r4
 800260c:	eb45 0303 	adc.w	r3, r5, r3
 8002610:	f04f 0000 	mov.w	r0, #0
 8002614:	f04f 0100 	mov.w	r1, #0
 8002618:	0299      	lsls	r1, r3, #10
 800261a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800261e:	0290      	lsls	r0, r2, #10
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4610      	mov	r0, r2
 8002626:	4619      	mov	r1, r3
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	461a      	mov	r2, r3
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	f7fe fd5e 	bl	80010f0 <__aeabi_uldivmod>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	4613      	mov	r3, r2
 800263a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800263c:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <HAL_RCC_GetSysClockFreq+0x358>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	0f1b      	lsrs	r3, r3, #28
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002648:	69fa      	ldr	r2, [r7, #28]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002650:	61bb      	str	r3, [r7, #24]
      break;
 8002652:	e002      	b.n	800265a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002654:	4b05      	ldr	r3, [pc, #20]	; (800266c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002656:	61bb      	str	r3, [r7, #24]
      break;
 8002658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800265a:	69bb      	ldr	r3, [r7, #24]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3720      	adds	r7, #32
 8002660:	46bd      	mov	sp, r7
 8002662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002666:	bf00      	nop
 8002668:	40023800 	.word	0x40023800
 800266c:	00f42400 	.word	0x00f42400
 8002670:	007a1200 	.word	0x007a1200

08002674 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e28d      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 8083 	beq.w	800279a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002694:	4b94      	ldr	r3, [pc, #592]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 030c 	and.w	r3, r3, #12
 800269c:	2b04      	cmp	r3, #4
 800269e:	d019      	beq.n	80026d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026a0:	4b91      	ldr	r3, [pc, #580]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d106      	bne.n	80026ba <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026ac:	4b8e      	ldr	r3, [pc, #568]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026b8:	d00c      	beq.n	80026d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ba:	4b8b      	ldr	r3, [pc, #556]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026c2:	2b0c      	cmp	r3, #12
 80026c4:	d112      	bne.n	80026ec <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026c6:	4b88      	ldr	r3, [pc, #544]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026d2:	d10b      	bne.n	80026ec <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d4:	4b84      	ldr	r3, [pc, #528]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d05b      	beq.n	8002798 <HAL_RCC_OscConfig+0x124>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d157      	bne.n	8002798 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e25a      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f4:	d106      	bne.n	8002704 <HAL_RCC_OscConfig+0x90>
 80026f6:	4b7c      	ldr	r3, [pc, #496]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a7b      	ldr	r2, [pc, #492]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 80026fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	e01d      	b.n	8002740 <HAL_RCC_OscConfig+0xcc>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800270c:	d10c      	bne.n	8002728 <HAL_RCC_OscConfig+0xb4>
 800270e:	4b76      	ldr	r3, [pc, #472]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a75      	ldr	r2, [pc, #468]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 8002714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	4b73      	ldr	r3, [pc, #460]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a72      	ldr	r2, [pc, #456]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 8002720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	e00b      	b.n	8002740 <HAL_RCC_OscConfig+0xcc>
 8002728:	4b6f      	ldr	r3, [pc, #444]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a6e      	ldr	r2, [pc, #440]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 800272e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	4b6c      	ldr	r3, [pc, #432]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a6b      	ldr	r2, [pc, #428]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 800273a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800273e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d013      	beq.n	8002770 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7ff f92e 	bl	80019a8 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002750:	f7ff f92a 	bl	80019a8 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b64      	cmp	r3, #100	; 0x64
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e21f      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002762:	4b61      	ldr	r3, [pc, #388]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCC_OscConfig+0xdc>
 800276e:	e014      	b.n	800279a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002770:	f7ff f91a 	bl	80019a8 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002778:	f7ff f916 	bl	80019a8 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b64      	cmp	r3, #100	; 0x64
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e20b      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800278a:	4b57      	ldr	r3, [pc, #348]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f0      	bne.n	8002778 <HAL_RCC_OscConfig+0x104>
 8002796:	e000      	b.n	800279a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d06f      	beq.n	8002886 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80027a6:	4b50      	ldr	r3, [pc, #320]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d017      	beq.n	80027e2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027b2:	4b4d      	ldr	r3, [pc, #308]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d105      	bne.n	80027ca <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027be:	4b4a      	ldr	r3, [pc, #296]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00b      	beq.n	80027e2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ca:	4b47      	ldr	r3, [pc, #284]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027d2:	2b0c      	cmp	r3, #12
 80027d4:	d11c      	bne.n	8002810 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027d6:	4b44      	ldr	r3, [pc, #272]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d116      	bne.n	8002810 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e2:	4b41      	ldr	r3, [pc, #260]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d005      	beq.n	80027fa <HAL_RCC_OscConfig+0x186>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d001      	beq.n	80027fa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e1d3      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fa:	4b3b      	ldr	r3, [pc, #236]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4937      	ldr	r1, [pc, #220]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 800280a:	4313      	orrs	r3, r2
 800280c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800280e:	e03a      	b.n	8002886 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d020      	beq.n	800285a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002818:	4b34      	ldr	r3, [pc, #208]	; (80028ec <HAL_RCC_OscConfig+0x278>)
 800281a:	2201      	movs	r2, #1
 800281c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281e:	f7ff f8c3 	bl	80019a8 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002826:	f7ff f8bf 	bl	80019a8 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e1b4      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002838:	4b2b      	ldr	r3, [pc, #172]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f0      	beq.n	8002826 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002844:	4b28      	ldr	r3, [pc, #160]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4925      	ldr	r1, [pc, #148]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 8002854:	4313      	orrs	r3, r2
 8002856:	600b      	str	r3, [r1, #0]
 8002858:	e015      	b.n	8002886 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800285a:	4b24      	ldr	r3, [pc, #144]	; (80028ec <HAL_RCC_OscConfig+0x278>)
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002860:	f7ff f8a2 	bl	80019a8 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002868:	f7ff f89e 	bl	80019a8 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e193      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287a:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b00      	cmp	r3, #0
 8002890:	d036      	beq.n	8002900 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d016      	beq.n	80028c8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800289a:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <HAL_RCC_OscConfig+0x27c>)
 800289c:	2201      	movs	r2, #1
 800289e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a0:	f7ff f882 	bl	80019a8 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028a8:	f7ff f87e 	bl	80019a8 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e173      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ba:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 80028bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0f0      	beq.n	80028a8 <HAL_RCC_OscConfig+0x234>
 80028c6:	e01b      	b.n	8002900 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028c8:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <HAL_RCC_OscConfig+0x27c>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ce:	f7ff f86b 	bl	80019a8 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d4:	e00e      	b.n	80028f4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028d6:	f7ff f867 	bl	80019a8 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d907      	bls.n	80028f4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e15c      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
 80028e8:	40023800 	.word	0x40023800
 80028ec:	42470000 	.word	0x42470000
 80028f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f4:	4b8a      	ldr	r3, [pc, #552]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 80028f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1ea      	bne.n	80028d6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 8097 	beq.w	8002a3c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800290e:	2300      	movs	r3, #0
 8002910:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002912:	4b83      	ldr	r3, [pc, #524]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10f      	bne.n	800293e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	4b7f      	ldr	r3, [pc, #508]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	4a7e      	ldr	r2, [pc, #504]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 8002928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292c:	6413      	str	r3, [r2, #64]	; 0x40
 800292e:	4b7c      	ldr	r3, [pc, #496]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	60bb      	str	r3, [r7, #8]
 8002938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800293a:	2301      	movs	r3, #1
 800293c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293e:	4b79      	ldr	r3, [pc, #484]	; (8002b24 <HAL_RCC_OscConfig+0x4b0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d118      	bne.n	800297c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800294a:	4b76      	ldr	r3, [pc, #472]	; (8002b24 <HAL_RCC_OscConfig+0x4b0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a75      	ldr	r2, [pc, #468]	; (8002b24 <HAL_RCC_OscConfig+0x4b0>)
 8002950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002956:	f7ff f827 	bl	80019a8 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295e:	f7ff f823 	bl	80019a8 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e118      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002970:	4b6c      	ldr	r3, [pc, #432]	; (8002b24 <HAL_RCC_OscConfig+0x4b0>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0f0      	beq.n	800295e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d106      	bne.n	8002992 <HAL_RCC_OscConfig+0x31e>
 8002984:	4b66      	ldr	r3, [pc, #408]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 8002986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002988:	4a65      	ldr	r2, [pc, #404]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	6713      	str	r3, [r2, #112]	; 0x70
 8002990:	e01c      	b.n	80029cc <HAL_RCC_OscConfig+0x358>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2b05      	cmp	r3, #5
 8002998:	d10c      	bne.n	80029b4 <HAL_RCC_OscConfig+0x340>
 800299a:	4b61      	ldr	r3, [pc, #388]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 800299c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299e:	4a60      	ldr	r2, [pc, #384]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 80029a0:	f043 0304 	orr.w	r3, r3, #4
 80029a4:	6713      	str	r3, [r2, #112]	; 0x70
 80029a6:	4b5e      	ldr	r3, [pc, #376]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 80029a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029aa:	4a5d      	ldr	r2, [pc, #372]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	6713      	str	r3, [r2, #112]	; 0x70
 80029b2:	e00b      	b.n	80029cc <HAL_RCC_OscConfig+0x358>
 80029b4:	4b5a      	ldr	r3, [pc, #360]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 80029b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b8:	4a59      	ldr	r2, [pc, #356]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 80029ba:	f023 0301 	bic.w	r3, r3, #1
 80029be:	6713      	str	r3, [r2, #112]	; 0x70
 80029c0:	4b57      	ldr	r3, [pc, #348]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 80029c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c4:	4a56      	ldr	r2, [pc, #344]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 80029c6:	f023 0304 	bic.w	r3, r3, #4
 80029ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d015      	beq.n	8002a00 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d4:	f7fe ffe8 	bl	80019a8 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029da:	e00a      	b.n	80029f2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029dc:	f7fe ffe4 	bl	80019a8 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e0d7      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f2:	4b4b      	ldr	r3, [pc, #300]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 80029f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0ee      	beq.n	80029dc <HAL_RCC_OscConfig+0x368>
 80029fe:	e014      	b.n	8002a2a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a00:	f7fe ffd2 	bl	80019a8 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a06:	e00a      	b.n	8002a1e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a08:	f7fe ffce 	bl	80019a8 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e0c1      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a1e:	4b40      	ldr	r3, [pc, #256]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 8002a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1ee      	bne.n	8002a08 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a2a:	7dfb      	ldrb	r3, [r7, #23]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d105      	bne.n	8002a3c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a30:	4b3b      	ldr	r3, [pc, #236]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	4a3a      	ldr	r2, [pc, #232]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 8002a36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 80ad 	beq.w	8002ba0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a46:	4b36      	ldr	r3, [pc, #216]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d060      	beq.n	8002b14 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d145      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5a:	4b33      	ldr	r3, [pc, #204]	; (8002b28 <HAL_RCC_OscConfig+0x4b4>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a60:	f7fe ffa2 	bl	80019a8 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a68:	f7fe ff9e 	bl	80019a8 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e093      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7a:	4b29      	ldr	r3, [pc, #164]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69da      	ldr	r2, [r3, #28]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	019b      	lsls	r3, r3, #6
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9c:	085b      	lsrs	r3, r3, #1
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	041b      	lsls	r3, r3, #16
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	061b      	lsls	r3, r3, #24
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab0:	071b      	lsls	r3, r3, #28
 8002ab2:	491b      	ldr	r1, [pc, #108]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab8:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <HAL_RCC_OscConfig+0x4b4>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abe:	f7fe ff73 	bl	80019a8 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac6:	f7fe ff6f 	bl	80019a8 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e064      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad8:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x452>
 8002ae4:	e05c      	b.n	8002ba0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae6:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <HAL_RCC_OscConfig+0x4b4>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aec:	f7fe ff5c 	bl	80019a8 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af4:	f7fe ff58 	bl	80019a8 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e04d      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x480>
 8002b12:	e045      	b.n	8002ba0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d107      	bne.n	8002b2c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e040      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40007000 	.word	0x40007000
 8002b28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b2c:	4b1f      	ldr	r3, [pc, #124]	; (8002bac <HAL_RCC_OscConfig+0x538>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d030      	beq.n	8002b9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d129      	bne.n	8002b9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d122      	bne.n	8002b9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d119      	bne.n	8002b9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b72:	085b      	lsrs	r3, r3, #1
 8002b74:	3b01      	subs	r3, #1
 8002b76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d10f      	bne.n	8002b9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d107      	bne.n	8002b9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e000      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800

08002bb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e03f      	b.n	8002c42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d106      	bne.n	8002bdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7fe fd8a 	bl	80016f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2224      	movs	r2, #36	; 0x24
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68da      	ldr	r2, [r3, #12]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 fd7b 	bl	80036f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695a      	ldr	r2, [r3, #20]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b08a      	sub	sp, #40	; 0x28
 8002c4e:	af02      	add	r7, sp, #8
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	603b      	str	r3, [r7, #0]
 8002c56:	4613      	mov	r3, r2
 8002c58:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b20      	cmp	r3, #32
 8002c68:	d17c      	bne.n	8002d64 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <HAL_UART_Transmit+0x2c>
 8002c70:	88fb      	ldrh	r3, [r7, #6]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e075      	b.n	8002d66 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_UART_Transmit+0x3e>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e06e      	b.n	8002d66 <HAL_UART_Transmit+0x11c>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2221      	movs	r2, #33	; 0x21
 8002c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c9e:	f7fe fe83 	bl	80019a8 <HAL_GetTick>
 8002ca2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	88fa      	ldrh	r2, [r7, #6]
 8002ca8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	88fa      	ldrh	r2, [r7, #6]
 8002cae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb8:	d108      	bne.n	8002ccc <HAL_UART_Transmit+0x82>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d104      	bne.n	8002ccc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	61bb      	str	r3, [r7, #24]
 8002cca:	e003      	b.n	8002cd4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002cdc:	e02a      	b.n	8002d34 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2180      	movs	r1, #128	; 0x80
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 faf9 	bl	80032e0 <UART_WaitOnFlagUntilTimeout>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e036      	b.n	8002d66 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10b      	bne.n	8002d16 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	881b      	ldrh	r3, [r3, #0]
 8002d02:	461a      	mov	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	3302      	adds	r3, #2
 8002d12:	61bb      	str	r3, [r7, #24]
 8002d14:	e007      	b.n	8002d26 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	781a      	ldrb	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	3301      	adds	r3, #1
 8002d24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1cf      	bne.n	8002cde <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2200      	movs	r2, #0
 8002d46:	2140      	movs	r1, #64	; 0x40
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 fac9 	bl	80032e0 <UART_WaitOnFlagUntilTimeout>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e006      	b.n	8002d66 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d60:	2300      	movs	r3, #0
 8002d62:	e000      	b.n	8002d66 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d64:	2302      	movs	r3, #2
  }
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3720      	adds	r7, #32
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
	...

08002d70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b0ba      	sub	sp, #232	; 0xe8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002dae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10f      	bne.n	8002dd6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dba:	f003 0320 	and.w	r3, r3, #32
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d009      	beq.n	8002dd6 <HAL_UART_IRQHandler+0x66>
 8002dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dc6:	f003 0320 	and.w	r3, r3, #32
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 fbd3 	bl	800357a <UART_Receive_IT>
      return;
 8002dd4:	e256      	b.n	8003284 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002dd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 80de 	beq.w	8002f9c <HAL_UART_IRQHandler+0x22c>
 8002de0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d106      	bne.n	8002dfa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002df0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 80d1 	beq.w	8002f9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00b      	beq.n	8002e1e <HAL_UART_IRQHandler+0xae>
 8002e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f043 0201 	orr.w	r2, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00b      	beq.n	8002e42 <HAL_UART_IRQHandler+0xd2>
 8002e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f043 0202 	orr.w	r2, r3, #2
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00b      	beq.n	8002e66 <HAL_UART_IRQHandler+0xf6>
 8002e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d005      	beq.n	8002e66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	f043 0204 	orr.w	r2, r3, #4
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d011      	beq.n	8002e96 <HAL_UART_IRQHandler+0x126>
 8002e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d105      	bne.n	8002e8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f043 0208 	orr.w	r2, r3, #8
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 81ed 	beq.w	800327a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ea4:	f003 0320 	and.w	r3, r3, #32
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <HAL_UART_IRQHandler+0x14e>
 8002eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eb0:	f003 0320 	and.w	r3, r3, #32
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 fb5e 	bl	800357a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec8:	2b40      	cmp	r3, #64	; 0x40
 8002eca:	bf0c      	ite	eq
 8002ecc:	2301      	moveq	r3, #1
 8002ece:	2300      	movne	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d103      	bne.n	8002eea <HAL_UART_IRQHandler+0x17a>
 8002ee2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d04f      	beq.n	8002f8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fa66 	bl	80033bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efa:	2b40      	cmp	r3, #64	; 0x40
 8002efc:	d141      	bne.n	8002f82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	3314      	adds	r3, #20
 8002f04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f0c:	e853 3f00 	ldrex	r3, [r3]
 8002f10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	3314      	adds	r3, #20
 8002f26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f3a:	e841 2300 	strex	r3, r2, [r1]
 8002f3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1d9      	bne.n	8002efe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d013      	beq.n	8002f7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f56:	4a7d      	ldr	r2, [pc, #500]	; (800314c <HAL_UART_IRQHandler+0x3dc>)
 8002f58:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fe fed3 	bl	8001d0a <HAL_DMA_Abort_IT>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d016      	beq.n	8002f98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f74:	4610      	mov	r0, r2
 8002f76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f78:	e00e      	b.n	8002f98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f99a 	bl	80032b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f80:	e00a      	b.n	8002f98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f996 	bl	80032b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f88:	e006      	b.n	8002f98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f992 	bl	80032b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002f96:	e170      	b.n	800327a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f98:	bf00      	nop
    return;
 8002f9a:	e16e      	b.n	800327a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	f040 814a 	bne.w	800323a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002faa:	f003 0310 	and.w	r3, r3, #16
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 8143 	beq.w	800323a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fb8:	f003 0310 	and.w	r3, r3, #16
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 813c 	beq.w	800323a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60bb      	str	r3, [r7, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe2:	2b40      	cmp	r3, #64	; 0x40
 8002fe4:	f040 80b4 	bne.w	8003150 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ff4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 8140 	beq.w	800327e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003002:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003006:	429a      	cmp	r2, r3
 8003008:	f080 8139 	bcs.w	800327e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003012:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800301e:	f000 8088 	beq.w	8003132 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	330c      	adds	r3, #12
 8003028:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003030:	e853 3f00 	ldrex	r3, [r3]
 8003034:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003038:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800303c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003040:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	330c      	adds	r3, #12
 800304a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800304e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003052:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003056:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800305a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800305e:	e841 2300 	strex	r3, r2, [r1]
 8003062:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003066:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1d9      	bne.n	8003022 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	3314      	adds	r3, #20
 8003074:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003076:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003078:	e853 3f00 	ldrex	r3, [r3]
 800307c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800307e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003080:	f023 0301 	bic.w	r3, r3, #1
 8003084:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3314      	adds	r3, #20
 800308e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003092:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003096:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003098:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800309a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800309e:	e841 2300 	strex	r3, r2, [r1]
 80030a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80030a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1e1      	bne.n	800306e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	3314      	adds	r3, #20
 80030b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030b4:	e853 3f00 	ldrex	r3, [r3]
 80030b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80030ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	3314      	adds	r3, #20
 80030ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80030ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80030d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80030d6:	e841 2300 	strex	r3, r2, [r1]
 80030da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80030dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1e3      	bne.n	80030aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2220      	movs	r2, #32
 80030e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	330c      	adds	r3, #12
 80030f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030fa:	e853 3f00 	ldrex	r3, [r3]
 80030fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003102:	f023 0310 	bic.w	r3, r3, #16
 8003106:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	330c      	adds	r3, #12
 8003110:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003114:	65ba      	str	r2, [r7, #88]	; 0x58
 8003116:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003118:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800311a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800311c:	e841 2300 	strex	r3, r2, [r1]
 8003120:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1e3      	bne.n	80030f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312c:	4618      	mov	r0, r3
 800312e:	f7fe fd7c 	bl	8001c2a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800313a:	b29b      	uxth	r3, r3
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	b29b      	uxth	r3, r3
 8003140:	4619      	mov	r1, r3
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f8c0 	bl	80032c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003148:	e099      	b.n	800327e <HAL_UART_IRQHandler+0x50e>
 800314a:	bf00      	nop
 800314c:	08003483 	.word	0x08003483
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003158:	b29b      	uxth	r3, r3
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003164:	b29b      	uxth	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 808b 	beq.w	8003282 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800316c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 8086 	beq.w	8003282 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	330c      	adds	r3, #12
 800317c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003180:	e853 3f00 	ldrex	r3, [r3]
 8003184:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003188:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800318c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	330c      	adds	r3, #12
 8003196:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800319a:	647a      	str	r2, [r7, #68]	; 0x44
 800319c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031a2:	e841 2300 	strex	r3, r2, [r1]
 80031a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1e3      	bne.n	8003176 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	3314      	adds	r3, #20
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	e853 3f00 	ldrex	r3, [r3]
 80031bc:	623b      	str	r3, [r7, #32]
   return(result);
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	f023 0301 	bic.w	r3, r3, #1
 80031c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3314      	adds	r3, #20
 80031ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031d2:	633a      	str	r2, [r7, #48]	; 0x30
 80031d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031da:	e841 2300 	strex	r3, r2, [r1]
 80031de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80031e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1e3      	bne.n	80031ae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	330c      	adds	r3, #12
 80031fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	e853 3f00 	ldrex	r3, [r3]
 8003202:	60fb      	str	r3, [r7, #12]
   return(result);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f023 0310 	bic.w	r3, r3, #16
 800320a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	330c      	adds	r3, #12
 8003214:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003218:	61fa      	str	r2, [r7, #28]
 800321a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321c:	69b9      	ldr	r1, [r7, #24]
 800321e:	69fa      	ldr	r2, [r7, #28]
 8003220:	e841 2300 	strex	r3, r2, [r1]
 8003224:	617b      	str	r3, [r7, #20]
   return(result);
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1e3      	bne.n	80031f4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800322c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003230:	4619      	mov	r1, r3
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f848 	bl	80032c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003238:	e023      	b.n	8003282 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800323a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800323e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003242:	2b00      	cmp	r3, #0
 8003244:	d009      	beq.n	800325a <HAL_UART_IRQHandler+0x4ea>
 8003246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800324a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f929 	bl	80034aa <UART_Transmit_IT>
    return;
 8003258:	e014      	b.n	8003284 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800325a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800325e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00e      	beq.n	8003284 <HAL_UART_IRQHandler+0x514>
 8003266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800326a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326e:	2b00      	cmp	r3, #0
 8003270:	d008      	beq.n	8003284 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f969 	bl	800354a <UART_EndTransmit_IT>
    return;
 8003278:	e004      	b.n	8003284 <HAL_UART_IRQHandler+0x514>
    return;
 800327a:	bf00      	nop
 800327c:	e002      	b.n	8003284 <HAL_UART_IRQHandler+0x514>
      return;
 800327e:	bf00      	nop
 8003280:	e000      	b.n	8003284 <HAL_UART_IRQHandler+0x514>
      return;
 8003282:	bf00      	nop
  }
}
 8003284:	37e8      	adds	r7, #232	; 0xe8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop

0800328c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b090      	sub	sp, #64	; 0x40
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	603b      	str	r3, [r7, #0]
 80032ec:	4613      	mov	r3, r2
 80032ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032f0:	e050      	b.n	8003394 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032f8:	d04c      	beq.n	8003394 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d007      	beq.n	8003310 <UART_WaitOnFlagUntilTimeout+0x30>
 8003300:	f7fe fb52 	bl	80019a8 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800330c:	429a      	cmp	r2, r3
 800330e:	d241      	bcs.n	8003394 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	330c      	adds	r3, #12
 8003316:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331a:	e853 3f00 	ldrex	r3, [r3]
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003326:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	330c      	adds	r3, #12
 800332e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003330:	637a      	str	r2, [r7, #52]	; 0x34
 8003332:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003334:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003336:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003338:	e841 2300 	strex	r3, r2, [r1]
 800333c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800333e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1e5      	bne.n	8003310 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	3314      	adds	r3, #20
 800334a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	e853 3f00 	ldrex	r3, [r3]
 8003352:	613b      	str	r3, [r7, #16]
   return(result);
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	f023 0301 	bic.w	r3, r3, #1
 800335a:	63bb      	str	r3, [r7, #56]	; 0x38
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	3314      	adds	r3, #20
 8003362:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003364:	623a      	str	r2, [r7, #32]
 8003366:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003368:	69f9      	ldr	r1, [r7, #28]
 800336a:	6a3a      	ldr	r2, [r7, #32]
 800336c:	e841 2300 	strex	r3, r2, [r1]
 8003370:	61bb      	str	r3, [r7, #24]
   return(result);
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1e5      	bne.n	8003344 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e00f      	b.n	80033b4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	4013      	ands	r3, r2
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	bf0c      	ite	eq
 80033a4:	2301      	moveq	r3, #1
 80033a6:	2300      	movne	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	461a      	mov	r2, r3
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d09f      	beq.n	80032f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3740      	adds	r7, #64	; 0x40
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033bc:	b480      	push	{r7}
 80033be:	b095      	sub	sp, #84	; 0x54
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	330c      	adds	r3, #12
 80033ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ce:	e853 3f00 	ldrex	r3, [r3]
 80033d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80033d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	330c      	adds	r3, #12
 80033e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033e4:	643a      	str	r2, [r7, #64]	; 0x40
 80033e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80033ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033ec:	e841 2300 	strex	r3, r2, [r1]
 80033f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80033f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1e5      	bne.n	80033c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3314      	adds	r3, #20
 80033fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	e853 3f00 	ldrex	r3, [r3]
 8003406:	61fb      	str	r3, [r7, #28]
   return(result);
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f023 0301 	bic.w	r3, r3, #1
 800340e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3314      	adds	r3, #20
 8003416:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003418:	62fa      	str	r2, [r7, #44]	; 0x2c
 800341a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800341e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003420:	e841 2300 	strex	r3, r2, [r1]
 8003424:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1e5      	bne.n	80033f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003430:	2b01      	cmp	r3, #1
 8003432:	d119      	bne.n	8003468 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	330c      	adds	r3, #12
 800343a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	e853 3f00 	ldrex	r3, [r3]
 8003442:	60bb      	str	r3, [r7, #8]
   return(result);
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f023 0310 	bic.w	r3, r3, #16
 800344a:	647b      	str	r3, [r7, #68]	; 0x44
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	330c      	adds	r3, #12
 8003452:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003454:	61ba      	str	r2, [r7, #24]
 8003456:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003458:	6979      	ldr	r1, [r7, #20]
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	e841 2300 	strex	r3, r2, [r1]
 8003460:	613b      	str	r3, [r7, #16]
   return(result);
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1e5      	bne.n	8003434 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2220      	movs	r2, #32
 800346c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003476:	bf00      	nop
 8003478:	3754      	adds	r7, #84	; 0x54
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b084      	sub	sp, #16
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f7ff ff09 	bl	80032b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034a2:	bf00      	nop
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b085      	sub	sp, #20
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b21      	cmp	r3, #33	; 0x21
 80034bc:	d13e      	bne.n	800353c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c6:	d114      	bne.n	80034f2 <UART_Transmit_IT+0x48>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d110      	bne.n	80034f2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	461a      	mov	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	1c9a      	adds	r2, r3, #2
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	621a      	str	r2, [r3, #32]
 80034f0:	e008      	b.n	8003504 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	1c59      	adds	r1, r3, #1
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6211      	str	r1, [r2, #32]
 80034fc:	781a      	ldrb	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003508:	b29b      	uxth	r3, r3
 800350a:	3b01      	subs	r3, #1
 800350c:	b29b      	uxth	r3, r3
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	4619      	mov	r1, r3
 8003512:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10f      	bne.n	8003538 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003526:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003536:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	e000      	b.n	800353e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800353c:	2302      	movs	r3, #2
  }
}
 800353e:	4618      	mov	r0, r3
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b082      	sub	sp, #8
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68da      	ldr	r2, [r3, #12]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003560:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2220      	movs	r2, #32
 8003566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff fe8e 	bl	800328c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b08c      	sub	sp, #48	; 0x30
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b22      	cmp	r3, #34	; 0x22
 800358c:	f040 80ab 	bne.w	80036e6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003598:	d117      	bne.n	80035ca <UART_Receive_IT+0x50>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d113      	bne.n	80035ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035aa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c2:	1c9a      	adds	r2, r3, #2
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	629a      	str	r2, [r3, #40]	; 0x28
 80035c8:	e026      	b.n	8003618 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80035d0:	2300      	movs	r3, #0
 80035d2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035dc:	d007      	beq.n	80035ee <UART_Receive_IT+0x74>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10a      	bne.n	80035fc <UART_Receive_IT+0x82>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d106      	bne.n	80035fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f8:	701a      	strb	r2, [r3, #0]
 80035fa:	e008      	b.n	800360e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	b2db      	uxtb	r3, r3
 8003604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003608:	b2da      	uxtb	r2, r3
 800360a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800361c:	b29b      	uxth	r3, r3
 800361e:	3b01      	subs	r3, #1
 8003620:	b29b      	uxth	r3, r3
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	4619      	mov	r1, r3
 8003626:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003628:	2b00      	cmp	r3, #0
 800362a:	d15a      	bne.n	80036e2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 0220 	bic.w	r2, r2, #32
 800363a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800364a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695a      	ldr	r2, [r3, #20]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0201 	bic.w	r2, r2, #1
 800365a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2220      	movs	r2, #32
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003668:	2b01      	cmp	r3, #1
 800366a:	d135      	bne.n	80036d8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	330c      	adds	r3, #12
 8003678:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	e853 3f00 	ldrex	r3, [r3]
 8003680:	613b      	str	r3, [r7, #16]
   return(result);
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	f023 0310 	bic.w	r3, r3, #16
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	330c      	adds	r3, #12
 8003690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003692:	623a      	str	r2, [r7, #32]
 8003694:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003696:	69f9      	ldr	r1, [r7, #28]
 8003698:	6a3a      	ldr	r2, [r7, #32]
 800369a:	e841 2300 	strex	r3, r2, [r1]
 800369e:	61bb      	str	r3, [r7, #24]
   return(result);
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1e5      	bne.n	8003672 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0310 	and.w	r3, r3, #16
 80036b0:	2b10      	cmp	r3, #16
 80036b2:	d10a      	bne.n	80036ca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036b4:	2300      	movs	r3, #0
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80036ce:	4619      	mov	r1, r3
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff fdf9 	bl	80032c8 <HAL_UARTEx_RxEventCallback>
 80036d6:	e002      	b.n	80036de <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f7ff fde1 	bl	80032a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80036de:	2300      	movs	r3, #0
 80036e0:	e002      	b.n	80036e8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80036e2:	2300      	movs	r3, #0
 80036e4:	e000      	b.n	80036e8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80036e6:	2302      	movs	r3, #2
  }
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3730      	adds	r7, #48	; 0x30
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036f4:	b09f      	sub	sp, #124	; 0x7c
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003706:	68d9      	ldr	r1, [r3, #12]
 8003708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	ea40 0301 	orr.w	r3, r0, r1
 8003710:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	431a      	orrs	r2, r3
 800371c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	431a      	orrs	r2, r3
 8003722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	4313      	orrs	r3, r2
 8003728:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800372a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003734:	f021 010c 	bic.w	r1, r1, #12
 8003738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800373e:	430b      	orrs	r3, r1
 8003740:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800374c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800374e:	6999      	ldr	r1, [r3, #24]
 8003750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	ea40 0301 	orr.w	r3, r0, r1
 8003758:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800375a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	4bc5      	ldr	r3, [pc, #788]	; (8003a74 <UART_SetConfig+0x384>)
 8003760:	429a      	cmp	r2, r3
 8003762:	d004      	beq.n	800376e <UART_SetConfig+0x7e>
 8003764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	4bc3      	ldr	r3, [pc, #780]	; (8003a78 <UART_SetConfig+0x388>)
 800376a:	429a      	cmp	r2, r3
 800376c:	d103      	bne.n	8003776 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800376e:	f7fe fdbb 	bl	80022e8 <HAL_RCC_GetPCLK2Freq>
 8003772:	6778      	str	r0, [r7, #116]	; 0x74
 8003774:	e002      	b.n	800377c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003776:	f7fe fda3 	bl	80022c0 <HAL_RCC_GetPCLK1Freq>
 800377a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800377c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003784:	f040 80b6 	bne.w	80038f4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003788:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800378a:	461c      	mov	r4, r3
 800378c:	f04f 0500 	mov.w	r5, #0
 8003790:	4622      	mov	r2, r4
 8003792:	462b      	mov	r3, r5
 8003794:	1891      	adds	r1, r2, r2
 8003796:	6439      	str	r1, [r7, #64]	; 0x40
 8003798:	415b      	adcs	r3, r3
 800379a:	647b      	str	r3, [r7, #68]	; 0x44
 800379c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80037a0:	1912      	adds	r2, r2, r4
 80037a2:	eb45 0303 	adc.w	r3, r5, r3
 80037a6:	f04f 0000 	mov.w	r0, #0
 80037aa:	f04f 0100 	mov.w	r1, #0
 80037ae:	00d9      	lsls	r1, r3, #3
 80037b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037b4:	00d0      	lsls	r0, r2, #3
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	1911      	adds	r1, r2, r4
 80037bc:	6639      	str	r1, [r7, #96]	; 0x60
 80037be:	416b      	adcs	r3, r5
 80037c0:	667b      	str	r3, [r7, #100]	; 0x64
 80037c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	461a      	mov	r2, r3
 80037c8:	f04f 0300 	mov.w	r3, #0
 80037cc:	1891      	adds	r1, r2, r2
 80037ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80037d0:	415b      	adcs	r3, r3
 80037d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80037d8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80037dc:	f7fd fc88 	bl	80010f0 <__aeabi_uldivmod>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4ba5      	ldr	r3, [pc, #660]	; (8003a7c <UART_SetConfig+0x38c>)
 80037e6:	fba3 2302 	umull	r2, r3, r3, r2
 80037ea:	095b      	lsrs	r3, r3, #5
 80037ec:	011e      	lsls	r6, r3, #4
 80037ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037f0:	461c      	mov	r4, r3
 80037f2:	f04f 0500 	mov.w	r5, #0
 80037f6:	4622      	mov	r2, r4
 80037f8:	462b      	mov	r3, r5
 80037fa:	1891      	adds	r1, r2, r2
 80037fc:	6339      	str	r1, [r7, #48]	; 0x30
 80037fe:	415b      	adcs	r3, r3
 8003800:	637b      	str	r3, [r7, #52]	; 0x34
 8003802:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003806:	1912      	adds	r2, r2, r4
 8003808:	eb45 0303 	adc.w	r3, r5, r3
 800380c:	f04f 0000 	mov.w	r0, #0
 8003810:	f04f 0100 	mov.w	r1, #0
 8003814:	00d9      	lsls	r1, r3, #3
 8003816:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800381a:	00d0      	lsls	r0, r2, #3
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	1911      	adds	r1, r2, r4
 8003822:	65b9      	str	r1, [r7, #88]	; 0x58
 8003824:	416b      	adcs	r3, r5
 8003826:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	461a      	mov	r2, r3
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	1891      	adds	r1, r2, r2
 8003834:	62b9      	str	r1, [r7, #40]	; 0x28
 8003836:	415b      	adcs	r3, r3
 8003838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800383a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800383e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003842:	f7fd fc55 	bl	80010f0 <__aeabi_uldivmod>
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	4b8c      	ldr	r3, [pc, #560]	; (8003a7c <UART_SetConfig+0x38c>)
 800384c:	fba3 1302 	umull	r1, r3, r3, r2
 8003850:	095b      	lsrs	r3, r3, #5
 8003852:	2164      	movs	r1, #100	; 0x64
 8003854:	fb01 f303 	mul.w	r3, r1, r3
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	3332      	adds	r3, #50	; 0x32
 800385e:	4a87      	ldr	r2, [pc, #540]	; (8003a7c <UART_SetConfig+0x38c>)
 8003860:	fba2 2303 	umull	r2, r3, r2, r3
 8003864:	095b      	lsrs	r3, r3, #5
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800386c:	441e      	add	r6, r3
 800386e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003870:	4618      	mov	r0, r3
 8003872:	f04f 0100 	mov.w	r1, #0
 8003876:	4602      	mov	r2, r0
 8003878:	460b      	mov	r3, r1
 800387a:	1894      	adds	r4, r2, r2
 800387c:	623c      	str	r4, [r7, #32]
 800387e:	415b      	adcs	r3, r3
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
 8003882:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003886:	1812      	adds	r2, r2, r0
 8003888:	eb41 0303 	adc.w	r3, r1, r3
 800388c:	f04f 0400 	mov.w	r4, #0
 8003890:	f04f 0500 	mov.w	r5, #0
 8003894:	00dd      	lsls	r5, r3, #3
 8003896:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800389a:	00d4      	lsls	r4, r2, #3
 800389c:	4622      	mov	r2, r4
 800389e:	462b      	mov	r3, r5
 80038a0:	1814      	adds	r4, r2, r0
 80038a2:	653c      	str	r4, [r7, #80]	; 0x50
 80038a4:	414b      	adcs	r3, r1
 80038a6:	657b      	str	r3, [r7, #84]	; 0x54
 80038a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	461a      	mov	r2, r3
 80038ae:	f04f 0300 	mov.w	r3, #0
 80038b2:	1891      	adds	r1, r2, r2
 80038b4:	61b9      	str	r1, [r7, #24]
 80038b6:	415b      	adcs	r3, r3
 80038b8:	61fb      	str	r3, [r7, #28]
 80038ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038be:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80038c2:	f7fd fc15 	bl	80010f0 <__aeabi_uldivmod>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	4b6c      	ldr	r3, [pc, #432]	; (8003a7c <UART_SetConfig+0x38c>)
 80038cc:	fba3 1302 	umull	r1, r3, r3, r2
 80038d0:	095b      	lsrs	r3, r3, #5
 80038d2:	2164      	movs	r1, #100	; 0x64
 80038d4:	fb01 f303 	mul.w	r3, r1, r3
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	3332      	adds	r3, #50	; 0x32
 80038de:	4a67      	ldr	r2, [pc, #412]	; (8003a7c <UART_SetConfig+0x38c>)
 80038e0:	fba2 2303 	umull	r2, r3, r2, r3
 80038e4:	095b      	lsrs	r3, r3, #5
 80038e6:	f003 0207 	and.w	r2, r3, #7
 80038ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4432      	add	r2, r6
 80038f0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038f2:	e0b9      	b.n	8003a68 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038f6:	461c      	mov	r4, r3
 80038f8:	f04f 0500 	mov.w	r5, #0
 80038fc:	4622      	mov	r2, r4
 80038fe:	462b      	mov	r3, r5
 8003900:	1891      	adds	r1, r2, r2
 8003902:	6139      	str	r1, [r7, #16]
 8003904:	415b      	adcs	r3, r3
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800390c:	1912      	adds	r2, r2, r4
 800390e:	eb45 0303 	adc.w	r3, r5, r3
 8003912:	f04f 0000 	mov.w	r0, #0
 8003916:	f04f 0100 	mov.w	r1, #0
 800391a:	00d9      	lsls	r1, r3, #3
 800391c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003920:	00d0      	lsls	r0, r2, #3
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	eb12 0804 	adds.w	r8, r2, r4
 800392a:	eb43 0905 	adc.w	r9, r3, r5
 800392e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	4618      	mov	r0, r3
 8003934:	f04f 0100 	mov.w	r1, #0
 8003938:	f04f 0200 	mov.w	r2, #0
 800393c:	f04f 0300 	mov.w	r3, #0
 8003940:	008b      	lsls	r3, r1, #2
 8003942:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003946:	0082      	lsls	r2, r0, #2
 8003948:	4640      	mov	r0, r8
 800394a:	4649      	mov	r1, r9
 800394c:	f7fd fbd0 	bl	80010f0 <__aeabi_uldivmod>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	4b49      	ldr	r3, [pc, #292]	; (8003a7c <UART_SetConfig+0x38c>)
 8003956:	fba3 2302 	umull	r2, r3, r3, r2
 800395a:	095b      	lsrs	r3, r3, #5
 800395c:	011e      	lsls	r6, r3, #4
 800395e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003960:	4618      	mov	r0, r3
 8003962:	f04f 0100 	mov.w	r1, #0
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	1894      	adds	r4, r2, r2
 800396c:	60bc      	str	r4, [r7, #8]
 800396e:	415b      	adcs	r3, r3
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003976:	1812      	adds	r2, r2, r0
 8003978:	eb41 0303 	adc.w	r3, r1, r3
 800397c:	f04f 0400 	mov.w	r4, #0
 8003980:	f04f 0500 	mov.w	r5, #0
 8003984:	00dd      	lsls	r5, r3, #3
 8003986:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800398a:	00d4      	lsls	r4, r2, #3
 800398c:	4622      	mov	r2, r4
 800398e:	462b      	mov	r3, r5
 8003990:	1814      	adds	r4, r2, r0
 8003992:	64bc      	str	r4, [r7, #72]	; 0x48
 8003994:	414b      	adcs	r3, r1
 8003996:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	4618      	mov	r0, r3
 800399e:	f04f 0100 	mov.w	r1, #0
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	008b      	lsls	r3, r1, #2
 80039ac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80039b0:	0082      	lsls	r2, r0, #2
 80039b2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80039b6:	f7fd fb9b 	bl	80010f0 <__aeabi_uldivmod>
 80039ba:	4602      	mov	r2, r0
 80039bc:	460b      	mov	r3, r1
 80039be:	4b2f      	ldr	r3, [pc, #188]	; (8003a7c <UART_SetConfig+0x38c>)
 80039c0:	fba3 1302 	umull	r1, r3, r3, r2
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	2164      	movs	r1, #100	; 0x64
 80039c8:	fb01 f303 	mul.w	r3, r1, r3
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	3332      	adds	r3, #50	; 0x32
 80039d2:	4a2a      	ldr	r2, [pc, #168]	; (8003a7c <UART_SetConfig+0x38c>)
 80039d4:	fba2 2303 	umull	r2, r3, r2, r3
 80039d8:	095b      	lsrs	r3, r3, #5
 80039da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039de:	441e      	add	r6, r3
 80039e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039e2:	4618      	mov	r0, r3
 80039e4:	f04f 0100 	mov.w	r1, #0
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	1894      	adds	r4, r2, r2
 80039ee:	603c      	str	r4, [r7, #0]
 80039f0:	415b      	adcs	r3, r3
 80039f2:	607b      	str	r3, [r7, #4]
 80039f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039f8:	1812      	adds	r2, r2, r0
 80039fa:	eb41 0303 	adc.w	r3, r1, r3
 80039fe:	f04f 0400 	mov.w	r4, #0
 8003a02:	f04f 0500 	mov.w	r5, #0
 8003a06:	00dd      	lsls	r5, r3, #3
 8003a08:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a0c:	00d4      	lsls	r4, r2, #3
 8003a0e:	4622      	mov	r2, r4
 8003a10:	462b      	mov	r3, r5
 8003a12:	eb12 0a00 	adds.w	sl, r2, r0
 8003a16:	eb43 0b01 	adc.w	fp, r3, r1
 8003a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f04f 0100 	mov.w	r1, #0
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	008b      	lsls	r3, r1, #2
 8003a2e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a32:	0082      	lsls	r2, r0, #2
 8003a34:	4650      	mov	r0, sl
 8003a36:	4659      	mov	r1, fp
 8003a38:	f7fd fb5a 	bl	80010f0 <__aeabi_uldivmod>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4b0e      	ldr	r3, [pc, #56]	; (8003a7c <UART_SetConfig+0x38c>)
 8003a42:	fba3 1302 	umull	r1, r3, r3, r2
 8003a46:	095b      	lsrs	r3, r3, #5
 8003a48:	2164      	movs	r1, #100	; 0x64
 8003a4a:	fb01 f303 	mul.w	r3, r1, r3
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	011b      	lsls	r3, r3, #4
 8003a52:	3332      	adds	r3, #50	; 0x32
 8003a54:	4a09      	ldr	r2, [pc, #36]	; (8003a7c <UART_SetConfig+0x38c>)
 8003a56:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5a:	095b      	lsrs	r3, r3, #5
 8003a5c:	f003 020f 	and.w	r2, r3, #15
 8003a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4432      	add	r2, r6
 8003a66:	609a      	str	r2, [r3, #8]
}
 8003a68:	bf00      	nop
 8003a6a:	377c      	adds	r7, #124	; 0x7c
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a72:	bf00      	nop
 8003a74:	40011000 	.word	0x40011000
 8003a78:	40011400 	.word	0x40011400
 8003a7c:	51eb851f 	.word	0x51eb851f

08003a80 <_init>:
 8003a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a82:	bf00      	nop
 8003a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a86:	bc08      	pop	{r3}
 8003a88:	469e      	mov	lr, r3
 8003a8a:	4770      	bx	lr

08003a8c <_fini>:
 8003a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8e:	bf00      	nop
 8003a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a92:	bc08      	pop	{r3}
 8003a94:	469e      	mov	lr, r3
 8003a96:	4770      	bx	lr
